<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于我</title>
    <url>/2021/11/20/about-me/</url>
    <content><![CDATA[<p><img src="https://api.xecades.xyz/api?bg=255%2C255%2C255%2C1&amp;date=2022-04-10&amp;str=NOI2022%E7%9C%81%E9%80%89%E6%9C%80%E5%A4%9A&amp;quote=%E6%98%AF%E6%97%B6%E5%80%99%E5%BC%80%E5%A7%8B%E5%8A%AA%E5%8A%9B%E4%BA%86%F0%9F%92%AA&amp;img=1&amp;codeforces=yaoxi&amp;luogu=yaoxi&amp;github=yaoxi-std&amp;email=yaoxi20061225%40126.com&amp;site=yaoxi-std.github.io" alt=""></p>
<p><a href="https://www.luogu.com.cn/user/141573"><img src="https://luogu-card-qinyihao.vercel.app/about?id=141573&amp;card_width=800" alt="luogu-info"></a></p>
<p><a href="https://www.luogu.com.cn/user/141573"><img src="https://statcard.vercel.app/practice?id=141573&amp;card_width=800" alt="luogu-solved"></a></p>
<p><a href="https://www.luogu.com.cn/user/141573"><img src="https://statcard.vercel.app/shield?id=141573" alt="luogu"></a></p>
<p><a href="https://atcoder.jp/users/yaoxi_std"><img src="https://atcoder.swift-zym.workers.dev/yaoxi_std" alt="atcoder"></a></p>
<p><a href="https://codeforces.com/profile/yaoxi"><img src="https://codeforces-status.yaoxi-std.workers.dev/shields?handle=yaoxi" alt="codeforces"></a></p>
]]></content>
  </entry>
  <entry>
    <title>任务计划</title>
    <url>/2021/11/20/missions/</url>
    <content><![CDATA[<h3 id="2021-11-20-Sat"><a href="#2021-11-20-Sat" class="headerlink" title="2021.11.20 (Sat)"></a>2021.11.20 (Sat)</h3><p><del><a href="/2021/11/25/sol-p3715/" title="P3715">P3715</a></del></p>
<p><del><a href="/2021/11/22/sol-cf702f/" title="CF702F">CF702F</a></del> <del><a href="/2021/11/22/sol-cf710f/" title="CF710F">CF710F</a></del></p>
<p><del><a href="/2021/11/22/sol-p4632/" title="P4632">P4632</a></del></p>
<p><del><a href="/2021/11/23/sol-p6144/" title="P6144">P6144</a></del></p>
<p><del><a href="/2021/11/24/sol-cf575a/" title="CF575A">CF575A</a></del></p>
<p><del><a href="/2021/11/25/sol-p7154/" title="P7154">P7154</a></del> <del><a href="/2021/11/26/sol-p7155/" title="P7155">P7155</a></del></p>
<p><del><a href="/2021/11/26/sol-bzoj2720/" title="BZOJ2720">BZOJ2720</a></del></p>
<h3 id="2021-11-27-Sat"><a href="#2021-11-27-Sat" class="headerlink" title="2021.11.27 (Sat)"></a>2021.11.27 (Sat)</h3><p><del><a href="/2021/11/27/sol-p2495/" title="P2495">P2495</a></del> <del><a href="/2021/11/27/sol-p3233/" title="P3233">P3233</a></del></p>
<p><del><a href="/2021/11/28/sol-p3803/" title="P3803">P3803</a></del></p>
<p><del><a href="/2021/11/29/sol-p4606/" title="P4606">P4606</a></del></p>
<p><del><a href="/2021/12/05/sol-p4238/" title="P4238">P4238</a></del></p>
<p><del><a href="/2021/12/01/sol-cf1320e/" title="CF1320E">CF1320E</a></del></p>
<p><del><a href="/2021/12/03/sol-cf639f/" title="CF639F">CF639F</a></del></p>
<p>LOJ6184</p>
<h3 id="2021-12-4-Sat"><a href="#2021-12-4-Sat" class="headerlink" title="2021.12.4 (Sat)"></a>2021.12.4 (Sat)</h3><p><del><a href="/2021/12/04/sol-cf526g/" title="CF526G">CF526G</a></del> <del><a href="/2021/11/28/sol-p3803/" title="P3803">P3803</a></del></p>
<p><del><a href="/2021/12/05/sol-p4721/" title="P4721">P4721</a></del> <del><a href="/2021/12/05/sol-cf632e/" title="CF632E">CF632E</a></del> <del><a href="/2021/12/05/sol-p4245/" title="P4245">P4245</a></del></p>
<p><del><a href="/2021/12/06/sol-at2064/" title="AT2064">AT2064</a></del></p>
<p><del><a href="/2021/12/08/sol-cf1096g/" title="CF1096G">CF1096G</a></del></p>
<p><del><a href="/2021/12/10/sol-p2664/" title="P2664">P2664</a></del> <del><a href="/2021/12/10/sol-p6329/" title="P6329">P6329</a></del></p>
<h3 id="2021-12-15-Wed"><a href="#2021-12-15-Wed" class="headerlink" title="2021.12.15 (Wed)"></a>2021.12.15 (Wed)</h3><p>因为月考所以🐦🐦🐦了几天，但月考考的很烂</p>
<p><del><a href="/2021/12/15/sol-p2056/" title="P2056">P2056</a></del></p>
<p><del><a href="/2021/12/16/sol-p3809/" title="P3809">P3809</a></del></p>
<p><del><a href="/2021/12/17/sol-p2408/" title="P2408">P2408</a></del> <del><a href="/2021/12/17/sol-p4051/" title="P4051">P4051</a></del> <del><a href="/2021/12/17/sol-p4248/" title="P4248">P4248</a></del></p>
<h3 id="2021-12-19-Sun"><a href="#2021-12-19-Sun" class="headerlink" title="2021.12.19 (Sun)"></a>2021.12.19 (Sun)</h3><p><del><a href="/2021/12/19/sol-p3181/" title="P3181">P3181</a></del></p>
<p><del><a href="/2021/12/20/sol-p2756/" title="P2756">P2756</a></del> <del><a href="/2021/12/20/sol-p2761/" title="P2761">P2761</a></del></p>
<p><del><a href="/2021/12/21/sol-p4011/" title="P4011">P4011</a></del> <del><a href="/2021/12/21/sol-p4016/" title="P4016">P4016</a></del></p>
<p><del><a href="/2021/12/22/sol-p1251/" title="P1251">P1251</a></del> <del><a href="/2021/12/22/sol-p2754/" title="P2754">P2754</a></del> <del><a href="/2021/12/22/sol-p2762/" title="P2762">P2762</a></del></p>
<p><del><a href="/2021/12/23/sol-p2763/" title="P2763">P2763</a></del></p>
<p><del><a href="/2021/12/24/sol-p2764/" title="P2764">P2764</a></del> <del><a href="/2021/12/24/sol-p2765/" title="P2765">P2765</a></del> <del><a href="/2021/12/24/sol-p2766/" title="P2766">P2766</a></del> <del><a href="/2021/12/24/sol-p2770/" title="P2770">P2770</a></del></p>
<p><del><a href="/2021/12/25/sol-p4716/" title="P4716">P4716</a></del> <del><a href="/2021/12/25/sol-p2774/" title="P2774">P2774</a></del> <del><a href="/2021/12/25/sol-p3254/" title="P3254">P3254</a></del> <del><a href="/2021/12/25/sol-p3355/" title="P3355">P3355</a></del></p>
<h3 id="2021-12-26-Sun"><a href="#2021-12-26-Sun" class="headerlink" title="2021.12.26 (Sun)"></a>2021.12.26 (Sun)</h3><p><del><a href="/2021/12/27/sol-p3356/" title="P3356">P3356</a></del> <del><a href="/2021/12/27/sol-p3357/" title="P3357">P3357</a></del> <del><a href="/2021/12/27/sol-p3358/" title="P3358">P3358</a></del></p>
<p><del><a href="/2021/12/30/sol-p4012/" title="P4012">P4012</a></del> <del><a href="/2021/12/30/sol-p4013/" title="P4013">P4013</a></del> <del><a href="/2021/12/30/sol-p4014/" title="P4014">P4014</a></del> <del><a href="/2021/12/30/sol-p4015/" title="P4015">P4015</a></del></p>
<p><del><a href="/2021/12/31/sol-p4009/" title="P4009">P4009</a></del></p>
<h3 id="2022-1-1-Sat"><a href="#2022-1-1-Sat" class="headerlink" title="2022.1.1 (Sat)"></a>2022.1.1 (Sat)</h3><p><del><a href="/2022/01/02/sol-cf986d/" title="CF986D">CF986D</a></del></p>
<p><del><a href="/2022/01/03/sol-cf1613f/" title="CF1613F">CF1613F</a></del></p>
<p><del><a href="/2022/01/03/sol-cf755g/" title="CF755G">CF755G</a></del></p>
<p><del><a href="/2022/01/05/sol-cf623e/" title="CF623E">CF623E</a></del></p>
<p><del><a href="/2022/01/07/sol-cf773f/" title="CF773F">CF773F</a></del></p>
<h3 id="2022-1-9-Sun"><a href="#2022-1-9-Sun" class="headerlink" title="2022.1.9 (Sun)"></a>2022.1.9 (Sun)</h3><p><del><a href="/2022/01/09/sol-cf553e/" title="CF553E">CF553E</a></del></p>
<h3 id="2022-1-18-Tue"><a href="#2022-1-18-Tue" class="headerlink" title="2022.1.18 (Tue)"></a>2022.1.18 (Tue)</h3><p>我都🐦了多久了</p>
<p><del><a href="/2022/01/18/sol-p4725/" title="P4725">P4725</a></del> <del><a href="/2022/01/18/sol-p4726/" title="P4726">P4726</a></del></p>
<p><del><a href="/2022/01/17/sol-p4002/" title="P4002">P4002</a></del> <del><a href="/2022/01/20/sol-p5850/" title="P5850">P5850</a></del> <del><a href="/2022/01/20/sol-p4223/" title="P4223">P4223</a></del></p>
<p><del><a href="/2022/01/21/sol-cf297e/" title="CF297E">CF297E</a></del> <del><a href="/2022/01/23/sol-p3690/" title="P3690">P3690</a></del> <del><a href="/2022/01/23/sol-p1501/" title="P1501">P1501</a></del> <del><a href="/2022/01/25/sol-p4491/" title="P4491">P4491</a></del></p>
<h3 id="2022-1-26-Wed"><a href="#2022-1-26-Wed" class="headerlink" title="2022.1.26 (Wed)"></a>2022.1.26 (Wed)</h3><p><del><a href="/2022/01/26/sol-uva11107/" title="UVA11107">UVA11107</a></del></p>
<h3 id="2022-2-2-Wed"><a href="#2022-2-2-Wed" class="headerlink" title="2022.2.2 (Wed)"></a>2022.2.2 (Wed)</h3><p><del><a href="/2022/02/02/sol-p2336/" title="P2336">P2336</a></del> <del><a href="/2022/02/02/sol-p3649/" title="P3649">P3649</a></del></p>
<p><del><a href="/2022/02/03/sol-p4341/" title="P4341">P4341</a></del> <del><a href="/2022/02/03/sol-p4070/" title="P4070">P4070</a></del> <del><a href="/2022/02/03/sol-p5028/" title="P5028">P5028</a></del> <del><a href="/2022/02/03/sol-p4081/" title="P4081">P4081</a></del> 边做纸糊船边补魔禁，多是件美事啊</p>
<p><del><a href="/2022/02/04/sol-p4094/" title="P4094">P4094</a></del> <del><a href="/2022/02/04/sol-p1117/" title="P1117">P1117</a></del></p>
<p><del><a href="/2022/02/05/sol-p3900/" title="P3900">P3900</a></del> <del><a href="/2022/02/05/sol-p6095/" title="P6095">P6095</a></del></p>
<p><del><a href="/2022/02/05/sol-p4770/" title="P4770">P4770</a></del> <del><a href="/2022/02/06/sol-cf986e/" title="CF986E">CF986E</a></del></p>
<p><del><a href="/2022/02/07/sol-p3203/" title="P3203">P3203</a></del></p>
<p><del><a href="/2022/02/08/sol-p4719/" title="P4719">P4719</a></del></p>
<h3 id="2022-3-3-Thur"><a href="#2022-3-3-Thur" class="headerlink" title="2022.3.3 (Thur)"></a>2022.3.3 (Thur)</h3><p>已经$(1+1)\times 4+5+1+4$天没更新了</p>
<p>这两天在学校集训，模拟赛+专题的模式，找时间得把比赛总结迁过来了。</p>
<h3 id="待写的题解"><a href="#待写的题解" class="headerlink" title="待写的题解"></a>待写的题解</h3>]]></content>
      <tags>
        <tag>schedules</tag>
      </tags>
  </entry>
  <entry>
    <title>SB错误</title>
    <url>/2021/11/20/sb-mistakes/</url>
    <content><![CDATA[<blockquote>
<p>数组开太小，爆零两行泪</p>
<p>内存开太大，爆零两行泪</p>
<p>多测不清空，爆零两行泪</p>
<p><code>cin</code> 关同步，爆零两行泪</p>
<p>特判不取模，爆零两行泪</p>
<p>卷积不清空，爆零两行泪</p>
<p>斜率除以零，爆零两行泪</p>
<p>浮点丢精度，爆零两行泪</p>
</blockquote>
<span id="more"></span>
<h2 id="一些sb的错误汇总"><a href="#一些sb的错误汇总" class="headerlink" title="一些sb的错误汇总"></a>一些sb的错误汇总</h2><ul>
<li>AC自动机在做多模式匹配的时候<strong>一定要跳fail指针</strong>不然会<strong>漏遍历很多东西</strong>（AC自动机白学了）！！！(2021.11.20, P3715)</li>
<li>写矩阵快速幂优化dp（尤其是dp[i]依赖于dp[i-2]这种）的时候一定要算好，不能重复加了(2021.11.20, P3715)</li>
<li>取模的题目遇到<strong>特判</strong>一定记得输出<strong>取模</strong>，不然等着被hack吧。。。(2021.11.24, CF575A)</li>
<li>换根$dp$不要在统计$pre$和$nxt$数组时就写$dfs$!!!数组整个改变!!!不然会死得很惨（指对着n=1000,m=100的大样例调1h）(2021.11.27, P3233)</li>
<li>多测不清空，爆零两行泪/kk 多测<code>dfn</code>数组记得清空啊 (2021.11.29, P4606)</li>
<li><code>(0 - 1) / x + 1 == 1</code>，要特判或者写成<code>(? + x - 1) / x</code> (2021.12.1 CF1320E)</li>
<li><code>priority_queue&lt;_Tp&gt;</code>默认是<code>less&lt;_Tp&gt;</code>，自定义类型要么按照$\gt$的逻辑重载<code>operator&lt;()</code>，要么按照$\gt$的逻辑重载<code>operator&gt;()</code>并且修改默认参数（这个好像错了不止一次了）(2021.12.1 CF1320E)</li>
<li>开<code>vector</code>当动态开点树状数组<code>resize</code>时没有$+1$ (2021.12.10, P6329)</li>
<li>费用流需要注意的地方见<a href="/2021/12/17/top-networkflow/" title="这里">这里</a> (2021.12.21, P4016)</li>
<li>费用流不能在残余网络上加边重新跑，否则无法保证最大/最小费用 (2021.12.30, P4013)</li>
<li>FFT不仅要开<strong>两倍</strong>长数组，原函数区间$[n,2n)$内的系数还要<strong>清空</strong>，不要以为$\ge n$或者$\ge 2n$的系数会被忽略，它们会被计算到DFT的点值表达式中去，并且在IDFT时被错误地算回$\lt n$或者$\lt 2n$系数的贡献中 (2022.1.8, CF773F)</li>
<li>多项式求逆前记得清空ans数组啊，并且要清空$len \times 2$ (2022.1.19, P4726)</li>
</ul>
]]></content>
      <tags>
        <tag>important</tag>
      </tags>
  </entry>
  <entry>
    <title>专题汇总</title>
    <url>/2022/01/27/topics/</url>
    <content><![CDATA[<h2 id="专题汇总"><a href="#专题汇总" class="headerlink" title="专题汇总"></a>专题汇总</h2><span id="more"></span>
<a href="/2021/12/17/top-virtualtree/" title="【专题】虚树">【专题】虚树</a> </br>

<a href="/2021/12/17/top-poly/" title="【专题】多项式">【专题】多项式</a> </br>

<a href="/2021/12/17/top-suffixarray/" title="【专题】后缀数组 SA">【专题】后缀数组 SA</a> </br>

<a href="/2021/12/17/top-networkflow/" title="【专题】网络流">【专题】网络流</a>]]></content>
      <categories>
        <category>专题</category>
      </categories>
  </entry>
  <entry>
    <title>一些tips</title>
    <url>/2021/11/20/some-tips/</url>
    <content><![CDATA[<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><span id="more"></span>
<ul>
<li>AC自动机build以后可以先把cnt数组预处理出来，这样就不用每次都跳fail指针了（也不知道算卡常还是说不预处理复杂度就不对，反正我的<a href="/2021/11/22/sol-cf710f/" title="CF710F">CF710F</a>就是加了这个优化才过了的）(2021.11.22, CF710F)</li>
<li>计算树上最长路径和可以用<strong><a href="/2021/12/04/sol-cf526g/" title="长链剖分的奇妙性质">长链剖分的奇妙性质</a></strong>来维护 (2021.12.4, CF526G)</li>
<li><strong>不要</strong>用变量<code>M_PI</code>!!! <strong>要</strong>用<code>acos(-1)</code>!!! (2021.12.5, P4245)</li>
<li><code>scanf(&quot;%[^\n]&quot;, buf)</code>可以读入整行，其中<code>buf</code>是<code>char</code>数组。 (2021.12.22, P2762)</li>
</ul>
]]></content>
      <tags>
        <tag>important</tag>
      </tags>
  </entry>
  <entry>
    <title>游记（寄）</title>
    <url>/2022/01/27/trips/</url>
    <content><![CDATA[<h2 id="游记（寄）"><a href="#游记（寄）" class="headerlink" title="游记（寄）"></a>游记（寄）</h2><span id="more"></span>
<a href="/2022/01/27/trip-wc2022/" title="WC2022游寄">WC2022游寄</a>
<p>蜜蜂太好玩了（bushi</p>
<p><img src="bee.png" alt="bee"></p>
]]></content>
      <categories>
        <category>游记</category>
      </categories>
  </entry>
  <entry>
    <title>NOI系列比赛获奖记录</title>
    <url>/2021/11/20/noi-records/</url>
    <content><![CDATA[<h2 id="获奖记录"><a href="#获奖记录" class="headerlink" title="获奖记录"></a>获奖记录</h2><span id="more"></span>
<p><del>初三才拿TG1=的屑</del></p>
]]></content>
      <tags>
        <tag>records</tag>
      </tags>
  </entry>
  <entry>
    <title>Important dates</title>
    <url>/2021/11/20/date-records/</url>
    <content><![CDATA[<h2 id="一些在OI中对我来说比较重要的时刻"><a href="#一些在OI中对我来说比较重要的时刻" class="headerlink" title="一些在OI中对我来说比较重要的时刻"></a>一些在OI中对我来说比较重要的时刻</h2><span id="more"></span>
]]></content>
      <tags>
        <tag>records</tag>
      </tags>
  </entry>
  <entry>
    <title>校内训练</title>
    <url>/2021/11/21/school-contests/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1949d23bc09b3b9e1279b730add65bce238b75cca493bd3fa766d47d9d779a84">67362a200d4bb0b1cd1ef5f7bb774ffb58a2089a15905f15111606287b2ae8c1fda5908825b78d3bd9f0460dd575aac087b0d3ae30eb047be42cd4b539c67f53c4b0f1311d9282a9c8b625c10d8f227bb3e45c44d3465d3d9ccdb76fbaf5e7da61e6ccede5c1bb855f6e2762bdfca6feb6e75183f2cffc09751eb47da6c6b50245203ea78cdff71016778372e2d02893ce3e664baf7d6d4fafab9e7e9c3196f94ab5d902ab2b40a06a1bdf81c8ebdf267fc4477c6a065c62e4c809a6f76717cd6ec52ac9d845b1482f73c75a1f6dade960d9b8483013704af56fcc510a75d157a5cfdfa6f23df7aeee11009beea580ee5b7268b768c9265caae5c1404b8860f4468182579c62f9e0532e24e8b6d7ed94</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>school</tag>
      </tags>
  </entry>
  <entry>
    <title>AtCoder 比赛记录</title>
    <url>/2021/11/20/atcoder-records/</url>
    <content><![CDATA[<p><a href="https://atcoder.jp/users/yaoxi_std"><img src="https://atcoder.swift-zym.workers.dev/yaoxi_std" alt="atcoder"></a></p>
<span id="more"></span>
<h2 id="AtCoder-上的比赛记录"><a href="#AtCoder-上的比赛记录" class="headerlink" title="AtCoder 上的比赛记录"></a>AtCoder 上的比赛记录</h2><h3 id="2021-11-21-ARC129"><a href="#2021-11-21-ARC129" class="headerlink" title="2021.11.21 ARC129"></a>2021.11.21 ARC129</h3><p>被之前两道DS题搞得有点头晕，看了下题感觉<del>只会做A</del>挺思维的，于是切了下A题就去继续做<a href="/2021/11/20/missions/" title="任务计划">任务计划</a>了。<br>update 2021.11.22 （本以为肯定要掉好多分，结果分数<del>不减反增</del>）</p>
]]></content>
      <tags>
        <tag>records</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces 比赛记录</title>
    <url>/2021/11/20/codeforces-records/</url>
    <content><![CDATA[<style type="text/css">
.rated-user {
    font-family: helvetica neue,Helvetica,Arial,sans-serif;
    text-decoration: none!important;
    font-weight: 700;
    display: inline-block;
}
.legendary-user-first-letter {
    color: #000!important
}
.user-legendary {
    color: red!important
}
.user-red {
    color: red!important
}
.user-orange {
    color: #ff8c00!important
}
.user-violet {
    color: #a0a!important
}
.user-blue {
    color: blue!important
}
.user-cyan {
    color: #03a89e!important
}
.user-green {
    color: green!important
}
.user-gray {
    color: gray!important
}
</style>

<p><a href="https://codeforces.com/profile/yaoxi"><img src="https://codeforces-status.yaoxi-std.workers.dev/shields?handle=yaoxi" alt="codeforces"></a></p>
<span id="more"></span>
<h2 id="CodeForces-上的比赛记录"><a href="#CodeForces-上的比赛记录" class="headerlink" title="CodeForces 上的比赛记录"></a>CodeForces 上的比赛记录</h2><h3 id="2021-11-22-CF1612"><a href="#2021-11-22-CF1612" class="headerlink" title="2021.11.22 CF1612"></a>2021.11.22 CF1612</h3><p>没算好恰饭的时间，<del>以后不打下午5点的CF了</del></p>
<p>一样是切了ABCD，看了眼EFG走人<del>（太不专心了，也不知道掉多少分）</del><br><del>难道学校今天开家长会就是为了让我们打下午的Codeforces的。。。</del></p>
<h3 id="2022-1-3-CF1621"><a href="#2022-1-3-CF1621" class="headerlink" title="2022.1.3 CF1621"></a>2022.1.3 CF1621</h3><font class="rated-user user-blue">yaoxi</font>
$\to$
<font class="rated-user user-violet">yaoxi</font>

<p>时隔多<del>年</del>日再次捡起Codeforces</p>
<p>没想到D题正解竟如此离谱，直接取$8$个点的$\min$就A了。</p>
]]></content>
      <tags>
        <tag>records</tag>
      </tags>
  </entry>
  <entry>
    <title>论对拍在OI中的妙用</title>
    <url>/2022/03/03/matcher/</url>
    <content><![CDATA[<h1 id="论对拍在OI中的妙用"><a href="#论对拍在OI中的妙用" class="headerlink" title="论对拍在OI中的妙用"></a>论对拍在OI中的妙用</h1><span id="more"></span>
<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>众所周知，国内的OI比赛中，一般都是以选手的最后一次提交得分为准，且选手无法在比赛当中实时查看得分。这就导致了很多时候选手的最终得分与期望得分不符的情况，也就是所谓的“挂分”。为了避免这种情况的发生，选手一般会在比赛中自己造数据，分别让暴力程序和待检验的程序计算，检验输出是否相同，这就是所谓“对拍”。</p>
<blockquote>
<p>对拍是一种进行检验或调试的方法，通过对比两个程序的输出来检验程序的正确性。可以将自己程序的输出与其他程序的输出进行对比，从而判断自己的程序是否正确。 </p>
<p> —— OI Wiki</p>
</blockquote>
<p>对拍过程需要多次进行，因此需要选手实现自动化对拍。</p>
<p>最基础的对拍程序框架如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> cas = <span class="number">1000</span>; <span class="comment">// 对拍次数</span></span><br><span class="line">    <span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">        <span class="comment">// 在 Linux / macOS 下运行当前目录下文件时需要加 `./` 前缀，Windows 可以不加</span></span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;./_generator.exe &gt; task.in&quot;</span>);         <span class="comment">// 造数据</span></span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;./_brute.exe &lt; task.in &gt; task.ans&quot;</span>);  <span class="comment">// 获得暴力程序的输出</span></span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;./task.exe &lt; task.in &gt; task.out&quot;</span>);    <span class="comment">// 获得待检验程序的输出</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">system</span>(<span class="string">&quot;fc.exe task.out task.ans&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// Windows 下使用 `fc` 命令比较文件是否相同</span></span><br><span class="line">            <span class="comment">// 如果相同，`system` 调用会返回 0，否则返回 1 表示不同</span></span><br><span class="line">            <span class="comment">// Linux / macOS 下没有 `fc` 命令，用 `diff` 替代如下：</span></span><br><span class="line">            <span class="comment">// system(&quot;diff task.out task.ans&quot;);</span></span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;Wrong Answer&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;Accepted&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中的 <code>_generator.exe</code> 是数据生成器的可执行文件，<code>_brute.exe</code> 为暴力可执行文件，<code>task.exe</code> 为待检验程序的可执行文件，这三个文件需要与对拍程序的可执行文件（我一般称作 <code>matcher.exe</code>）放在同一个目录下。</p>
<p>这种对拍虽然简单，但有时在比赛中不能获得很好的效果，比如只能将待检验程序与暴力进行对拍，无法检测数组越界等。</p>
<p>本文就来讲讲“对拍在OI中的妙用”，即<strong>高阶的对拍技巧</strong>。</p>
<hr>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="数据生成器的写法"><a href="#数据生成器的写法" class="headerlink" title="数据生成器的写法"></a>数据生成器的写法</h2><p>在考场上，我们不会去写那种非常标准的 <code>generator</code>（毕竟考场上也不会给你提供 <code>testlib.h</code>）。为了便于生成不同子任务对应的数据范围，我一般会使用一下框架编写生成器：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 头文件省略</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机数部分，保证数据的随机性</span></span><br><span class="line">random_device rd;</span><br><span class="line"><span class="function">mt19937 <span class="title">rng</span><span class="params">(rd())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//// 生成随机整数，范围 [l, r]</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rand_int</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="function">uniform_int_distribution&lt;<span class="type">int</span>&gt; <span class="title">qwq</span><span class="params">(l, r)</span></span>;    <span class="comment">// C++11 自带的均匀分布</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">qwq</span>(rng);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//// 生成随机浮点数，范围 [l, r)</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">rand_double</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="function">uniform_real_distribution&lt;<span class="type">double</span>&gt; <span class="title">qwq</span><span class="params">(l, r)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">qwq</span>(rng);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应子任务的数据范围</span></span><br><span class="line"><span class="comment">// 使用 namespace 较为优雅</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//// 对应的第一个 subtask</span></span><br><span class="line"><span class="keyword">namespace</span> subtask1 &#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N_MIN = <span class="number">100</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N_MAX = <span class="number">200</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> A_MAX = <span class="number">1e5</span>;</span><br><span class="line">&#125;;  <span class="comment">// namespace subtask1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//// 对应的第二个 subtask</span></span><br><span class="line"><span class="keyword">namespace</span> subtask2 &#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N_MIN = <span class="number">1e3</span>;</span><br><span class="line"><span class="comment">//// ......</span></span><br><span class="line">&#125;;  <span class="comment">// namespace subtask2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//// 需要修改数据范围时，只需要修改下面这一句就行</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> subtask1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量储存</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, a[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数部分</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//// 造数据</span></span><br><span class="line">    n = <span class="built_in">rand_int</span>(N_MIN, N_MAX);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        a[i] = <span class="built_in">rand_int</span>(<span class="number">1</span>, A_MAX);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//// 输出数据</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>, a[i], <span class="string">&quot; \n&quot;</span>[i == n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自己研究出来的 <code>generator</code> 不得不说真的挺优雅～</p>
<h3 id="数据的随机性"><a href="#数据的随机性" class="headerlink" title="数据的随机性"></a>数据的随机性</h3><p>这份生成器在 Linux / macOS 下完美运行并且可以生成完全随机的数据。但是如果你在 Windows 下使用 MinGW 编译，就会发现每次输出的数据 !完!全!相!同! </p>
<p>这是由于 MinGW 的 <code>random_device</code> 实现不好，没有调用系统熵，从而不能做到真随机。至于在 MinGW 下的真随机，笔者也没有找到较好的方法。鉴于大部分 NOI 系列比赛中都会提供 NOI Linux <del>（除了 JSOI 这种毒瘤）</del>，还是建议大家在 Linux 下对拍吧！</p>
<h2 id="各种错误的处理"><a href="#各种错误的处理" class="headerlink" title="各种错误的处理"></a>各种错误的处理</h2><h3 id="Wrong-Answer-的处理"><a href="#Wrong-Answer-的处理" class="headerlink" title="Wrong Answer 的处理"></a>Wrong Answer 的处理</h3><p>对于常规情况，我们只需要使用上文提到的 <code>fc</code> 或 <code>diff</code> 命令即可检验两个文件是否相同。</p>
<h4 id="忽略空白符"><a href="#忽略空白符" class="headerlink" title="忽略空白符"></a>忽略空白符</h4><p>然而有时会遇到这样的情况:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ diff 1.out 1.ans</span><br><span class="line">2d1</span><br><span class="line">&lt;</span><br></pre></td></tr></table></figure>
<p>打开文件一看，<code>1.out</code> 如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">114514 1919810</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>1.ans</code> 如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">114514 1919810</span><br></pre></td></tr></table></figure>
<p>这样的输出让你感到奇怪：明明两个输出的数字都一样，为什么 <code>diff</code> 出来会报错呢？仔细看了一会儿发现 <code>1.out</code> 多了一个行末回车。这是比较好的情况，万一 <code>.ans</code> 文件是在 Windows 下制造的，很有可能会使得 <code>.ans</code> 文件的回车符全都变成了 <code>CRLF</code> 而非在类 Unix 操作系统下的 <code>LF</code>，此时肉眼看不出两个文件的差别，<code>diff</code> 却会报错。</p>
<p>如何避免这种情况呢？<code>diff</code> 有一个忽略空白符的选项 <code>diff -w</code>，或者在 Windows 下使用 <code>fc.exe /w</code> 可以忽略空白符。</p>
<p>只需要在上文的对拍程序中稍作修改即可：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">system</span>(<span class="string">&quot;fc.exe /w task.out task.ans&quot;</span>)) <span class="comment">// 或者 system(&quot;diff -w task.out task.ans&quot;)</span></span><br></pre></td></tr></table></figure>
<h4 id="Special-Judge"><a href="#Special-Judge" class="headerlink" title="Special Judge"></a>Special Judge</h4><p><a href="https://oi-wiki.org/tools/special-judge/">spj的写法</a>这里不再赘述。</p>
<p>对拍时也只需要修改一点点，将原本调用 <code>fc</code> 或 <code>diff</code> 改为调用 <code>_spj.exe</code> 即可:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">system</span>(<span class="string">&quot;./_spj.exe task.in task.out task.ans&quot;</span>)) <span class="comment">// 需要保证 `_spj.exe` 与对拍程序处于同一目录下</span></span><br></pre></td></tr></table></figure>
<p><strong>善意的提醒：</strong> 一定要多造一些极端数据！！！</p>
<h3 id="Runtime-Error-的处理"><a href="#Runtime-Error-的处理" class="headerlink" title="Runtime Error 的处理"></a>Runtime Error 的处理</h3><p>程序出现 Runtime Error 时，会返回一个非 $0$ 的返回值。由此我们可以根据程序的返回值来判断是否出现运行错误。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第三个 system 改成这样</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">system</span>(<span class="string">&quot;./task.exe &lt; task.in &gt; task.out&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">// 如果运行到这里，说明返回值非 0，就是运行错误了。</span></span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;Runtime Error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>However，有时数组越界了，可程序却正常运行跑过去了，没有出现 RE 的情况（这是比较玄学的），上面的程序也无法判断。</p>
<p>这时就要请出 C++ 的大杀器 <strong>Address Sanitizer</strong> 了。（其实我第一次听说还是从大毒瘤 JSOI 的在线系统里）</p>
<p>这个东西我也不多介绍了，总之就是能够有效地判断数组越界或者内存访问越界问题。</p>
<p>至于如何开启，就要手动修改编译命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">g++ -O2 -std=c++14 -fsanitize=address -o task.exe task.cpp <span class="comment"># 只是举个例子</span></span><br></pre></td></tr></table></figure>
<p>Dev-Cpp 如何修改编译命令请自行百度。</p>
<p>顺嘴提一句，<strong>检查RE的时候一定要用大数据来测！！！</strong></p>
<h3 id="Time-Limit-Exceeded-的处理"><a href="#Time-Limit-Exceeded-的处理" class="headerlink" title="Time Limit Exceeded 的处理"></a>Time Limit Exceeded 的处理</h3><p>这就涉及到 C++ 的计时模块了。由于我们只是写个对拍，没必要到时间就把程序掐掉，只是计算下程序运行的时间即可。</p>
<p>建议使用 C++11 自带的 <code>std::chrono::steady_clock</code>，需要添加头文件 <code>chrono.h</code>（已包含在万能头中）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono;</span><br><span class="line"><span class="keyword">auto</span> t1 = steady_clock::<span class="built_in">now</span>();</span><br><span class="line"><span class="comment">// do something like `system(&quot;...&quot;)`</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;something&quot;</span>);</span><br><span class="line"><span class="keyword">auto</span> t2 = steady_clock::<span class="built_in">now</span>();</span><br><span class="line"><span class="type">double</span> dif = duration_cast&lt;duration&lt;<span class="type">double</span>&gt;&gt;(t2 - t1).<span class="built_in">count</span>();</span><br><span class="line"><span class="comment">// dif 就是运行的时间，以秒为单位，较为精确</span></span><br><span class="line"><span class="keyword">if</span> (dif &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;Time Limit Exceeded&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>检查TLE的时候也一定要用大数据来测！！！</strong></p>
<h3 id="Memory-Limit-Exceeded-的处理"><a href="#Memory-Limit-Exceeded-的处理" class="headerlink" title="Memory Limit Exceeded 的处理"></a>Memory Limit Exceeded 的处理</h3><h4 id="静态内存空间"><a href="#静态内存空间" class="headerlink" title="静态内存空间"></a>静态内存空间</h4><p>在你的程序代码中，最开头定义一个 <code>bool</code> 变量 <code>m_be</code>，主函数前定义 <code>m_ed</code>，将两者地址做差，就得到了区间内定义的静态变量总大小。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 头文件</span></span><br><span class="line"><span class="type">bool</span> m_be;</span><br><span class="line"><span class="type">int</span> arr[MAXN], brr[MAXN]; <span class="comment">// ...</span></span><br><span class="line"><span class="type">bool</span> m_ed;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cerr &lt;&lt; <span class="built_in">fabs</span>(&amp;m_ed - &amp;m_be) / <span class="number">1024</span> / <span class="number">1024</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// something else</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出的是以MB为单位的静态空间大小。</p>
<p>为什么要使用 <code>fabs</code> 呢？这是因为在不同编译器的不同实现中，有可能会有不同的效果。在我的 macOS 上，使用 clang 编译的就是 <code>&amp;m_be &lt; &amp;m_ed</code>，g++ 则是 <code>&amp;m_ed &lt; &amp;m_be</code>，但是绝对值相同。</p>
<p>至于动态空间大小，我想应该没有人会无聊到在OI中开一大堆 <code>vector</code> 之类的东西吧。。。好像暂时也没看到什么比较好的方法测动态内存，就跳过了。</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>贴一下最终的对拍程序代码吧（Linux / macOS版）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1000</span>;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;g++ -std=c++14 -O2 -o _generator.exe _generator.cpp&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;g++ -std=c++14 -O2 -o _brute_.exe _brute_.cpp&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;g++ -std=c++14 -O2 -fsanitize=address -o task.exe task.cpp&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> cas = <span class="number">1</span>; cas &lt;= tot; ++cas) &#123;</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;./_generator.exe &gt; task.in&quot;</span>);</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;./_brute.exe &lt; task.in &gt; task.ans&quot;</span>);</span><br><span class="line">        <span class="keyword">auto</span> t1 = steady_clock::<span class="built_in">now</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">system</span>(<span class="string">&quot;./task.exe &lt; task.in &gt; task.out&quot;</span>)) &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;Runtime Error&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> t2 = steady_clock::<span class="built_in">now</span>();</span><br><span class="line">        <span class="type">double</span> dif = duration_cast&lt;duration&lt;<span class="type">double</span>&gt;&gt;(t2 - t1).<span class="built_in">count</span>();</span><br><span class="line">        <span class="keyword">if</span> (dif &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;Time Limit Exceeded&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">system</span>(<span class="string">&quot;diff -w task.out task.ans&quot;</span>)) &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;Wrong Answer&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;Test &quot;</span> &lt;&lt; cas &lt;&lt; <span class="string">&quot; Passed&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Accepted&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>P4719 【模版】动态DP&amp;动态树分治</title>
    <url>/2022/02/08/sol-p4719/</url>
    <content><![CDATA[<h2 id="P4719-【模版】动态DP-amp-动态树分治"><a href="#P4719-【模版】动态DP-amp-动态树分治" class="headerlink" title="P4719 【模版】动态DP&amp;动态树分治"></a>P4719 【模版】动态DP&amp;动态树分治</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4719">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>此处记录一下树剖的写法。</p>
<p>首先有简单的$dp$方程如下：</p>
<script type="math/tex; mode=display">
\begin{cases}
dp_{u,0}=\sum \max(dp_{v,0},dp_{v,1}) \\
dp_{u,1}=a_u + \sum dp_{v,0}
\end{cases}</script><p>考虑运用树剖，每次将轻儿子的答案暴力贡献到父亲上面，父亲节点只需要加上重儿子的贡献。</p>
<p>考虑使用矩阵，有这样的转移矩阵：</p>
<script type="math/tex; mode=display">
\begin{pmatrix}
dp_{v,0} & dp_{v,1}
\end{pmatrix}
\times
\begin{pmatrix}
g_{u,0} & g_{u,1} \\
g_{u,0} & -\infty
\end{pmatrix}
=
\begin{pmatrix}
dp_{u,0} & dp_{u,1}
\end{pmatrix}</script><p>其中$v$是$u$的重儿子，$g<em>{u,0}$表示轻儿子中不取$u$可以得到的最大贡献，$g</em>{u,1}$表示轻儿子中取$u$可以得到的最大贡献（包括$a_u$）。线段树维护矩阵，修改时暴力跳轻链并修改轻链的父亲，时间复杂度为$O(n\log^2 n)$，看下代码自己敲一下就很容易理解了。</p>
<p>听说拿LCT写可以做到$O(n\log n)$而且跑的飞快？改天有空试试。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4719.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4719</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">Matrix</span>() &#123; <span class="built_in">memset</span>(a, <span class="number">-0x3f</span>, <span class="built_in">sizeof</span>(a)); &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>*(<span class="type">const</span> Matrix&amp; o) <span class="type">const</span> &#123;</span><br><span class="line">        Matrix ret;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; ++k)</span><br><span class="line">                    ret.a[i][j] = <span class="built_in">max</span>(ret.a[i][j], a[i][k] + o.a[k][j]);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; mat[MAXN];</span><br><span class="line"><span class="type">int</span> n, q, a[MAXN];</span><br><span class="line"><span class="type">int</span> f[MAXN][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> fa[MAXN], siz[MAXN], wson[MAXN];</span><br><span class="line"><span class="type">int</span> dfn[MAXN], sfa[MAXN], dwn[MAXN], id[MAXN], dfc;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[MAXN];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> li (i &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ri (i &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson li, l, mid</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson ri, mid + 1, r</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">    Matrix nd[MAXN * <span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">void</span>(nd[i] = mat[id[l]]);</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(lson), <span class="built_in">build</span>(rson);</span><br><span class="line">        nd[i] = nd[ri] * nd[li];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">void</span>(nd[i] = mat[id[l]]);</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (q &lt;= mid)</span><br><span class="line">            <span class="built_in">update</span>(lson, q);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">update</span>(rson, q);</span><br><span class="line">        nd[i] = nd[ri] * nd[li];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Matrix <span class="title">query</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">            <span class="keyword">return</span> nd[i];</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(lson, ql, qr);</span><br><span class="line">        <span class="keyword">if</span> (ql &gt; mid)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(rson, ql, qr);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(rson, ql, qr) * <span class="built_in">query</span>(lson, ql, qr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sgt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    fa[u] = f, siz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == f)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(v, u);</span><br><span class="line">        siz[u] += siz[v];</span><br><span class="line">        <span class="keyword">if</span> (siz[wson[u]] &lt; siz[v])</span><br><span class="line">            wson[u] = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> sf)</span> </span>&#123;</span><br><span class="line">    dfn[u] = ++dfc, id[dfc] = u;</span><br><span class="line">    sfa[u] = sf, dwn[u] = u;</span><br><span class="line">    f[u][<span class="number">0</span>] = <span class="number">0</span>, f[u][<span class="number">1</span>] = a[u];</span><br><span class="line">    mat[u].a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    mat[u].a[<span class="number">0</span>][<span class="number">1</span>] = a[u];</span><br><span class="line">    mat[u].a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (wson[u]) &#123;</span><br><span class="line">        <span class="built_in">dfs2</span>(wson[u], sf);</span><br><span class="line">        dwn[u] = dwn[wson[u]];</span><br><span class="line">        f[u][<span class="number">0</span>] += <span class="built_in">max</span>(f[wson[u]][<span class="number">0</span>], f[wson[u]][<span class="number">1</span>]);</span><br><span class="line">        f[u][<span class="number">1</span>] += f[wson[u]][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u] || v == wson[u])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v, v);</span><br><span class="line">        f[u][<span class="number">0</span>] += <span class="built_in">max</span>(f[v][<span class="number">0</span>], f[v][<span class="number">1</span>]);</span><br><span class="line">        f[u][<span class="number">1</span>] += f[v][<span class="number">0</span>];</span><br><span class="line">        mat[u].a[<span class="number">0</span>][<span class="number">0</span>] += <span class="built_in">max</span>(f[v][<span class="number">0</span>], f[v][<span class="number">1</span>]);</span><br><span class="line">        mat[u].a[<span class="number">1</span>][<span class="number">0</span>] += <span class="built_in">max</span>(f[v][<span class="number">0</span>], f[v][<span class="number">1</span>]);</span><br><span class="line">        mat[u].a[<span class="number">0</span>][<span class="number">1</span>] += f[v][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    mat[u].a[<span class="number">0</span>][<span class="number">1</span>] += k - a[u], a[u] = k;</span><br><span class="line">    <span class="keyword">while</span> (u) &#123;</span><br><span class="line">        Matrix t1 = sgt.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, dfn[sfa[u]], dfn[dwn[u]]);</span><br><span class="line">        sgt.<span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, n, dfn[u]);</span><br><span class="line">        Matrix t2 = sgt.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, dfn[sfa[u]], dfn[dwn[u]]);</span><br><span class="line">        u = fa[sfa[u]];</span><br><span class="line">        mat[u].a[<span class="number">0</span>][<span class="number">0</span>] += <span class="built_in">max</span>(t2.a[<span class="number">0</span>][<span class="number">0</span>], t2.a[<span class="number">0</span>][<span class="number">1</span>]) - <span class="built_in">max</span>(t1.a[<span class="number">0</span>][<span class="number">0</span>], t1.a[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">        mat[u].a[<span class="number">1</span>][<span class="number">0</span>] += <span class="built_in">max</span>(t2.a[<span class="number">0</span>][<span class="number">0</span>], t2.a[<span class="number">0</span>][<span class="number">1</span>]) - <span class="built_in">max</span>(t1.a[<span class="number">0</span>][<span class="number">0</span>], t1.a[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">        mat[u].a[<span class="number">0</span>][<span class="number">1</span>] += t2.a[<span class="number">0</span>][<span class="number">0</span>] - t1.a[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    Matrix t = sgt.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, dfn[sfa[u]], dfn[dwn[u]]);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(t.a[<span class="number">0</span>][<span class="number">0</span>], t.a[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v);</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>), <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    sgt.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">int</span> u, k;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(k);</span><br><span class="line">        <span class="built_in">update</span>(u, k);</span><br><span class="line">        <span class="built_in">write</span>(<span class="built_in">query</span>(<span class="number">1</span>)), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P3203 [HNOI2010] 弹飞绵羊</title>
    <url>/2022/02/07/sol-p3203/</url>
    <content><![CDATA[<h2 id="P3203-HNOI2010-弹飞绵羊"><a href="#P3203-HNOI2010-弹飞绵羊" class="headerlink" title="P3203 [HNOI2010] 弹飞绵羊"></a>P3203 [HNOI2010] 弹飞绵羊</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P3203">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>好家伙，全都往后弹不就形成了一棵树的结构，然后要求动态维护，那就LCT呗，然后维护动态$dep$数组就可。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P3203.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P3203</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LCT</span> &#123;</span><br><span class="line">    <span class="type">int</span> fa[MAXN], ch[MAXN][<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> val[MAXN], siz[MAXN], tag[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; siz[x] = siz[ch[x][<span class="number">0</span>]] + siz[ch[x][<span class="number">1</span>]] + <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> f, <span class="type">int</span> w)</span> </span>&#123; fa[x] = f, (~w) &amp;&amp; (ch[f][w] = x); &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ch[fa[x]][<span class="number">0</span>] == x)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ch[fa[x]][<span class="number">1</span>] == x)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tag[x]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(ch[x][<span class="number">0</span>], ch[x][<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (ch[x][<span class="number">0</span>])</span><br><span class="line">                tag[ch[x][<span class="number">0</span>]] ^= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (ch[x][<span class="number">1</span>])</span><br><span class="line">                tag[ch[x][<span class="number">1</span>]] ^= <span class="number">1</span>;</span><br><span class="line">            tag[x] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushall</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (~<span class="built_in">get</span>(x))</span><br><span class="line">            <span class="built_in">pushall</span>(fa[x]);</span><br><span class="line">        <span class="built_in">pushdown</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> y = fa[x], z = fa[y], w = <span class="built_in">get</span>(x);</span><br><span class="line">        <span class="keyword">if</span> (~w)</span><br><span class="line">            <span class="built_in">connect</span>(ch[x][w ^ <span class="number">1</span>], y, w);</span><br><span class="line">        <span class="built_in">connect</span>(x, z, <span class="built_in">get</span>(y));</span><br><span class="line">        <span class="built_in">connect</span>(y, x, w ^ <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">pushup</span>(y);</span><br><span class="line">        <span class="built_in">pushup</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">pushall</span>(x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> f = fa[x]; f = fa[x], ~<span class="built_in">get</span>(x); <span class="built_in">rotate</span>(x))</span><br><span class="line">            <span class="keyword">if</span> (~<span class="built_in">get</span>(f))</span><br><span class="line">                <span class="built_in">rotate</span>(<span class="built_in">get</span>(f) == <span class="built_in">get</span>(x) ? f : x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">access</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> pre = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x) &#123;</span><br><span class="line">            <span class="built_in">splay</span>(x);</span><br><span class="line">            ch[x][<span class="number">1</span>] = pre;</span><br><span class="line">            <span class="built_in">pushup</span>(x);</span><br><span class="line">            pre = x;</span><br><span class="line">            x = fa[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeroot</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">access</span>(x);</span><br><span class="line">        <span class="built_in">splay</span>(x);</span><br><span class="line">        tag[x] ^= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">makeroot</span>(x);</span><br><span class="line">        <span class="built_in">access</span>(y);</span><br><span class="line">        <span class="built_in">splay</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findroot</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">access</span>(x);</span><br><span class="line">        <span class="built_in">splay</span>(x);</span><br><span class="line">        <span class="keyword">while</span> (ch[x][<span class="number">0</span>])</span><br><span class="line">            <span class="built_in">pushdown</span>(x), x = ch[x][<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">splay</span>(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">link</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">makeroot</span>(x);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">findroot</span>(y) == x)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        fa[x] = y;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">cut</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">findroot</span>(x) != <span class="built_in">findroot</span>(y))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">split</span>(x, y);</span><br><span class="line">        <span class="keyword">if</span> (fa[x] != y || ch[x][<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        fa[x] = ch[y][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; lct;</span><br><span class="line"><span class="type">int</span> n, q, a[MAXN];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(a[i]), lct.siz[i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        lct.<span class="built_in">link</span>(i, <span class="built_in">min</span>(n + <span class="number">1</span>, i + a[i]));</span><br><span class="line">    <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">int</span> op, x, y;</span><br><span class="line">        <span class="built_in">read</span>(op), <span class="built_in">read</span>(x)++;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            lct.<span class="built_in">split</span>(x, n + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">write</span>(lct.siz[n + <span class="number">1</span>] - <span class="number">1</span>), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">read</span>(y);</span><br><span class="line">            lct.<span class="built_in">cut</span>(x, <span class="built_in">min</span>(n + <span class="number">1</span>, x + a[x]));</span><br><span class="line">            a[x] = y;</span><br><span class="line">            lct.<span class="built_in">link</span>(x, <span class="built_in">min</span>(n + <span class="number">1</span>, x + a[x]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>nnd现在数组越界全部都叫WA了是吧。。。</p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>NFLSOJ-423B</title>
    <url>/2022/02/06/sol-nflsoj423b/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="930e3b53c868cf6b09be156623ee4c983e18a66529bc92af680a4975a9803b8f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
        <tag>school</tag>
      </tags>
  </entry>
  <entry>
    <title>CF986E Prince&#39;s Problem</title>
    <url>/2022/02/06/sol-cf986e/</url>
    <content><![CDATA[<h2 id="CF986E-Prince’s-Problem"><a href="#CF986E-Prince’s-Problem" class="headerlink" title="CF986E Prince’s Problem"></a>CF986E Prince’s Problem</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/CF986E">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>我为何竟第一时间想到树剖？</p>
<p>数据结构题做多了属于是。其实根本没有修改操作要个P的树剖，树上差分不就行了。套路地将$(x,y)$拆分成$\frac{ans(x)\times ans(y)}{ans(lca(x,y))\times ans(fa[lca(x,y)])}$，然后发现可以离线下来一边$dfs$一边搞。</p>
<p>具体地，由于$10^7$以内的质数只有不到$7\times 10^5$个，所以在$dfs$时记录数组$num[p][k]$表示根到当前节点$u$的路径上包含质因子$p$的次数为$k$的节点个数。然后处理询问，显然可以做到在$O(n\log^2n+\omega)$的时间复杂度内完成。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           CF986E.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/CF986E</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXP = <span class="number">7e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXL = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LOGN = <span class="number">17</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LOGL = <span class="number">24</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">bool</span> m_be;</span><br><span class="line"><span class="type">int</span> n, q, cnt, a[MAXN], ans[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> p = MOD)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x % p)</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            ret = ret * x % p;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getinv</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> p = MOD)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">qpow</span>(x, p - <span class="number">2</span>, p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cntp, pri[MAXP], fac[MAXL];</span><br><span class="line">bitset&lt;MAXL&gt; mark;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getprime</span><span class="params">(<span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">    mark = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= mx; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mark[i])</span><br><span class="line">            pri[++cntp] = i, fac[i] = cntp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cntp; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * pri[j] &gt; mx)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            mark[i * pri[j]] = <span class="literal">true</span>;</span><br><span class="line">            fac[i * pri[j]] = j;</span><br><span class="line">            <span class="keyword">if</span> (i % pri[j] == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; <span class="built_in">getfactors</span>(<span class="type">int</span> x) &#123;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; result;</span><br><span class="line">    <span class="keyword">while</span> (x &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> p = fac[x], c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x % pri[p] == <span class="number">0</span>)</span><br><span class="line">            x /= pri[p], ++c;</span><br><span class="line">        result.<span class="built_in">push_back</span>(&#123;p, c&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dfc, dfn[MAXN], dep[MAXN], fa[MAXN][LOGN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    dfn[u] = ++dfc;</span><br><span class="line">    fa[u][<span class="number">0</span>] = f, dep[u] = dep[f] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; LOGN; ++i)</span><br><span class="line">        fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == f)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">build</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v])</span><br><span class="line">        <span class="built_in">swap</span>(u, v);</span><br><span class="line">    <span class="type">int</span> t = dep[u] - dep[v];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = LOGN - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> ((t &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">            u = fa[u][i];</span><br><span class="line">    <span class="keyword">if</span> (u == v)</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = LOGN - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> (fa[u][i] != fa[v][i])</span><br><span class="line">            u = fa[u][i], v = fa[v][i];</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Query</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, w, i, k;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Query&amp; o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dfn[x] &lt; dfn[o.x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; query[MAXN * <span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> num[MAXP][LOGL];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span>&amp; cur)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> t : <span class="built_in">getfactors</span>(a[u]))</span><br><span class="line">        ++num[t.first][t.second];</span><br><span class="line">    <span class="keyword">while</span> (cur &lt;= cnt &amp;&amp; dfn[query[cur].x] &lt; dfn[u])</span><br><span class="line">        ++cur;</span><br><span class="line">    <span class="keyword">while</span> (cur &lt;= cnt &amp;&amp; query[cur].x == u) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> t : <span class="built_in">getfactors</span>(query[cur].w)) &#123;</span><br><span class="line">            <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; t.second; ++i)</span><br><span class="line">                sum += num[t.first][i] * i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = t.second; i &lt; LOGL; ++i)</span><br><span class="line">                sum += num[t.first][i] * t.second;</span><br><span class="line">            <span class="keyword">if</span> (query[cur].k == <span class="number">1</span>)</span><br><span class="line">                (ans[query[cur].i] *= <span class="built_in">qpow</span>(pri[t.first], sum)) %= MOD;</span><br><span class="line">            <span class="keyword">if</span> (query[cur].k == <span class="number">-1</span>)</span><br><span class="line">                (ans[query[cur].i] *= <span class="built_in">getinv</span>(<span class="built_in">qpow</span>(pri[t.first], sum))) %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        ++cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u][<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, cur);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> t : <span class="built_in">getfactors</span>(a[u]))</span><br><span class="line">        --num[t.first][t.second];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> m_ed;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">debug</span>(<span class="string">&quot;Memory used: %.5lfMB.&quot;</span>, (&amp;m_ed - &amp;m_be) / <span class="number">1024.0</span> / <span class="number">1024.0</span>);</span><br><span class="line">    <span class="built_in">getprime</span>(<span class="number">1e7</span>);</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v);</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> x, y, w;</span><br><span class="line">        <span class="built_in">read</span>(x), <span class="built_in">read</span>(y), <span class="built_in">read</span>(w);</span><br><span class="line">        <span class="type">int</span> p = <span class="built_in">lca</span>(x, y);</span><br><span class="line">        query[++cnt] = &#123;x, w, i, <span class="number">1</span>&#125;;</span><br><span class="line">        query[++cnt] = &#123;y, w, i, <span class="number">1</span>&#125;;</span><br><span class="line">        query[++cnt] = &#123;p, w, i, <span class="number">-1</span>&#125;;</span><br><span class="line">        query[++cnt] = &#123;fa[p][<span class="number">0</span>], w, i, <span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(query + <span class="number">1</span>, query + cnt + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">fill</span>(ans + <span class="number">1</span>, ans + q + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, *<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; ++i)</span><br><span class="line">        <span class="built_in">write</span>(ans[i]), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P6095 [JSOI2015] 串分割</title>
    <url>/2022/02/05/sol-p6095/</url>
    <content><![CDATA[<h2 id="P6095-JSOI2015-串分割"><a href="#P6095-JSOI2015-串分割" class="headerlink" title="P6095 [JSOI2015] 串分割"></a>P6095 [JSOI2015] 串分割</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P6095">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>显然分割的串长度不是$\lceil \frac{n}{k} \rceil$就是$\lfloor \frac{n}{k} \rfloor$。</p>
<p>不妨先破环为链，建立后缀数组并二分最大值后缀的排名$mx$，判断是否能将$n$个数划分成$k$段使得每段都$\le mx$。</p>
<p>首先枚举起始位置，设$len=\lceil \frac{n}{k} \rceil$，则一共最多有$len$个起始位置，然后每次贪心地划分，假设当前从$cur$位置开始划分，如果$s[cur…cur+len-1]\le mx$则划分$len$个，否则划分$len-1$个。重复$k$次看划分的总长度是否$\ge n$。判断的时间复杂度为$O(len \times \frac{n}{len})=O(n)$。</p>
<p>思考这种贪心的正确性。如果前一次划分$len$个，后一次由于$\gt mx$导致只划分了$len-1$个，总共就划分了$2\times len-1$个，容易发现这样和先划分$len-1$个再划分$len$个是一样的，所以正确性显然。故此问题能够在$O(n\log n)$的时间复杂度内解决。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P6095.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P6095</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">6e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LOGN = <span class="number">19</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SuffixArray</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, sa[MAXN], rk[MAXN], tp[MAXN], he[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">radix_sort</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> buc[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            buc[rk[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] += buc[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">            sa[buc[rk[tp[i]]]--] = tp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="type">int</span> m = <span class="number">200</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            rk[i] = s[i] + <span class="number">1</span>, tp[i] = i;</span><br><span class="line">        <span class="built_in">radix_sort</span>(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">1</span>, p = <span class="number">0</span>; p &lt; n; m = p, w &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= w; ++i)</span><br><span class="line">                tp[++p] = n - w + i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">if</span> (sa[i] &gt; w)</span><br><span class="line">                    tp[++p] = sa[i] - w;</span><br><span class="line">            <span class="built_in">radix_sort</span>(m);</span><br><span class="line">            <span class="built_in">copy</span>(rk + <span class="number">1</span>, rk + n + <span class="number">1</span>, tp + <span class="number">1</span>);</span><br><span class="line">            rk[sa[<span class="number">1</span>]] = p = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tp[sa[i - <span class="number">1</span>]] == tp[sa[i]] &amp;&amp; tp[sa[i - <span class="number">1</span>] + w] == tp[sa[i] + w])</span><br><span class="line">                    rk[sa[i]] = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    rk[sa[i]] = ++p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k)</span><br><span class="line">                k--;</span><br><span class="line">            <span class="keyword">while</span> (s[i + k] == s[sa[rk[i] - <span class="number">1</span>] + k])</span><br><span class="line">                k++;</span><br><span class="line">            he[rk[i]] = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sa;</span><br><span class="line"><span class="type">int</span> n, k, ln;</span><br><span class="line"><span class="type">int</span> lg2[MAXN], st[MAXN][LOGN];</span><br><span class="line"><span class="type">char</span> str[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getlcp</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; r)</span><br><span class="line">        <span class="built_in">swap</span>(l, r);</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="type">int</span> k = lg2[r - l];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(st[l + <span class="number">1</span>][k], st[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">comp_lesseq</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> lcp = <span class="built_in">getlcp</span>(x, y);</span><br><span class="line">    <span class="keyword">if</span> (lcp &gt;= len)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> str[sa.sa[x] + lcp] &lt;= str[sa.sa[y] + lcp];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> st = <span class="number">1</span>; st &lt;= ln; ++st) &#123;</span><br><span class="line">        <span class="type">int</span> cur = st;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">comp_lesseq</span>(sa.rk[cur], mx, ln))</span><br><span class="line">                cur += ln;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cur += ln - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cur &gt;= st + n)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(k);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">copy</span>(str + <span class="number">1</span>, str + n + <span class="number">1</span>, str + n + <span class="number">1</span>);</span><br><span class="line">    sa.<span class="built_in">init</span>(n + n, str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n + n; ++i)</span><br><span class="line">        lg2[i] = (i &amp; (i - <span class="number">1</span>)) ? lg2[i - <span class="number">1</span>] : lg2[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n + n; ++i)</span><br><span class="line">        st[i][<span class="number">0</span>] = sa.he[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; LOGN; ++j)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n + n; ++i)</span><br><span class="line">            st[i][j] = <span class="built_in">min</span>(st[i][j - <span class="number">1</span>], st[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">    ln = (n - <span class="number">1</span>) / k + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = n + n, ans = r;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid))</span><br><span class="line">            r = mid - <span class="number">1</span>, ans = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ln; ++i)</span><br><span class="line">        <span class="built_in">putchar</span>(str[sa.sa[ans] + i]);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4770 [NOI2018] 你的名字</title>
    <url>/2022/02/05/sol-p4770/</url>
    <content><![CDATA[<h2 id="P4770-NOI2018-你的名字"><a href="#P4770-NOI2018-你的名字" class="headerlink" title="P4770 [NOI2018] 你的名字"></a>P4770 [NOI2018] 你的名字</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4770">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>容易想到离线后用后缀数组解决。<del>（咱就是说能用SA的就不用SAM）</del></p>
<p>之后对于每个询问串，枚举其每个后缀$i$，注意到可以二分一个最大的出现过的子串$lcp$长度$len$，在SA上二分出左右端点，然后在主席树上判断区间$[l,r-len+1]$中是否存在$lcp\ge len$的数就好。这样时间复杂度是$O(n\log^2n)$的。但是$10^6$的数据肯定不能通过。</p>
<p>那么，既然是二分+主席树，能否在主席树上二分呢？事实上是可以的。所以复杂度瞬间降下一个$\log n$，同时写起来更加麻烦了。然而这种方法过于复杂了，我也没有完全看懂。有没有更加通俗易懂的单$\log$写法呢？</p>
<p>答案是有的。按顺序枚举每个后缀。如果$i$位置的长度为$len$，那么$i+1$位置的长度最小为$len-1$，原理和后缀$height$数组相同。这样暴力若干次$+1$并用主席树判断，一波势能分析下来就是$O(n\log n)$的。尽管如此但常数巨大，所以能看懂主席树二分的就尽量写主席树二分吧。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4770.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4770</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LOGN = <span class="number">21</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SuffixArray</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, sa[MAXN], rk[MAXN], tp[MAXN], he[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">radix_sort</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> buc[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            buc[rk[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] += buc[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">            sa[buc[rk[tp[i]]]--] = tp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="type">int</span> m = <span class="number">200</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            rk[i] = s[i] + <span class="number">1</span>, tp[i] = i;</span><br><span class="line">        <span class="built_in">radix_sort</span>(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">1</span>, p = <span class="number">0</span>; p &lt; n; m = p, w &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= w; ++i)</span><br><span class="line">                tp[++p] = n - w + i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">if</span> (sa[i] &gt; w)</span><br><span class="line">                    tp[++p] = sa[i] - w;</span><br><span class="line">            <span class="built_in">radix_sort</span>(m);</span><br><span class="line">            <span class="built_in">copy</span>(rk + <span class="number">1</span>, rk + n + <span class="number">1</span>, tp + <span class="number">1</span>);</span><br><span class="line">            rk[sa[<span class="number">1</span>]] = p = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tp[sa[i - <span class="number">1</span>]] == tp[sa[i]] &amp;&amp; tp[sa[i - <span class="number">1</span>] + w] == tp[sa[i] + w])</span><br><span class="line">                    rk[sa[i]] = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    rk[sa[i]] = ++p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k)</span><br><span class="line">                k--;</span><br><span class="line">            <span class="keyword">while</span> (s[i + k] == s[sa[rk[i] - <span class="number">1</span>] + k])</span><br><span class="line">                k++;</span><br><span class="line">            he[rk[i]] = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sa;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> sum, ls, rs;</span><br><span class="line">    &#125; nd[MAXN * <span class="number">25</span>];</span><br><span class="line">    <span class="type">int</span> tot, rt[MAXN];</span><br><span class="line">    <span class="type">int</span> &amp;<span class="keyword">operator</span>[](<span class="type">int</span> i) &#123; <span class="keyword">return</span> rt[i]; &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newnode</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123; <span class="keyword">return</span> nd[++tot] = nd[i], tot; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> &amp;i, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> q, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        i = <span class="built_in">newnode</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">void</span>(nd[i].sum += v);</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (q &lt;= mid)</span><br><span class="line">            <span class="built_in">update</span>(nd[i].ls, l, mid, q, v);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">update</span>(nd[i].rs, mid + <span class="number">1</span>, r, q, v);</span><br><span class="line">        nd[i].sum = nd[nd[i].ls].sum + nd[nd[i].rs].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">            <span class="keyword">return</span> nd[v].sum - nd[u].sum;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid)</span><br><span class="line">            ret += <span class="built_in">query</span>(nd[u].ls, nd[v].ls, l, mid, ql, qr);</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid)</span><br><span class="line">            ret += <span class="built_in">query</span>(nd[u].rs, nd[v].rs, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sgt;</span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line"><span class="type">int</span> typ[MAXN], pre[MAXN], nxt[MAXN], lst[MAXN];</span><br><span class="line"><span class="type">int</span> lg2[MAXN], st[MAXN][LOGN];</span><br><span class="line"><span class="type">int</span> ps[MAXN], ln[MAXN], ls[MAXN], rs[MAXN];</span><br><span class="line"><span class="type">char</span> s[MAXN], buf[MAXN], str[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getlcp</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="type">int</span> k = lg2[r - l];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(st[l + <span class="number">1</span>][k], st[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> lt, <span class="type">int</span> rt, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r, cl, cr;</span><br><span class="line">    l = <span class="number">1</span>, r = p, cl = p;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">getlcp</span>(mid, p) &gt;= len)</span><br><span class="line">            r = mid - <span class="number">1</span>, cl = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    l = p, r = m;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">getlcp</span>(p, mid) &gt;= len)</span><br><span class="line">            l = mid + <span class="number">1</span>, cr = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sgt.<span class="built_in">query</span>(sgt[lt - <span class="number">1</span>], sgt[rt - len + <span class="number">1</span>], <span class="number">1</span>, m, cl, cr) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">read</span>(q);</span><br><span class="line">    m = n + <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">copy</span>(s + <span class="number">1</span>, s + n + <span class="number">1</span>, str + <span class="number">1</span>);</span><br><span class="line">    str[n + <span class="number">1</span>] = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">        <span class="built_in">read</span>(ls[i]), <span class="built_in">read</span>(rs[i]);</span><br><span class="line">        ln[i] = <span class="built_in">strlen</span>(buf);</span><br><span class="line">        <span class="built_in">copy</span>(buf, buf + ln[i], str + m);</span><br><span class="line">        str[m + ln[i]] = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">        <span class="built_in">fill</span>(typ + m, typ + m + ln[i], i);</span><br><span class="line">        ps[i] = m, m += ln[i] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sa.<span class="built_in">init</span>(m, str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        sgt.<span class="built_in">update</span>(sgt[i] = sgt[i - <span class="number">1</span>], <span class="number">1</span>, m, sa.rk[i], <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= m; ++i)</span><br><span class="line">        lg2[i] = lg2[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        st[i][<span class="number">0</span>] = sa.he[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; LOGN; ++j)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= m; ++i)</span><br><span class="line">            st[i][j] = <span class="built_in">min</span>(st[i][j - <span class="number">1</span>], st[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        pre[i] = lst[typ[sa.sa[i]]];</span><br><span class="line">        nxt[lst[typ[sa.sa[i]]]] = i;</span><br><span class="line">        lst[typ[sa.sa[i]]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> tt = <span class="number">1</span>; tt &lt;= q; ++tt) &#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= ln[tt]; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> len = <span class="built_in">min</span>(rs[tt] - ls[tt] + <span class="number">1</span>, ps[tt] + ln[tt] - i);</span><br><span class="line">            <span class="type">int</span> p = sa.rk[i + ps[tt] - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (k)</span><br><span class="line">                k--;</span><br><span class="line">            <span class="keyword">while</span> (k &lt; len &amp;&amp; <span class="built_in">check</span>(p, ls[tt], rs[tt], k + <span class="number">1</span>))</span><br><span class="line">                k++;</span><br><span class="line">            ans += ln[tt] - i + <span class="number">1</span> - <span class="built_in">max</span>(k, <span class="built_in">getlcp</span>(pre[p], p));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P3900 [湖南集训] 图森</title>
    <url>/2022/02/05/sol-p3900/</url>
    <content><![CDATA[<h2 id="P3900-湖南集训-图森"><a href="#P3900-湖南集训-图森" class="headerlink" title="P3900 [湖南集训] 图森"></a>P3900 [湖南集训] 图森</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P3900">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>代码极其恶心，所以简单写下思路。</p>
<p>基本思路是$dp$和建图。首先将所有串正向和反向串起来，这样$dp[i]$就表示当前回文串的其中一边拓展到了端点，另一边拓展到$i$的位置。往后转移只要枚举在其中一边加上哪个小串，用后缀数组$O(1)$找到能拓展几位。将这个$dp$的转移建图，如果不是DAG则显然有无限长度，输出<code>Infinity</code>。否则在上面做DAG最长路即可。时间复杂度$O(n^2L)$。</p>
<p>接下来是特殊处理。首先是初始状态，需要找出每个小串的前缀回文串和后缀回文串。这个用SA似乎可以暴力做。其次是图的边集$E$的大小，应当于时间复杂度同阶，显然不可能存下来，所以需要在每次做DAG时求一边边集，这样就保证空间复杂度不会太高。</p>
<p>除此之外，你还需要计算每个小串中包含的最长回文串。。。不然只有$90pts$（别问我怎么知道的）。所以再写个manacher吧。</p>
<p>下面放出我<del>shit一样</del>的代码</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P3900.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P3900</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">120</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LOGM = <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SuffixArray</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, sa[MAXM], rk[MAXM], tp[MAXM], he[MAXM];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">radix_sort</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> buc[MAXM];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            buc[rk[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] += buc[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">            sa[buc[rk[tp[i]]]--] = tp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="type">int</span> m = <span class="number">200</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            rk[i] = s[i] + <span class="number">1</span>, tp[i] = i;</span><br><span class="line">        <span class="built_in">radix_sort</span>(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">1</span>, p = <span class="number">0</span>; p &lt; n; m = p, w &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= w; ++i)</span><br><span class="line">                tp[++p] = n - w + i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">if</span> (sa[i] &gt; w)</span><br><span class="line">                    tp[++p] = sa[i] - w;</span><br><span class="line">            <span class="built_in">radix_sort</span>(m);</span><br><span class="line">            <span class="built_in">copy</span>(rk + <span class="number">1</span>, rk + n + <span class="number">1</span>, tp + <span class="number">1</span>);</span><br><span class="line">            rk[sa[<span class="number">1</span>]] = p = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tp[sa[i - <span class="number">1</span>]] == tp[sa[i]] &amp;&amp; tp[sa[i - <span class="number">1</span>] + w] == tp[sa[i] + w])</span><br><span class="line">                    rk[sa[i]] = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    rk[sa[i]] = ++p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k)</span><br><span class="line">                k--;</span><br><span class="line">            <span class="keyword">while</span> (s[i + k] == s[sa[rk[i] - <span class="number">1</span>] + k])</span><br><span class="line">                k++;</span><br><span class="line">            he[rk[i]] = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sa;</span><br><span class="line"><span class="type">int</span> n, m, tot, cnt, ans;</span><br><span class="line"><span class="type">int</span> fr[MAXN], bk[MAXN], ln[MAXN];</span><br><span class="line"><span class="type">int</span> lg2[MAXM], st[MAXM][LOGM];</span><br><span class="line"><span class="type">int</span> id[MAXM], dis[MAXM], deg[MAXM];</span><br><span class="line"><span class="type">char</span> buf[MAXM], str[MAXM];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; palfr[MAXN], palbk[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getlcp</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> l = sa.rk[x], r = sa.rk[y];</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">        <span class="built_in">swap</span>(l, r);</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="type">int</span> k = lg2[r - l];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(st[l + <span class="number">1</span>][k], st[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">findedges</span><span class="params">(<span class="type">int</span> i, function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; addedge)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> l : palfr[j])</span><br><span class="line">                <span class="built_in">addedge</span>(i, fr[j] + l, l);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> l : palbk[j])</span><br><span class="line">                <span class="built_in">addedge</span>(i, bk[j] + l, l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; m || str[i] == <span class="string">&#x27;$&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> t = <span class="built_in">upper_bound</span>(fr + <span class="number">1</span>, fr + n + <span class="number">1</span>, i) - fr - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; bk[t]) &#123;</span><br><span class="line">        <span class="type">int</span> len = ln[t] - (i - fr[t]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="type">int</span> lcp = <span class="built_in">min</span>(&#123;len, ln[j], <span class="built_in">getlcp</span>(i, bk[j])&#125;);</span><br><span class="line">            <span class="keyword">if</span> (lcp == len &amp;&amp; lcp == ln[j]) &#123;</span><br><span class="line">                <span class="built_in">addedge</span>(i, <span class="number">0</span>, lcp * <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lcp == len) &#123;</span><br><span class="line">                <span class="built_in">addedge</span>(i, bk[j] + lcp, lcp * <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lcp == ln[j]) &#123;</span><br><span class="line">                <span class="built_in">addedge</span>(i, i + lcp, lcp * <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">addedge</span>(i, m + <span class="number">1</span>, lcp * <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> len = ln[t] - (i - bk[t]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="type">int</span> lcp = <span class="built_in">min</span>(&#123;len, ln[j], <span class="built_in">getlcp</span>(i, fr[j])&#125;);</span><br><span class="line">            <span class="keyword">if</span> (lcp == len &amp;&amp; lcp == ln[j]) &#123;</span><br><span class="line">                <span class="built_in">addedge</span>(i, <span class="number">0</span>, lcp * <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lcp == len) &#123;</span><br><span class="line">                <span class="built_in">addedge</span>(i, fr[j] + lcp, lcp * <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lcp == ln[j]) &#123;</span><br><span class="line">                <span class="built_in">addedge</span>(i, i + lcp, lcp * <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">addedge</span>(i, m + <span class="number">1</span>, lcp * <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">manacher</span><span class="params">(<span class="type">char</span>* s, <span class="type">int</span> tlen)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> d[MAXM];</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> t[MAXM];</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tlen; ++i)</span><br><span class="line">        t[++len] = <span class="string">&#x27;#&#x27;</span>, t[++len] = s[i];</span><br><span class="line">    t[++len] = <span class="string">&#x27;#&#x27;</span>, t[++len] = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> mx = <span class="number">0</span>, id = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">        d[i] = mx &gt; i ? <span class="built_in">min</span>(d[id * <span class="number">2</span> - i], mx - i) : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (t[i + d[i]] == t[i - d[i]])</span><br><span class="line">            ++d[i];</span><br><span class="line">        <span class="keyword">if</span> (i + d[i] &gt; mx)</span><br><span class="line">            mx = i + d[i], id = i;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, d[i] - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), m = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">        <span class="type">int</span> t = ln[i] = <span class="built_in">strlen</span>(buf);</span><br><span class="line">        <span class="built_in">copy</span>(buf, buf + t, str + m);</span><br><span class="line">        fr[i] = m, str[m + t] = <span class="string">&#x27;$&#x27;</span>, m += t + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">reverse</span>(buf, buf + t);</span><br><span class="line">        <span class="built_in">copy</span>(buf, buf + t, str + m);</span><br><span class="line">        bk[i] = m, str[m + t] = <span class="string">&#x27;$&#x27;</span>, m += t + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str[m] = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">    sa.<span class="built_in">init</span>(m, str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= m; ++i)</span><br><span class="line">        lg2[i] = (i &amp; (i - <span class="number">1</span>)) ? lg2[i - <span class="number">1</span>] : lg2[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        st[i][<span class="number">0</span>] = sa.he[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; LOGM; ++j) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= m; ++i) &#123;</span><br><span class="line">            st[i][j] = <span class="built_in">min</span>(st[i][j - <span class="number">1</span>], st[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        palfr[i].<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        palfr[i].<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j + j &lt;= ln[i]; ++j) &#123;</span><br><span class="line">            <span class="type">int</span> p1 = fr[i] + j, p2 = bk[i] + (ln[i] - j);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">getlcp</span>(p1, p2) &gt;= j)</span><br><span class="line">                palfr[i].<span class="built_in">push_back</span>(j + j);</span><br><span class="line">            <span class="keyword">if</span> (j + j &lt; ln[i]) &#123;</span><br><span class="line">                p1 = fr[i] + j + <span class="number">1</span>, p2 = bk[i] + (ln[i] - j);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">getlcp</span>(p1, p2) &gt;= j)</span><br><span class="line">                    palfr[i].<span class="built_in">push_back</span>(j + j + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        palbk[i].<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        palbk[i].<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j + j &lt;= ln[i]; ++j) &#123;</span><br><span class="line">            <span class="type">int</span> p1 = bk[i] + j, p2 = fr[i] + (ln[i] - j);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">getlcp</span>(p1, p2) &gt;= j)</span><br><span class="line">                palbk[i].<span class="built_in">push_back</span>(j + j);</span><br><span class="line">            <span class="keyword">if</span> (j + j &lt; ln[i]) &#123;</span><br><span class="line">                p1 = bk[i] + j + <span class="number">1</span>, p2 = fr[i] + (ln[i] - j);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">getlcp</span>(p1, p2) &gt;= j)</span><br><span class="line">                    palbk[i].<span class="built_in">push_back</span>(j + j + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">findedges</span>(i, [&amp;](<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">            ++deg[v];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m + <span class="number">1</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (!deg[i])</span><br><span class="line">            que.<span class="built_in">push</span>(i);</span><br><span class="line">    <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> i = que.<span class="built_in">front</span>();</span><br><span class="line">        id[++cnt] = i, que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="built_in">findedges</span>(i, [&amp;](<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (--deg[v] == <span class="number">0</span>)</span><br><span class="line">                que.<span class="built_in">push</span>(v);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m + <span class="number">1</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (deg[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Infinity&quot;</span>), <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">-0x3f</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    dis[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> x = id[i];</span><br><span class="line">        <span class="built_in">findedges</span>(x, [&amp;](<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">            dis[v] = <span class="built_in">max</span>(dis[v], dis[u] + w);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    ans = dis[m + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, <span class="built_in">manacher</span>(str + fr[i] - <span class="number">1</span>, ln[i]));</span><br><span class="line">    <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P1117 [NOI2016] 优秀的拆分</title>
    <url>/2022/02/04/sol-p1117/</url>
    <content><![CDATA[<h2 id="P1117-NOI2016-优秀的拆分"><a href="#P1117-NOI2016-优秀的拆分" class="headerlink" title="P1117 [NOI2016] 优秀的拆分"></a>P1117 [NOI2016] 优秀的拆分</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P1117">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>$O(n^2)$暴力+$hash$能拿$95pts$。</p>
<p>但显然我们不满足于这$95pts$，考虑如何优化这个$O(n^2)$，即更快地求出每个位置对应的<code>AA</code>串数量。</p>
<p>考虑枚举<code>A</code>串的长度$len$，并且每隔$len$个字符分割一次，这样每一条长度为$len\times 2$的<code>AA</code>串都经过了至少$2$个分隔符，于是考虑从分隔符向两边拓展即可，用后缀数组计算。时间复杂度$O(n\log n)$。</p>
<p>鬼知道我调了多久（具体看代码吧）。<strong>SA多次使用一定要清空，我也不知道为什么。</strong></p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P1117.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P1117</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">3e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LOGN = <span class="number">16</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SuffixArray</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, sa[MAXN], rk[MAXN], tp[MAXN], he[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>(sa, sa + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(rk, rk + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(tp, tp + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(he, he + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">radix_sort</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> buc[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            buc[rk[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] += buc[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">            sa[buc[rk[tp[i]]]--] = tp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="type">int</span> m = <span class="number">200</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            rk[i] = s[i] + <span class="number">1</span>, tp[i] = i;</span><br><span class="line">        <span class="built_in">radix_sort</span>(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">1</span>, p = <span class="number">0</span>; p &lt; n; m = p, w &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= w; ++i)</span><br><span class="line">                tp[++p] = n - w + i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">if</span> (sa[i] &gt; w)</span><br><span class="line">                    tp[++p] = sa[i] - w;</span><br><span class="line">            <span class="built_in">radix_sort</span>(m);</span><br><span class="line">            <span class="built_in">copy</span>(rk + <span class="number">1</span>, rk + n + <span class="number">1</span>, tp + <span class="number">1</span>);</span><br><span class="line">            rk[sa[<span class="number">1</span>]] = p = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tp[sa[i - <span class="number">1</span>]] == tp[sa[i]] &amp;&amp; tp[sa[i - <span class="number">1</span>] + w] == tp[sa[i] + w])</span><br><span class="line">                    rk[sa[i]] = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    rk[sa[i]] = ++p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k)</span><br><span class="line">                k--;</span><br><span class="line">            <span class="keyword">while</span> (s[i + k] == s[sa[rk[i] - <span class="number">1</span>] + k])</span><br><span class="line">                k++;</span><br><span class="line">            he[rk[i]] = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sa, pa;</span><br><span class="line"><span class="type">int</span> n, a[MAXN], b[MAXN], lg2[MAXN];</span><br><span class="line"><span class="type">int</span> smn[MAXN][LOGN], pmn[MAXN][LOGN];</span><br><span class="line"><span class="type">char</span> s[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getlcs</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">        <span class="built_in">swap</span>(l, r);</span><br><span class="line">    <span class="type">int</span> k = lg2[r - l];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(smn[l + <span class="number">1</span>][k], smn[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getlcp</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">        <span class="built_in">swap</span>(l, r);</span><br><span class="line">    <span class="type">int</span> k = lg2[r - l];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(pmn[l + <span class="number">1</span>][k], pmn[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> tt;</span><br><span class="line">    <span class="built_in">read</span>(tt);</span><br><span class="line">    <span class="keyword">while</span> (tt--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">        n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        sa.<span class="built_in">init</span>(n, s);</span><br><span class="line">        <span class="built_in">reverse</span>(s + <span class="number">1</span>, s + n + <span class="number">1</span>);</span><br><span class="line">        pa.<span class="built_in">init</span>(n, s);</span><br><span class="line">        <span class="built_in">reverse</span>(s + <span class="number">1</span>, s + n + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">fill</span>(a, a + n + <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(b, b + n + <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">            lg2[i] = (i &amp; (i - <span class="number">1</span>)) ? lg2[i - <span class="number">1</span>] : lg2[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            smn[i][<span class="number">0</span>] = sa.he[i];</span><br><span class="line">            pmn[i][<span class="number">0</span>] = pa.he[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; LOGN; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; ++i) &#123;</span><br><span class="line">                smn[i][j] = <span class="built_in">min</span>(smn[i][j - <span class="number">1</span>], smn[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">                pmn[i][j] = <span class="built_in">min</span>(pmn[i][j - <span class="number">1</span>], pmn[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">1</span>; x + x &lt;= n; ++x) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> sr = x + <span class="number">1</span>; sr &lt;= n; sr += x) &#123;</span><br><span class="line">                <span class="type">int</span> sl = sr - x;</span><br><span class="line">                <span class="type">int</span> pl = n - sr + <span class="number">1</span>, pr = n - sl + <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> pre = <span class="built_in">getlcp</span>(pa.rk[pl], pa.rk[pr]);</span><br><span class="line">                <span class="type">int</span> nxt = <span class="built_in">getlcs</span>(sa.rk[sl], sa.rk[sr]);</span><br><span class="line">                pre = <span class="built_in">min</span>(pre, x), nxt = <span class="built_in">min</span>(nxt, x);</span><br><span class="line">                <span class="keyword">if</span> (pre + nxt &gt; x) &#123;</span><br><span class="line">                    a[sr - pre + x]++, a[sr + nxt]--;</span><br><span class="line">                    b[sl - pre]--, b[sl + nxt - x]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            a[i] += a[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">            b[i] += b[i + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">            ans += a[i] * b[i + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        sa.<span class="built_in">clear</span>(), pa.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4094 [HEOI2016/TJOI2016] 字符串</title>
    <url>/2022/02/04/sol-p4094/</url>
    <content><![CDATA[<h2 id="P4094-HEOI2016-TJOI2016-字符串"><a href="#P4094-HEOI2016-TJOI2016-字符串" class="headerlink" title="P4094 [HEOI2016/TJOI2016] 字符串"></a>P4094 [HEOI2016/TJOI2016] 字符串</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4094">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>答案具有二分性，考虑先二分答案$len$并判断。</p>
<p>判断时在$height$数组上二分出$cl \le rk[c] \le cr$两个端点，使得$lcp(cl, cr) \ge len$，然后判断是否有$i$使得$i \in [a, b - len + 1]$且$rk[i] \in [cl, cr]$，显然可以用主席树维护查询。</p>
<p>时间复杂度$O(n \log^2 n)$，常数并不小。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4094.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4094</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LOGN = <span class="number">19</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SuffixArray</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, sa[MAXN], rk[MAXN], tp[MAXN], ht[MAXN], he[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">radix_sort</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> buc[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            buc[rk[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] += buc[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">            sa[buc[rk[tp[i]]]--] = tp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="type">int</span> m = <span class="number">200</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            rk[i] = s[i] + <span class="number">1</span>, tp[i] = i;</span><br><span class="line">        <span class="built_in">radix_sort</span>(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">1</span>, p = <span class="number">0</span>; p &lt; n; m = p, w &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= w; ++i)</span><br><span class="line">                tp[++p] = n - w + i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">if</span> (sa[i] &gt; w)</span><br><span class="line">                    tp[++p] = sa[i] - w;</span><br><span class="line">            <span class="built_in">radix_sort</span>(m);</span><br><span class="line">            <span class="built_in">copy</span>(rk + <span class="number">1</span>, rk + n + <span class="number">1</span>, tp + <span class="number">1</span>);</span><br><span class="line">            rk[sa[<span class="number">1</span>]] = p = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tp[sa[i - <span class="number">1</span>]] == tp[sa[i]] &amp;&amp; tp[sa[i - <span class="number">1</span>] + w] == tp[sa[i] + w])</span><br><span class="line">                    rk[sa[i]] = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    rk[sa[i]] = ++p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k)</span><br><span class="line">                k--;</span><br><span class="line">            <span class="keyword">while</span> (s[i + k] == s[sa[rk[i] - <span class="number">1</span>] + k])</span><br><span class="line">                k++;</span><br><span class="line">            ht[i] = he[rk[i]] = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sa;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> sum, ls, rs;</span><br><span class="line">    &#125; nd[MAXN * <span class="number">25</span>];</span><br><span class="line">    <span class="type">int</span> tot, rt[MAXN];</span><br><span class="line">    <span class="type">int</span>&amp; <span class="keyword">operator</span>[](<span class="type">int</span> i) &#123; <span class="keyword">return</span> rt[i]; &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newnode</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123; <span class="keyword">return</span> nd[++tot] = nd[i], tot; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span>&amp; i, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> q, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        i = <span class="built_in">newnode</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">void</span>(nd[i].sum += v);</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (q &lt;= mid)</span><br><span class="line">            <span class="built_in">update</span>(nd[i].ls, l, mid, q, v);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">update</span>(nd[i].rs, mid + <span class="number">1</span>, r, q, v);</span><br><span class="line">        nd[i].sum = nd[nd[i].ls].sum + nd[nd[i].rs].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">            <span class="keyword">return</span> nd[v].sum - nd[u].sum;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid)</span><br><span class="line">            ret += <span class="built_in">query</span>(nd[u].ls, nd[v].ls, l, mid, ql, qr);</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid)</span><br><span class="line">            ret += <span class="built_in">query</span>(nd[u].rs, nd[v].rs, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sgt;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> lg2[MAXN], st[MAXN][LOGN];</span><br><span class="line"><span class="type">char</span> str[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcp</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="type">int</span> k = lg2[r - l];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(st[l + <span class="number">1</span>][k], st[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r, cl, cr;</span><br><span class="line">    l = <span class="number">1</span>, r = sa.rk[c], cl = r;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">lcp</span>(mid, sa.rk[c]) &gt;= len)</span><br><span class="line">            r = mid - <span class="number">1</span>, cl = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    l = sa.rk[c], r = n, cr = l;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">lcp</span>(sa.rk[c], mid) &gt;= len)</span><br><span class="line">            l = mid + <span class="number">1</span>, cr = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sgt.<span class="built_in">query</span>(sgt[a - <span class="number">1</span>], sgt[b - len + <span class="number">1</span>], <span class="number">1</span>, n, cl, cr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str + <span class="number">1</span>);</span><br><span class="line">    sa.<span class="built_in">init</span>(n, str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">        lg2[i] = (i &amp; (i - <span class="number">1</span>)) ? lg2[i - <span class="number">1</span>] : lg2[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        st[i][<span class="number">0</span>] = sa.he[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; LOGN; ++j) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; ++i) &#123;</span><br><span class="line">            st[i][j] = <span class="built_in">min</span>(st[i][j - <span class="number">1</span>], st[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        sgt.<span class="built_in">update</span>(sgt[i] = sgt[i - <span class="number">1</span>], <span class="number">1</span>, n, sa.rk[i], <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c, d;</span><br><span class="line">        <span class="built_in">read</span>(a), <span class="built_in">read</span>(b), <span class="built_in">read</span>(c), <span class="built_in">read</span>(d);</span><br><span class="line">        <span class="type">int</span> l = <span class="number">1</span>, r = <span class="built_in">min</span>(b - a + <span class="number">1</span>, d - c + <span class="number">1</span>), ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(a, b, c, d, mid))</span><br><span class="line">                l = mid + <span class="number">1</span>, ans = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4081 [USACO17DEC] Standing Out from the Herd P</title>
    <url>/2022/02/03/sol-p4081/</url>
    <content><![CDATA[<h2 id="P4081-USACO17DEC-Standing-Out-from-the-Herd-P"><a href="#P4081-USACO17DEC-Standing-Out-from-the-Herd-P" class="headerlink" title="P4081 [USACO17DEC] Standing Out from the Herd P"></a>P4081 [USACO17DEC] Standing Out from the Herd P</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4081">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>首先构建后缀数组。仍然套路地枚举大串的位置$sa[i]$。首先考虑的是不能在别的小串中出现，记录其前后第一个在不同串中出现的后缀位置，分别为$pre_i$和$nxt_i$，则以$sa[i]$开头的后缀对答案贡献的最小长度为$\max(lcs(pre_i, i), lcs(i, nxt_i))$；接下来考虑只在当前小串中出现一次是，则对答案贡献的最小长度为$\max(lcs(i,i+1))$。两者取$\max$即可。总的时间复杂度为$O(n \log n)$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4081.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4081</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SuffixArray</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, sa[MAXN], rk[MAXN], tp[MAXN], ht[MAXN], he[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">radix_sort</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> buc[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            buc[rk[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] += buc[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">            sa[buc[rk[tp[i]]]--] = tp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="type">int</span> m = <span class="number">200</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            rk[i] = s[i] + <span class="number">1</span>, tp[i] = i;</span><br><span class="line">        <span class="built_in">radix_sort</span>(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">1</span>, p = <span class="number">0</span>; p &lt; n; m = p, w &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= w; ++i)</span><br><span class="line">                tp[++p] = n - w + i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">if</span> (sa[i] &gt; w)</span><br><span class="line">                    tp[++p] = sa[i] - w;</span><br><span class="line">            <span class="built_in">radix_sort</span>(m);</span><br><span class="line">            <span class="built_in">copy</span>(rk + <span class="number">1</span>, rk + n + <span class="number">1</span>, tp + <span class="number">1</span>);</span><br><span class="line">            rk[sa[<span class="number">1</span>]] = p = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tp[sa[i - <span class="number">1</span>]] == tp[sa[i]] &amp;&amp; tp[sa[i - <span class="number">1</span>] + w] == tp[sa[i] + w])</span><br><span class="line">                    rk[sa[i]] = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    rk[sa[i]] = ++p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k)</span><br><span class="line">                k--;</span><br><span class="line">            <span class="keyword">while</span> (s[i + k] == s[sa[rk[i] - <span class="number">1</span>] + k])</span><br><span class="line">                k++;</span><br><span class="line">            ht[i] = k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            he[i] = ht[sa[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sa;</span><br><span class="line"><span class="type">int</span> n, m, id[MAXN], ed[MAXN], len[MAXN], ans[MAXN];</span><br><span class="line"><span class="type">char</span> buf[MAXN], str[MAXN];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), m = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">        len[i] = <span class="built_in">strlen</span>(buf);</span><br><span class="line">        <span class="built_in">copy</span>(buf, buf + len[i], str + m);</span><br><span class="line">        str[m + len[i]] = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">        <span class="built_in">fill</span>(id + m, id + m + len[i], i);</span><br><span class="line">        ed[i] = m + len[i];</span><br><span class="line">        m += len[i] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sa.<span class="built_in">init</span>(m, str);</span><br><span class="line">    <span class="type">int</span> pre = <span class="number">0</span>, mn = INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (id[sa.sa[i]] != id[sa.sa[i - <span class="number">1</span>]]) &#123;</span><br><span class="line">            <span class="type">int</span> p = id[sa.sa[i - <span class="number">1</span>]];</span><br><span class="line">            pre = i - <span class="number">1</span>, mn = ed[p] - sa.sa[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        mn = <span class="built_in">min</span>(mn, sa.he[i]);</span><br><span class="line">        <span class="type">int</span> p = id[sa.sa[i]];</span><br><span class="line">        <span class="type">int</span> cur = <span class="built_in">max</span>(<span class="number">0ll</span>, ed[p] - sa.sa[i] - <span class="built_in">max</span>(mn, sa.he[i + <span class="number">1</span>]));</span><br><span class="line">        ans[p] += cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">write</span>(ans[i]), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P5028 Annihilate</title>
    <url>/2022/02/03/sol-p5028/</url>
    <content><![CDATA[<h2 id="P5028-Annihilate"><a href="#P5028-Annihilate" class="headerlink" title="P5028 Annihilate"></a>P5028 Annihilate</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P5028">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>题意很<del>简洁</del>，让求$n$个串两两之间的LCS。</p>
<p>既然不能$O(len^2)$的$dp$，那么就使用后缀数组吧。</p>
<p>注意到可以套路地将串拼接，直接枚举大串位置$i$，记录下每个小串的最近的上一个字符位置$pre_j$，用LCS更新答案，$O(n\times len)$。</p>
<p>注意到内存限制为$64M$，无法使用ST表，于是在更新$pre$数组时记录另一个$mn$数组保存从$pre$到$i$的LCS，空间复杂度变成$O(n^2 + len)$，可以通过。</p>
<p>注意到最后的$40pts$其实有考察选手的细心程度，LCS不能大于串的长度。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P5028.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P5028</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">55</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">1.1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SuffixArray</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, sa[MAXM], rk[MAXM], tp[MAXM], ht[MAXM], he[MAXM];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">radix_sort</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> buc[MAXM];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            buc[rk[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] += buc[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">            sa[buc[rk[tp[i]]]--] = tp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="type">int</span> m = <span class="number">200</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            rk[i] = s[i] + <span class="number">1</span>, tp[i] = i;</span><br><span class="line">        <span class="built_in">radix_sort</span>(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">1</span>, p = <span class="number">0</span>; p &lt; n; m = p, w &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= w; ++i)</span><br><span class="line">                tp[++p] = n - w + i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">if</span> (sa[i] &gt; w)</span><br><span class="line">                    tp[++p] = sa[i] - w;</span><br><span class="line">            <span class="built_in">radix_sort</span>(m);</span><br><span class="line">            <span class="built_in">copy</span>(rk + <span class="number">1</span>, rk + n + <span class="number">1</span>, tp + <span class="number">1</span>);</span><br><span class="line">            rk[sa[<span class="number">1</span>]] = p = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tp[sa[i - <span class="number">1</span>]] == tp[sa[i]] &amp;&amp; tp[sa[i - <span class="number">1</span>] + w] == tp[sa[i] + w])</span><br><span class="line">                    rk[sa[i]] = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    rk[sa[i]] = ++p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k)</span><br><span class="line">                k--;</span><br><span class="line">            <span class="keyword">while</span> (s[i + k] == s[sa[rk[i] - <span class="number">1</span>] + k])</span><br><span class="line">                k++;</span><br><span class="line">            ht[i] = k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            he[i] = ht[sa[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sa;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> mn[MAXN], ed[MAXN], len[MAXN], pre[MAXN];</span><br><span class="line"><span class="type">int</span> id[MAXM], ans[MAXN][MAXN];</span><br><span class="line"><span class="type">char</span> buf[MAXM], str[MAXM];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), m = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">        len[i] = <span class="built_in">strlen</span>(buf);</span><br><span class="line">        <span class="built_in">copy</span>(buf, buf + len[i], str + m);</span><br><span class="line">        str[m + len[i]] = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">        <span class="built_in">fill</span>(id + m, id + m + len[i], i);</span><br><span class="line">        ed[i] = m + len[i];</span><br><span class="line">        m += len[i] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sa.<span class="built_in">init</span>(m, str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            mn[j] = <span class="built_in">min</span>(mn[j], sa.he[i]);</span><br><span class="line">        <span class="type">int</span> p = id[sa.sa[i]];</span><br><span class="line">        <span class="type">int</span> clen = ed[p] - sa.sa[i];</span><br><span class="line">        pre[p] = i, mn[p] = clen;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pre[j]) &#123;</span><br><span class="line">                ans[j][p] = <span class="built_in">max</span>(ans[j][p], <span class="built_in">min</span>(mn[j], clen));</span><br><span class="line">                ans[p][j] = <span class="built_in">max</span>(ans[p][j], <span class="built_in">min</span>(mn[j], clen));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == j)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">write</span>(ans[i][j]), <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4070 [SDOI2016] 生成魔咒</title>
    <url>/2022/02/03/sol-p4070/</url>
    <content><![CDATA[<h2 id="P4070-SDOI2016-生成魔咒"><a href="#P4070-SDOI2016-生成魔咒" class="headerlink" title="P4070 [SDOI2016] 生成魔咒"></a>P4070 [SDOI2016] 生成魔咒</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4070">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>注意到每次加入一个字符$s[i]$后，增加的不同子串数量就是$i-lcs$，其中$lcs$是子串$s[1\cdots i]$和加入前$s$中任意子串最长的最长公共后缀长度。</p>
<p>要求出每个前缀和其他子串的lcs，容易想到将串反转后使用后缀数组。现在问题转化为对每个$i$求出对应的$p \lt i$使得$\min\limits_{k\in(rk[p],rk[i]]\bigcup(rk[i],rk[p]]}{height[k]}$最大，显然这个$rk[p]$是$rk[i]$的前驱或者后继。</p>
<p>按顺序枚举$i$，用<del>平衡树</del>两棵线段树维护前驱后继，求出lcs取max，得到每次增加的不同子串数量，得到最终答案。</p>
<p>时间复杂度$O(n \log n)$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4070.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4070</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LOGN = <span class="number">19</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SuffixArray</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, sa[MAXN], rk[MAXN], tp[MAXN], ht[MAXN], he[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">radix_sort</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> buc[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            buc[rk[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] += buc[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">            sa[buc[rk[tp[i]]]--] = tp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>* s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="type">int</span> m = <span class="number">1e5</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            rk[i] = s[i], tp[i] = i;</span><br><span class="line">        <span class="built_in">radix_sort</span>(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">1</span>, p = <span class="number">0</span>; p &lt; n; m = p, w &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= w; ++i)</span><br><span class="line">                tp[++p] = n - w + i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">if</span> (sa[i] &gt; w)</span><br><span class="line">                    tp[++p] = sa[i] - w;</span><br><span class="line">            <span class="built_in">radix_sort</span>(m);</span><br><span class="line">            <span class="built_in">copy</span>(rk + <span class="number">1</span>, rk + n + <span class="number">1</span>, tp + <span class="number">1</span>);</span><br><span class="line">            rk[sa[<span class="number">1</span>]] = p = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tp[sa[i - <span class="number">1</span>]] == tp[sa[i]] &amp;&amp; tp[sa[i - <span class="number">1</span>] + w] == tp[sa[i] + w])</span><br><span class="line">                    rk[sa[i]] = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    rk[sa[i]] = ++p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k)</span><br><span class="line">                k--;</span><br><span class="line">            <span class="keyword">while</span> (s[i + k] == s[sa[rk[i] - <span class="number">1</span>] + k])</span><br><span class="line">                k++;</span><br><span class="line">            ht[i] = k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            he[i] = ht[sa[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sa;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> li (i &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ri (i &lt;&lt; 1) | 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson li, l, mid</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson ri, mid + 1, r</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Update</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">    _Update upd;</span><br><span class="line">    <span class="type">int</span> nd[MAXN * <span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        nd[i] = x;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(lson, x), <span class="built_in">build</span>(rson, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> q, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">void</span>(nd[i] = <span class="built_in">upd</span>(nd[i], v));</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (q &lt;= mid)</span><br><span class="line">            <span class="built_in">update</span>(lson, q, v);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">update</span>(rson, q, v);</span><br><span class="line">        nd[i] = <span class="built_in">upd</span>(nd[li], nd[ri]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ql &gt; qr)</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">            <span class="keyword">return</span> nd[i];</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, ret = x;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid)</span><br><span class="line">            ret = <span class="built_in">upd</span>(ret, <span class="built_in">query</span>(lson, ql, qr, x));</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid)</span><br><span class="line">            ret = <span class="built_in">upd</span>(ret, <span class="built_in">query</span>(rson, ql, qr, x));</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MaxUpdate</span> &#123; <span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">max</span>(x, y); &#125; &#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MinUpdate</span> &#123; <span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">min</span>(x, y); &#125; &#125;;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[MAXN], b[MAXN], rev[MAXN], lg2[MAXN], st[MAXN][LOGN];</span><br><span class="line">SegmentTree&lt;MaxUpdate&gt; sgtpre;</span><br><span class="line">SegmentTree&lt;MinUpdate&gt; sgtnxt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcs</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="type">int</span> k = lg2[r - l];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(st[l + <span class="number">1</span>][k], st[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), m = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(a[i]), b[i] = a[i];</span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span>, b + m + <span class="number">1</span>);</span><br><span class="line">    m = <span class="built_in">unique</span>(b + <span class="number">1</span>, b + m + <span class="number">1</span>) - b - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        a[i] = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + m + <span class="number">1</span>, a[i]) - b;</span><br><span class="line">    <span class="built_in">copy</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, rev + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">reverse</span>(rev + <span class="number">1</span>, rev + n + <span class="number">1</span>);</span><br><span class="line">    sa.<span class="built_in">init</span>(n, rev);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">        lg2[i] = (i &amp; (i - <span class="number">1</span>)) ? lg2[i - <span class="number">1</span>] : lg2[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        st[i][<span class="number">0</span>] = sa.he[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; LOGN; ++j) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; ++i) &#123;</span><br><span class="line">            st[i][j] = <span class="built_in">min</span>(st[i][j - <span class="number">1</span>], st[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sgtpre.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">0</span>);</span><br><span class="line">    sgtnxt.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n, n + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> t = sa.rk[n - i + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> p1 = sgtpre.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">1</span>, t, <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> p2 = sgtnxt.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, t, n, n + <span class="number">1</span>);</span><br><span class="line">        cur += i - <span class="built_in">max</span>(<span class="built_in">lcs</span>(p1, t), <span class="built_in">lcs</span>(t, p2));</span><br><span class="line">        sgtpre.<span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, n, t, t);</span><br><span class="line">        sgtnxt.<span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, n, t, t);</span><br><span class="line">        <span class="built_in">write</span>(cur), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4341 [BJWC2010] 外星联络</title>
    <url>/2022/02/03/sol-p4341/</url>
    <content><![CDATA[<h2 id="P4341-BJWC2010-外星联络"><a href="#P4341-BJWC2010-外星联络" class="headerlink" title="P4341 [BJWC2010] 外星联络"></a>P4341 [BJWC2010] 外星联络</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4341">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>没初始化$log_2$数组，但过了样例。</p>
<p>注意到使用后缀数组排序后，可以比较方便地按照字典序枚举子串。具体地，对于后缀$s[sa[i]…n]$，按照顺序枚举子串$s[sa[i]+he[i]…n]$即可。</p>
<p>注意到可以ST表维护LCS，并二分出每个子串的出现次数。于是这题变成了SA模版题。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4341.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4341</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">3e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LOGN = <span class="number">15</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SuffixArray</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, sa[MAXN], rk[MAXN], tp[MAXN], ht[MAXN], he[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">radix_sort</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> buc[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            buc[rk[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] += buc[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">            sa[buc[rk[tp[i]]]--] = tp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="type">int</span> m = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            rk[i] = s[i] - <span class="string">&#x27;0&#x27;</span> + <span class="number">1</span>, tp[i] = i;</span><br><span class="line">        <span class="built_in">radix_sort</span>(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">1</span>, p = <span class="number">0</span>; p &lt; n; m = p, w &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= w; ++i)</span><br><span class="line">                tp[++p] = n - w + i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">if</span> (sa[i] &gt; w)</span><br><span class="line">                    tp[++p] = sa[i] - w;</span><br><span class="line">            <span class="built_in">radix_sort</span>(m);</span><br><span class="line">            <span class="built_in">copy</span>(rk + <span class="number">1</span>, rk + n + <span class="number">1</span>, tp + <span class="number">1</span>);</span><br><span class="line">            rk[sa[<span class="number">1</span>]] = p = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tp[sa[i - <span class="number">1</span>]] == tp[sa[i]] &amp;&amp; tp[sa[i - <span class="number">1</span>] + w] == tp[sa[i] + w])</span><br><span class="line">                    rk[sa[i]] = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    rk[sa[i]] = ++p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k)</span><br><span class="line">                k--;</span><br><span class="line">            <span class="keyword">while</span> (s[i + k] == s[sa[rk[i] - <span class="number">1</span>] + k])</span><br><span class="line">                k++;</span><br><span class="line">            ht[i] = k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            he[i] = ht[sa[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sa;</span><br><span class="line"><span class="type">int</span> n, lg2[MAXN], st[MAXN][LOGN];</span><br><span class="line"><span class="type">char</span> str[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcs</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="type">int</span> k = lg2[r - l];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(st[l + <span class="number">1</span>][k], st[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str + <span class="number">1</span>);</span><br><span class="line">    sa.<span class="built_in">init</span>(n, str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">        lg2[i] = (i &amp; (i - <span class="number">1</span>)) ? lg2[i - <span class="number">1</span>] : lg2[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        st[i][<span class="number">0</span>] = sa.he[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; LOGN; ++j) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; ++i) &#123;</span><br><span class="line">            st[i][j] = <span class="built_in">min</span>(st[i][j - <span class="number">1</span>], st[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> mn = sa.he[i] + <span class="number">1</span>, mx = n - sa.sa[i] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = mn; j &lt;= mx; ++j) &#123;</span><br><span class="line">            <span class="type">int</span> l = i, r = n, x = i;</span><br><span class="line">            <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">                <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">lcs</span>(i, mid) &gt;= j)</span><br><span class="line">                    l = mid + <span class="number">1</span>, x = mid;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (x != i)</span><br><span class="line">                <span class="built_in">write</span>(x - i + <span class="number">1</span>), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P3649 [APIO2014] 回文串</title>
    <url>/2022/02/02/sol-p3649/</url>
    <content><![CDATA[<h2 id="P3649-APIO2014-回文串"><a href="#P3649-APIO2014-回文串" class="headerlink" title="P3649 [APIO2014] 回文串"></a>P3649 [APIO2014] 回文串</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P3649">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>所以说APIO2014考了道模版题？</p>
<p>这显然就是PAM模版，但既然碰到了就还是写一下（反正我也忘了）。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P3649.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P3649</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PAM</span> &#123;</span><br><span class="line">    <span class="type">int</span> siz, tot, last;</span><br><span class="line">    <span class="type">int</span> cnt[MAXN], len[MAXN], fail[MAXN], nxt[MAXN][<span class="number">26</span>];</span><br><span class="line">    <span class="type">char</span> str[MAXN];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newnode</span><span class="params">(<span class="type">int</span> l)</span> </span>&#123; <span class="keyword">return</span> len[++siz] = l, siz; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        siz = <span class="number">-1</span>, last = <span class="number">0</span>;</span><br><span class="line">        str[tot = <span class="number">0</span>] = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">        <span class="built_in">newnode</span>(<span class="number">0</span>), <span class="built_in">newnode</span>(<span class="number">-1</span>);</span><br><span class="line">        fail[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getfail</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (str[tot - len[x] - <span class="number">1</span>] != str[tot])</span><br><span class="line">            x = fail[x];</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;</span><br><span class="line">        str[++tot] = c;</span><br><span class="line">        <span class="type">int</span> now = <span class="built_in">getfail</span>(last);</span><br><span class="line">        <span class="keyword">if</span> (!nxt[now][c - <span class="string">&#x27;a&#x27;</span>]) &#123;</span><br><span class="line">            <span class="type">int</span> x = <span class="built_in">newnode</span>(len[now] + <span class="number">2</span>);</span><br><span class="line">            fail[x] = nxt[<span class="built_in">getfail</span>(fail[now])][c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            nxt[now][c - <span class="string">&#x27;a&#x27;</span>] = x;</span><br><span class="line">        &#125;</span><br><span class="line">        last = nxt[now][c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        ++cnt[last];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; pam;</span><br><span class="line"><span class="type">char</span> s[MAXN];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">    pam.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; s[i]; ++i)</span><br><span class="line">        pam.<span class="built_in">insert</span>(s[i]);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = pam.siz; ~i; --i)</span><br><span class="line">        pam.cnt[pam.fail[i]] += pam.cnt[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= pam.siz; ++i)</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, pam.cnt[i] * pam.len[i]);</span><br><span class="line">    <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P2336 [SCOI2012] 喵星球上的点名</title>
    <url>/2022/02/02/sol-p2336/</url>
    <content><![CDATA[<h2 id="P2336-SCOI2012-喵星球上的点名"><a href="#P2336-SCOI2012-喵星球上的点名" class="headerlink" title="P2336 [SCOI2012] 喵星球上的点名"></a>P2336 [SCOI2012] 喵星球上的点名</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P2336">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>本以为自己的$O(n\log n)$假做法能dd题解，没想到还是要用莫队……</p>
<p>既然能用后缀数组解决的题，就一定不要去写自动机啊～</p>
<p>先套路地将串之间用分隔符连接，为了保证后缀排序后的顺序是相同后缀时姓名在前点名在后，则将姓名之间的分隔符ASCII码$\lt$点名之间的分隔符ASCII码。</p>
<p>在后缀数组上扫描并维护单调栈，当扫描到点名串的开头时，在单调栈上二分得到第一个可以使得后缀$sa[t\cdots i]$的前$len$个数字相同的$t$（其中$len$是该点名串的长度），形式化地，二分出最小的$t$使得$\forall j \in (t,i] \quad height[j] \le len$。注意到$t$到$i$之间的不同姓名串数量就是答案。</p>
<p>所以可以离线下来，用莫队求区间不同数的个数。</p>
<p>思考如何求出第二个答案。运用莫队的小技巧我们知道可以在移动指针时差分算出每次加入新的姓名串到下一次删除该姓名串之间的步数的总和，加起来就是第二个答案。</p>
<p>时间复杂度$O(n \sqrt n)$，被自动机吊打<del>但能过</del>。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P2336.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P2336</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SuffixArray</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, sa[MAXN], rk[MAXN], tp[MAXN], ht[MAXN], he[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">radix_sort</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> buc[MAXN] = &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            buc[rk[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] += buc[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">            sa[buc[rk[tp[i]]]--] = tp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>* s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="type">int</span> m = <span class="number">5e5</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            rk[i] = s[i] + <span class="number">1</span>, tp[i] = i;</span><br><span class="line">        <span class="built_in">radix_sort</span>(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">1</span>, p = <span class="number">0</span>; p &lt; n; m = p, w &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= w; ++i)</span><br><span class="line">                tp[++p] = n - w + i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">if</span> (sa[i] &gt; w)</span><br><span class="line">                    tp[++p] = sa[i] - w;</span><br><span class="line">            <span class="built_in">radix_sort</span>(m);</span><br><span class="line">            <span class="built_in">copy</span>(rk + <span class="number">1</span>, rk + n + <span class="number">1</span>, tp + <span class="number">1</span>);</span><br><span class="line">            rk[sa[<span class="number">1</span>]] = p = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tp[sa[i - <span class="number">1</span>]] == tp[sa[i]] &amp;&amp; tp[sa[i - <span class="number">1</span>] + w] == tp[sa[i] + w])</span><br><span class="line">                    rk[sa[i]] = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    rk[sa[i]] = ++p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k)</span><br><span class="line">                k--;</span><br><span class="line">            <span class="keyword">while</span> (s[i + k] == s[sa[rk[i] - <span class="number">1</span>] + k])</span><br><span class="line">                k++;</span><br><span class="line">            ht[i] = k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            he[i] = ht[sa[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sa;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Query</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, i;</span><br><span class="line">&#125; query[MAXN];</span><br><span class="line"><span class="type">int</span> n, m, l, len, top, block;</span><br><span class="line"><span class="type">int</span> lb[MAXN], ta[MAXN], tb[MAXN], buf[MAXN], str[MAXN];</span><br><span class="line"><span class="type">int</span> sta[MAXN], hta[MAXN], typ[MAXN], cnt[MAXN];</span><br><span class="line"><span class="type">int</span> ans1[MAXN], ans2[MAXN];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    ta[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> l1, l2;</span><br><span class="line">        <span class="built_in">read</span>(l1);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= l1; ++j)</span><br><span class="line">            <span class="built_in">read</span>(buf[j]);</span><br><span class="line">        buf[l1 + <span class="number">1</span>] = <span class="number">1e5</span>;</span><br><span class="line">        <span class="built_in">read</span>(l2);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= l2; ++j)</span><br><span class="line">            <span class="built_in">read</span>(buf[j + l1 + <span class="number">1</span>]);</span><br><span class="line">        l = l1 + l2 + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">copy</span>(buf + <span class="number">1</span>, buf + l + <span class="number">1</span>, str + ta[i]);</span><br><span class="line">        str[ta[i] + l] = <span class="number">1e5</span>;</span><br><span class="line">        ta[i + <span class="number">1</span>] = ta[i] + l + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tb[<span class="number">1</span>] = ta[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(l), lb[i] = l;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= l; ++j)</span><br><span class="line">            <span class="built_in">read</span>(buf[j]);</span><br><span class="line">        <span class="built_in">copy</span>(buf + <span class="number">1</span>, buf + l + <span class="number">1</span>, str + tb[i]);</span><br><span class="line">        str[tb[i] + l] = <span class="number">2e5</span>;</span><br><span class="line">        tb[i + <span class="number">1</span>] = tb[i] + l + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    len = tb[m + <span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">    sa.<span class="built_in">init</span>(len, str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = ta[i]; j &lt; ta[i + <span class="number">1</span>]; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[j] &lt; <span class="number">1e5</span>)</span><br><span class="line">                typ[sa.rk[j]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (top &amp;&amp; hta[top] &gt; sa.he[i])</span><br><span class="line">            --top;</span><br><span class="line">        ++top, sta[top] = i, hta[top] = sa.he[i];</span><br><span class="line">        <span class="keyword">if</span> (sa.sa[i] &gt;= tb[<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="type">int</span> p = sa.sa[i];</span><br><span class="line">            <span class="type">int</span> x = <span class="built_in">lower_bound</span>(tb + <span class="number">1</span>, tb + m + <span class="number">1</span>, p) - tb;</span><br><span class="line">            <span class="keyword">if</span> (tb[x] != p)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> t = <span class="built_in">lower_bound</span>(hta + <span class="number">1</span>, hta + top + <span class="number">1</span>, lb[x]) - hta - <span class="number">1</span>;</span><br><span class="line">            query[x] = &#123;t &lt;= top ? sta[t] : i + <span class="number">1</span>, i, x&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    block = <span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(len + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">auto</span> comp_query = [=](<span class="type">const</span> Query&amp; lhs, <span class="type">const</span> Query&amp; rhs) &#123;</span><br><span class="line">        <span class="type">int</span> bl = lhs.l / block, br = rhs.l / block;</span><br><span class="line">        <span class="keyword">return</span> bl == br ? ((bl &amp; <span class="number">1</span>) ? lhs.r &lt; rhs.r : lhs.r &gt; rhs.r)</span><br><span class="line">                        : bl &lt; br;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">sort</span>(query + <span class="number">1</span>, query + m + <span class="number">1</span>, comp_query);</span><br><span class="line">    <span class="type">int</span> cur = <span class="number">0</span>, cl = <span class="number">0</span>, cr = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (cl &lt; query[i].l) &#123;</span><br><span class="line">            <span class="keyword">if</span> (typ[cl] &amp;&amp; --cnt[typ[cl]] == <span class="number">0</span>)</span><br><span class="line">                --cur, ans2[typ[cl]] -= m - i + <span class="number">1</span>;</span><br><span class="line">            ++cl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (cl &gt; query[i].l) &#123;</span><br><span class="line">            --cl;</span><br><span class="line">            <span class="keyword">if</span> (typ[cl] &amp;&amp; cnt[typ[cl]]++ == <span class="number">0</span>)</span><br><span class="line">                ++cur, ans2[typ[cl]] += m - i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (cr &lt; query[i].r) &#123;</span><br><span class="line">            ++cr;</span><br><span class="line">            <span class="keyword">if</span> (typ[cr] &amp;&amp; cnt[typ[cr]]++ == <span class="number">0</span>)</span><br><span class="line">                ++cur, ans2[typ[cr]] += m - i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (cr &gt; query[i].r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (typ[cr] &amp;&amp; --cnt[typ[cr]] == <span class="number">0</span>)</span><br><span class="line">                --cur, ans2[typ[cr]] -= m - i + <span class="number">1</span>;</span><br><span class="line">            --cr;</span><br><span class="line">        &#125;</span><br><span class="line">        ans1[query[i].i] = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">write</span>(ans1[i]), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">write</span>(ans2[i]), <span class="built_in">putchar</span>(<span class="string">&quot; \n&quot;</span>[i == n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>WC2022游寄</title>
    <url>/2022/01/27/trip-wc2022/</url>
    <content><![CDATA[<h2 id="WC2022游寄"><a href="#WC2022游寄" class="headerlink" title="WC2022游寄"></a>WC2022游寄</h2><p><del>冻零</del>冬眠营几日游，<del>学习了LCT等算法</del></p>
<span id="more"></span>
<p>$8:15$ 左右把机房电脑打开了（居然要先按<code>esc</code>然后用鼠标点开系统），看到桌面上有vscode，没找到NOI-Linux（JS传统，事实证明只是我没看到），就<del>趁着还没断网</del>快速下了下插件，配置了下C++，敲了下板子，运行的时候exe被莫名其妙卡到后台了（？？？），任务管理器还没有权限调出来（离大谱），所以只好把<code>template.cpp</code>改成<code>template2.cpp</code>。（然后考试至始至终没打开vsc一直用的dev）</p>
<p>$8:30$ 拿到题目看了眼，一构造一传统一交互看的人头晕（真就和py老师说的那样讲的和考的没有任何关系）。</p>
<p>先看看T1，是个构造+括号序列，操作$1$~$4$都是将不同的序列改为同样的序列，想着似乎可以倒过来做比较方便。然后开始瞎想，感觉先在序列末尾加上一个<code>()</code>然后就比较容易满足$1$~$4$操作的格式，最后再把末尾<code>()</code>删掉，总之想到的都是乱搞。此时已经过去$1h$，一分没有丢掉T1去看T2.</p>
<p>看一眼T2发现我会莫队，于是$O(n \sqrt{n \log n})$的做法直接显然。但是一看数据$5\times 10^5$似乎并不想放莫队过去。继续思考发现删除元素似乎可以$O(1)$搞定，看到时限$5s$，就开心地写起了回滚莫队（此时我还没有意识到回滚莫队的巨大常数）。大概$30min$写完调完小样例，感觉太水了就迅速写了个对拍（听说后来发了大样例，不过我也没看见，不知道是不是这题），一看$n=1000$好像没啥问题，造了个<code>5e5</code>的数据跑了$15s$，立马感觉危，想办法开始卡常数，结果发现写的好像挺优雅的，只好给各个函数加了下<code>inline</code>就丢掉开摆～</p>
<p>T3显然不可做，我花了大量时间在这题而不是想办法优化T2应该说是这场比赛最大的失误。这题出的就很玄学，然后PDF题面中没开<code>c++14</code>且交互库用了<code>srand(0)</code>搞得我既不敢用<code>rand</code>又不敢用<code>mt19937</code>，离谱就离谱在题目说是有$5$次guess的机会但是按照这个交互库的写法相当于是你问$4$次返回$5$次而不是让你问$5$次，于是我非常sb地想到用$5$次问出$25$个字母是否出现然后根据已有信息基本锁定目标串随机选取的做法，浪费了大量时间在写meet in the middle（似乎时限$60$秒的话$2^{26}\times 26$瞎dp都能预处理出来？不怕有人卡评测机吗？）写完发现白干了，最后交了个随机程序上去，期望得分$0$。（顺便说句其实我蛮喜欢C风格的string的，不知道算不算邪教）</p>
<p>最后大概半个多小时开始写T1的暴力。暴力好烦，又要状压又要判断括号序列，而且只能拿$15$分，感觉一点也不值。突然发现不限制$5$和$6$操作的$25$分似乎白给就迅速写完交上去。这时候高三学长已经到机房里准备给我们讲课了，周围乱哄哄的，也没心思再写了，就$3min$换$25pts$感觉<del>还挺值</del>。</p>
<p>于是期望得分只有$25+60/100+0=85/125$，快乐打铁～</p>
<p>粗来交流下发现jcy和jth的T2都是普通莫队写的，jcy拿到了T1的暴力$50$分，jth似乎没拿到T1的白给分但是T3骗了$22$分（我这才发现自己根本没有用<code>grader.cpp</code>估分）。考完zc来问有没有人$160$以上似乎没有人举手。</p>
<p>听jcy说T1似乎是把括号转成树上问题（我居然连树都没有想到，不过估计想到了也不会做）</p>
<p>下午在学校签了停课保证书，$2:30$以后去吃了中<del>下午</del>饭。不得不说椰树牌椰汁还蛮好喝的（逃</p>
<p>晚上讲题交流，大家的回滚莫队都是$9s$只有我大常数选手是$15s$。</p>
<p>等明天出分吧（说不定T3还能骗到个$1pt$呢）</p>
<p>最终得分只有$90$，滚Cu了…</p>
<p><img src="bee.png" alt="bee"></p>
]]></content>
      <categories>
        <category>游记</category>
      </categories>
      <tags>
        <tag>trip</tag>
      </tags>
  </entry>
  <entry>
    <title>UVA11107 Life Forms</title>
    <url>/2022/01/26/sol-uva11107/</url>
    <content><![CDATA[<h2 id="UVA11107-Life-Forms"><a href="#UVA11107-Life-Forms" class="headerlink" title="UVA11107 Life Forms"></a>UVA11107 Life Forms</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/UVA11107">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>相同子串想到用后缀数组。</p>
<p>考虑将所有串用<code>$</code>连接。这样在$height$数组上用ST表维护区间最小值（即区间LCS），第一遍扫描用双指针取$\left\lfloor\dfrac n 2\right\rfloor+1$个不同串中的数字，求出答案的长度，第二遍扫描出长度为$ans$的子串，经过$hash$去重后输出即可。我的写法需要特判$n=1$。</p>
<p>时间复杂度$O(m \log m)$，其中$m=\sum |S|$。</p>
<p><del>代码写的极丑极不优雅</del></p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           UVA11107.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/UVA11107</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">120</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXK = <span class="number">1e5</span> + <span class="number">150</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LOGK = <span class="number">19</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SuffixArray</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, sa[MAXK], rk[MAXK], tp[MAXK], ht[MAXK], he[MAXK];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">radix_sort</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> buc[MAXK];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            buc[rk[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] += buc[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">            sa[buc[rk[tp[i]]]--] = tp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="type">int</span> m = <span class="number">128</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            rk[i] = s[i], tp[i] = i;</span><br><span class="line">        <span class="built_in">radix_sort</span>(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">0</span>, w = <span class="number">1</span>; p &lt; n; m = p, w &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= w; ++i)</span><br><span class="line">                tp[++p] = n - w + i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">if</span> (sa[i] &gt; w)</span><br><span class="line">                    tp[++p] = sa[i] - w;</span><br><span class="line">            <span class="built_in">radix_sort</span>(m);</span><br><span class="line">            <span class="built_in">copy</span>(rk + <span class="number">1</span>, rk + n + <span class="number">1</span>, tp + <span class="number">1</span>);</span><br><span class="line">            rk[sa[<span class="number">1</span>]] = p = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tp[sa[i - <span class="number">1</span>]] == tp[sa[i]] &amp;&amp; tp[sa[i - <span class="number">1</span>] + w] == tp[sa[i] + w])</span><br><span class="line">                    rk[sa[i]] = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    rk[sa[i]] = ++p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k)</span><br><span class="line">                k--;</span><br><span class="line">            <span class="keyword">while</span> (s[i + k] == s[sa[rk[i] - <span class="number">1</span>] + k])</span><br><span class="line">                k++;</span><br><span class="line">            ht[i] = k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            he[i] = ht[sa[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, lg2[MAXK], mn[MAXK][LOGK];</span><br><span class="line"><span class="type">int</span> li[MAXN], ri[MAXN], id[MAXK], sz[MAXK], cnt[MAXN];</span><br><span class="line"><span class="type">char</span> s[MAXN][MAXM], str[MAXK];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">bool</span>&gt; outed;</span><br><span class="line">SuffixArray sa;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> k = lg2[r - l];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(mn[l + <span class="number">1</span>][k], mn[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; MAXK; ++i)</span><br><span class="line">        lg2[i] = (i &amp; (i - <span class="number">1</span>)) ? lg2[i - <span class="number">1</span>] : lg2[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">read</span>(n) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (tot++)</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s[i]);</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, s[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="built_in">strlen</span>(s[i]);</span><br><span class="line">            li[i] = len;</span><br><span class="line">            ri[i] = len + t - <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">copy</span>(s[i], s[i] + t, str + len);</span><br><span class="line">            str[len + t] = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">            len += t + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        str[--len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        sa.<span class="built_in">init</span>(len, str);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> p = <span class="built_in">upper_bound</span>(li + <span class="number">1</span>, li + n + <span class="number">1</span>, sa.sa[i]) - li - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (li[p] &lt;= sa.sa[i] &amp;&amp; sa.sa[i] &lt;= ri[p])</span><br><span class="line">                id[i] = p, sz[i] = ri[p] - sa.sa[i] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                id[i] = <span class="number">0</span>, sz[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">            mn[i][<span class="number">0</span>] = <span class="built_in">min</span>(&#123;sa.he[i], sz[i - <span class="number">1</span>], sz[i]&#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; LOGK; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= len; ++i) &#123;</span><br><span class="line">                mn[i][j] = <span class="built_in">min</span>(mn[i][j - <span class="number">1</span>], mn[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> cur = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fill</span>(cnt, cnt + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">1</span>; r &lt;= len; ++r) &#123;</span><br><span class="line">            <span class="keyword">while</span> (id[l] == <span class="number">0</span>)</span><br><span class="line">                ++l;</span><br><span class="line">            <span class="keyword">while</span> (id[r] == <span class="number">0</span>)</span><br><span class="line">                ++r;</span><br><span class="line">            <span class="keyword">if</span> (cnt[id[r]]++ == <span class="number">0</span>)</span><br><span class="line">                ++cur;</span><br><span class="line">            <span class="keyword">while</span> (cur &gt; n / <span class="number">2</span> + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (--cnt[id[l]] == <span class="number">0</span>)</span><br><span class="line">                    --cur;</span><br><span class="line">                ++l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r &amp;&amp; cnt[id[l]] &gt; <span class="number">1</span>)</span><br><span class="line">                --cnt[id[l]], ++l;</span><br><span class="line">            <span class="keyword">if</span> (cur == n / <span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, <span class="built_in">query</span>(l, r));</span><br><span class="line">        &#125;</span><br><span class="line">        cur = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fill</span>(cnt, cnt + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (ans == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            outed.<span class="built_in">clear</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">1</span>; r &lt;= len; ++r) &#123;</span><br><span class="line">                <span class="keyword">while</span> (id[l] == <span class="number">0</span>)</span><br><span class="line">                    ++l;</span><br><span class="line">                <span class="keyword">while</span> (id[r] == <span class="number">0</span>)</span><br><span class="line">                    ++r;</span><br><span class="line">                <span class="keyword">if</span> (cnt[id[r]]++ == <span class="number">0</span>)</span><br><span class="line">                    ++cur;</span><br><span class="line">                <span class="keyword">while</span> (cur &gt; n / <span class="number">2</span> + <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (--cnt[id[l]] == <span class="number">0</span>)</span><br><span class="line">                        --cur;</span><br><span class="line">                    ++l;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (l &lt; r &amp;&amp; cnt[id[l]] &gt; <span class="number">1</span>)</span><br><span class="line">                    --cnt[id[l]], ++l;</span><br><span class="line">                <span class="keyword">if</span> (cur == n / <span class="number">2</span> + <span class="number">1</span> &amp;&amp; <span class="built_in">query</span>(l, r) == ans) &#123;</span><br><span class="line">                    <span class="type">int</span> h = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans; ++i)</span><br><span class="line">                        h = (h * <span class="number">12345</span> + str[sa.sa[r] + i]) % <span class="number">19260817</span>;</span><br><span class="line">                    <span class="keyword">if</span> (outed[h])</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    outed[h] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans; ++i)</span><br><span class="line">                        <span class="built_in">putchar</span>(str[sa.sa[r] + i]);</span><br><span class="line">                    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">debug</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4491 [HAOI] 染色</title>
    <url>/2022/01/25/sol-p4491/</url>
    <content><![CDATA[<h2 id="P4491-HAOI-染色"><a href="#P4491-HAOI-染色" class="headerlink" title="P4491 [HAOI] 染色"></a>P4491 [HAOI] 染色</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4491">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>考虑朴素的做法。容易想到钦定$k$个颜色出现次数恰好为$S$，其他颜色随便填并容斥。求出$k \in [0, \min(m,n/2)]$即可。</p>
<script type="math/tex; mode=display">
F[k]=\binom{m}{k}\binom{n}{ks}\frac{(ks)!}{(s!)^k}(m-k)^{n-ks}</script><p>思考这样重复计算到的部分。设$G[i]$为真正的答案，那么有</p>
<script type="math/tex; mode=display">
F[k]=\sum_{i=k}^n\binom{i}{k}G[i]</script><p>使用二项式反演，得到</p>
<script type="math/tex; mode=display">
G[k]=\sum_{i=k}^n(-1)^{i-k}\binom{i}{k}F[i]</script><p>将组合数展开</p>
<script type="math/tex; mode=display">
G[k]=\sum_{i=k}^n(-1)^{i-k}\frac{i!}{k!(i-k)!}F[i]</script><p>对$1004535809$取模，你想到了什么？</p>
<script type="math/tex; mode=display">
G[k]=\frac{1}{k!}\sum_{i=k}^ni!F[i]\times\frac{(-1)^{i-k}}{(i-k)!}</script><p>于是$O(n+m\log m)$算出$F[0\cdots m]$，然后NTT做卷积差求出$G[0\cdots m]$即可。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4491.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4491</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1004535809</span>;</span><br><span class="line"><span class="keyword">namespace</span> maths &#123;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">return</span> x &gt;= MOD ? x - MOD : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    x -= y;</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">0</span> ? x + MOD : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> p = MOD)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x % p)</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            ret = ret * x % p;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(_Tp* f, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> rev[MAXN] = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">            rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">            <span class="built_in">swap</span>(f[i], f[rev[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(<span class="type">int</span>* f, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">change</span>(f, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (MOD - <span class="number">1</span>) / h);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">            <span class="type">int</span> g = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; j + h / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                <span class="type">int</span> u = f[k], t = g * f[k + h / <span class="number">2</span>] % MOD;</span><br><span class="line">                f[k] = <span class="built_in">add</span>(u, t), f[k + h / <span class="number">2</span>] = <span class="built_in">sub</span>(u, t);</span><br><span class="line">                g = g * gn % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">reverse</span>(f + <span class="number">1</span>, f + len);</span><br><span class="line">        <span class="type">int</span> inv = <span class="built_in">qpow</span>(len, MOD - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            f[i] = f[i] * inv % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;  <span class="comment">// namespace maths</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> maths;</span><br><span class="line"><span class="type">int</span> n, m, s, w[MAXN];</span><br><span class="line"><span class="type">int</span> a[MAXN], b[MAXN], f[MAXN], g[MAXN];</span><br><span class="line"><span class="type">int</span> fac[MAXM], inv[MAXM];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binom</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fac[x] * inv[y] % MOD * inv[x - y] % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m), <span class="built_in">read</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">read</span>(w[i]);</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; MAXM; ++i)</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * i % MOD;</span><br><span class="line">    inv[MAXM - <span class="number">1</span>] = <span class="built_in">qpow</span>(fac[MAXM - <span class="number">1</span>], MOD - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = MAXM - <span class="number">2</span>; ~i; --i)</span><br><span class="line">        inv[i] = inv[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % MOD;</span><br><span class="line">    <span class="type">int</span> mx = <span class="built_in">min</span>(m, n / s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= mx; ++i) &#123;</span><br><span class="line">        f[i] = <span class="built_in">binom</span>(m, i) * <span class="built_in">binom</span>(n, i * s) % MOD * fac[i * s] % MOD</span><br><span class="line">             * <span class="built_in">qpow</span>(inv[s], i) % MOD * <span class="built_in">qpow</span>(m - i, n - i * s) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= mx; ++i) &#123;</span><br><span class="line">        a[i] = fac[i] * f[i] % MOD;</span><br><span class="line">        b[i] = (i &amp; <span class="number">1</span>) ? <span class="built_in">sub</span>(MOD, inv[i]) : inv[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(a, a + mx + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (len &lt;= mx + mx + <span class="number">1</span>)</span><br><span class="line">        len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">ntt</span>(a, len, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">ntt</span>(b, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        g[i] = a[i] * b[i] % MOD;</span><br><span class="line">    <span class="built_in">ntt</span>(g, len, <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">reverse</span>(g, g + mx + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= mx; ++i)</span><br><span class="line">        g[i] = g[i] * inv[i] % MOD;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= mx; ++i)</span><br><span class="line">        ans = <span class="built_in">add</span>(ans, g[i] * w[i] % MOD);</span><br><span class="line">    <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P1501 [国家集训队] Tree II</title>
    <url>/2022/01/23/sol-p1501/</url>
    <content><![CDATA[<h2 id="P1501-国家集训队-Tree-II"><a href="#P1501-国家集训队-Tree-II" class="headerlink" title="P1501 [国家集训队] Tree II"></a>P1501 [国家集训队] Tree II</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P1501">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>一道LCT的模版题。</p>
<p>但是我竟然错了$2$次！！！</p>
<p>$4$种操作容易进行不多说，考虑维护<code>add</code>和<code>mul</code>操作，需要维护子树$size$，修改的时候要记得修改<code>val</code>而不是只修改<code>sum</code>，其他就和线段树没啥区别了。</p>
<p>相比LCT的模版，只是修改了<code>pushdown</code>和<code>getdown</code>。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P1501.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P1501</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">51061</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LCT</span> &#123;</span><br><span class="line">    <span class="type">int</span> fa[MAXN], ch[MAXN][<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> val[MAXN], sum[MAXN], siz[MAXN];</span><br><span class="line">    <span class="type">int</span> tag[MAXN], add[MAXN], mul[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> f, <span class="type">int</span> w)</span> </span>&#123; fa[x] = f, (~w) &amp;&amp; (ch[f][w] = x); &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        val[x] = sum[x] = siz[x] = mul[x] = <span class="number">1</span>;</span><br><span class="line">        tag[x] = add[x] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        siz[x] = siz[ch[x][<span class="number">0</span>]] + siz[ch[x][<span class="number">1</span>]] + <span class="number">1</span>;</span><br><span class="line">        sum[x] = (sum[ch[x][<span class="number">0</span>]] + sum[ch[x][<span class="number">1</span>]] + val[x]) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ch[fa[x]][<span class="number">0</span>] == x)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ch[fa[x]][<span class="number">1</span>] == x)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getdown</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> vm, <span class="type">int</span> va)</span> </span>&#123;</span><br><span class="line">        mul[x] = mul[x] * vm % MOD;</span><br><span class="line">        add[x] = (add[x] * vm + va) % MOD;</span><br><span class="line">        val[x] = (val[x] * vm + va) % MOD;</span><br><span class="line">        sum[x] = (sum[x] * vm + va * siz[x]) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mul[x] != <span class="number">1</span> || add[x] != <span class="number">0</span> || tag[x]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tag[x])</span><br><span class="line">                <span class="built_in">swap</span>(ch[x][<span class="number">0</span>], ch[x][<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (ch[x][<span class="number">0</span>])</span><br><span class="line">                <span class="built_in">getdown</span>(ch[x][<span class="number">0</span>], mul[x], add[x]), tag[ch[x][<span class="number">0</span>]] ^= tag[x];</span><br><span class="line">            <span class="keyword">if</span> (ch[x][<span class="number">1</span>])</span><br><span class="line">                <span class="built_in">getdown</span>(ch[x][<span class="number">1</span>], mul[x], add[x]), tag[ch[x][<span class="number">1</span>]] ^= tag[x];</span><br><span class="line">            mul[x] = <span class="number">1</span>, add[x] = tag[x] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushall</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (~<span class="built_in">get</span>(x))</span><br><span class="line">            <span class="built_in">pushall</span>(fa[x]);</span><br><span class="line">        <span class="built_in">pushdown</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> y = fa[x], z = fa[y], w = <span class="built_in">get</span>(x);</span><br><span class="line">        <span class="keyword">if</span> (~w)</span><br><span class="line">            <span class="built_in">connect</span>(ch[x][w ^ <span class="number">1</span>], y, w);</span><br><span class="line">        <span class="built_in">connect</span>(x, z, <span class="built_in">get</span>(y));</span><br><span class="line">        <span class="built_in">connect</span>(y, x, w ^ <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">pushup</span>(y);</span><br><span class="line">        <span class="built_in">pushup</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">pushall</span>(x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> f = fa[x]; f = fa[x], ~<span class="built_in">get</span>(x); <span class="built_in">rotate</span>(x))</span><br><span class="line">            <span class="keyword">if</span> (~<span class="built_in">get</span>(f))</span><br><span class="line">                <span class="built_in">rotate</span>(<span class="built_in">get</span>(f) == <span class="built_in">get</span>(x) ? f : x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">access</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> pre = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x) &#123;</span><br><span class="line">            <span class="built_in">splay</span>(x);</span><br><span class="line">            ch[x][<span class="number">1</span>] = pre;</span><br><span class="line">            <span class="built_in">pushup</span>(x);</span><br><span class="line">            pre = x;</span><br><span class="line">            x = fa[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeroot</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">access</span>(x);</span><br><span class="line">        <span class="built_in">splay</span>(x);</span><br><span class="line">        tag[x] ^= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findroot</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">access</span>(x);</span><br><span class="line">        <span class="built_in">splay</span>(x);</span><br><span class="line">        <span class="keyword">while</span> (ch[x][<span class="number">0</span>])</span><br><span class="line">            <span class="built_in">pushdown</span>(x), x = ch[x][<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">splay</span>(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">makeroot</span>(x);</span><br><span class="line">        <span class="built_in">access</span>(y);</span><br><span class="line">        <span class="built_in">splay</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">link</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">makeroot</span>(x);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">findroot</span>(y) == x)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        fa[x] = y;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">cut</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">findroot</span>(x) != <span class="built_in">findroot</span>(y))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">split</span>(x, y);</span><br><span class="line">        <span class="keyword">if</span> (fa[x] != y || ch[x][<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        fa[x] = ch[y][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, q;</span><br><span class="line">LCT lct;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        lct.<span class="built_in">clear</span>(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v);</span><br><span class="line">        lct.<span class="built_in">link</span>(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">char</span> op = <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">            <span class="type">int</span> u, v, c;</span><br><span class="line">            <span class="built_in">read</span>(u), <span class="built_in">read</span>(v), <span class="built_in">read</span>(c);</span><br><span class="line">            lct.<span class="built_in">split</span>(u, v);</span><br><span class="line">            lct.<span class="built_in">getdown</span>(v, <span class="number">1</span>, c);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            <span class="type">int</span> u1, v1, u2, v2;</span><br><span class="line">            <span class="built_in">read</span>(u1), <span class="built_in">read</span>(v1), <span class="built_in">read</span>(u2), <span class="built_in">read</span>(v2);</span><br><span class="line">            lct.<span class="built_in">cut</span>(u1, v1);</span><br><span class="line">            lct.<span class="built_in">link</span>(u2, v2);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">            <span class="type">int</span> u, v, c;</span><br><span class="line">            <span class="built_in">read</span>(u), <span class="built_in">read</span>(v), <span class="built_in">read</span>(c);</span><br><span class="line">            lct.<span class="built_in">split</span>(u, v);</span><br><span class="line">            lct.<span class="built_in">getdown</span>(v, c, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> u, v;</span><br><span class="line">            <span class="built_in">read</span>(u), <span class="built_in">read</span>(v);</span><br><span class="line">            lct.<span class="built_in">split</span>(u, v);</span><br><span class="line">            <span class="built_in">write</span>(lct.sum[v]), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P3690 【模版】动态树（Link Cut Tree）</title>
    <url>/2022/01/23/sol-p3690/</url>
    <content><![CDATA[<h2 id="P3690-【模版】动态树（Link-Cut-Tree）"><a href="#P3690-【模版】动态树（Link-Cut-Tree）" class="headerlink" title="P3690 【模版】动态树（Link Cut Tree）"></a>P3690 【模版】动态树（Link Cut Tree）</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P3690">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p><del>WC实在是太无聊子</del></p>
<p>今天是冬令营的第一天，我们来学习一下LCT吧（雾</p>
<h4 id="引入-amp-定义"><a href="#引入-amp-定义" class="headerlink" title="引入&amp;定义"></a>引入&amp;定义</h4><p>Link Cut Tree，顾名思义，就是可以动态维护树上路径权值和、树上连边与断边操作的一种数据结构。</p>
<p>说到维护树上路径权值和，首先想到的应该就是树链剖分了，一般我们会选择用$O(n \log n)$的重链剖分。但是在动态树上，重链随时会改变，使用重链剖分就不行了。</p>
<p>这种情况下，我们不得不采用更为暴力的实链剖分。不考虑各儿子的子树大小，直接随便取一个儿子与父亲连接成一条链。于是树的形态变化就不会影响复杂度。不幸的是，这样的时间复杂度是$O(n^2)$的。</p>
<p>那么有没有什么数据结构可以很好地维护这样的实链呢？考虑到一条链上的节点深度都是递增的，不妨用Splay来维护每条链，而Splay的中序遍历就是整条链从头到尾的遍历。</p>
<p>如此我们可以将一棵树（森林）转化为若干条链，每条链用Splay来维护，我们称这样形成的树叫做辅助树（森林）。如下图中的例子（原树）：</p>
<p><img src="tree-origin.png" alt="原树"></p>
<p>其中实线表示的是随机分配的实边。</p>
<p>它的辅助树形态如下：</p>
<p><img src="tree-aux.png" alt="辅助树"></p>
<p>原树中的实链都在同一棵Splay中，而原树中的虚链只有儿子指向父亲，没有父亲指向儿子。</p>
<p>注意：辅助树的指向不等于原树中的指向，辅助树的根也不等于原树的根！</p>
<h4 id="数组-amp-函数"><a href="#数组-amp-函数" class="headerlink" title="数组&amp;函数"></a>数组&amp;函数</h4><p>首先定义要用的数组：</p>
<ul>
<li><code>fa[x]</code> $x$在<strong>辅助树</strong>上的父节点</li>
<li><code>ch[x][0/1]</code> $x$在<strong>Splay</strong>中的左右儿子</li>
<li><code>val[x]</code> $x$的权值</li>
<li><code>sum[x]</code> $x$所在<strong>Splay</strong>的子树中的权值和</li>
<li><code>tag[x]</code> $x$节点的翻转标记（后面会提到）</li>
</ul>
<p>需要的函数如下：</p>
<ul>
<li><code>pushup(x)</code> 更新节点权值，不多说了</li>
<li><code>pushdown(x)</code> 下传翻转标记</li>
<li><code>pushall(x)</code> 将$x$在Splay中到根节点的路径全部下传标记</li>
<li><code>connect(x, f, w)</code> Splay操作：连接$x$为$f$的$w$儿子（$w=-1$表示虚边上的儿子）</li>
<li><code>get(x)</code> 获取$x$是哪种儿子</li>
<li><code>rotate(x)</code> Splay操作：旋转</li>
<li><code>splay(x)</code> Splay操作：旋转到根</li>
<li><code>access(x)</code> LCT的核心：将$x$与根放到同一条实链中</li>
<li><code>makeroot(x)</code> 将$x$变成原树的根</li>
<li><code>split(x, y)</code> 将$x$到$y$的路径放到同一条实链中</li>
<li><code>findroot(x)</code> 找到$x$所在实链的链头</li>
<li><code>link(x, y)</code> 连接$x$到$y$</li>
<li><code>cut(x, y)</code> 断开$x$到$y$</li>
</ul>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="pushup-x"><a href="#pushup-x" class="headerlink" title="pushup(x)"></a>pushup(x)</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新sum</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 视情况而定，本题为异或和</span></span><br><span class="line">    sum[x] = sum[ch[x][<span class="number">0</span>]] ^ sum[ch[x][<span class="number">1</span>]] ^ val[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="pushdown-x"><a href="#pushdown-x" class="headerlink" title="pushdown(x)"></a>pushdown(x)</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标记下传</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tag[x]) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(ch[x][<span class="number">0</span>], ch[x][<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (ch[x][<span class="number">0</span>])</span><br><span class="line">            tag[ch[x][<span class="number">0</span>]] ^= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ch[x][<span class="number">1</span>])</span><br><span class="line">            tag[ch[x][<span class="number">1</span>]] ^= <span class="number">1</span>;</span><br><span class="line">        tag[x] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="pushall-x"><a href="#pushall-x" class="headerlink" title="pushall(x)"></a>pushall(x)</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 递归实现即可</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushall</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (~<span class="built_in">get</span>(x))</span><br><span class="line">        <span class="built_in">pushall</span>(fa[x]);</span><br><span class="line">    <span class="built_in">pushdown</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="connect-x-f-w"><a href="#connect-x-f-w" class="headerlink" title="connect(x, f, w)"></a>connect(x, f, w)</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 压到一行</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> f, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">    fa[x] = f, (~w) &amp;&amp; (ch[f][w] = x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="get-x"><a href="#get-x" class="headerlink" title="get(x)"></a>get(x)</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个压不了</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ch[fa[x]][<span class="number">0</span>] == x)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ch[fa[x]][<span class="number">1</span>] == x)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="rotate-x"><a href="#rotate-x" class="headerlink" title="rotate(x)"></a>rotate(x)</h5><p>和普通的splay不一样了，要判断虚边</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> y = fa[x], z = fa[y], w = <span class="built_in">get</span>(x);</span><br><span class="line">    <span class="keyword">if</span> (~w)</span><br><span class="line">        <span class="built_in">connect</span>(ch[x][w ^ <span class="number">1</span>], y, w);</span><br><span class="line">    <span class="built_in">connect</span>(x, z, <span class="built_in">get</span>(y));</span><br><span class="line">    <span class="built_in">connect</span>(y, x, w ^ <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">pushup</span>(y);</span><br><span class="line">    <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="splay-x"><a href="#splay-x" class="headerlink" title="splay(x)"></a>splay(x)</h5><p>第一行要先将上方的标记都下传</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">pushall</span>(x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> f = fa[x]; f = fa[x], ~<span class="built_in">get</span>(x); <span class="built_in">rotate</span>(x))</span><br><span class="line">        <span class="keyword">if</span> (~<span class="built_in">get</span>(f))</span><br><span class="line">            <span class="built_in">rotate</span>(<span class="built_in">get</span>(f) == <span class="built_in">get</span>(x) ? f : x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="access-x"><a href="#access-x" class="headerlink" title="access(x)"></a>access(x)</h5><p><img src="tree-aux.png" alt="辅助树"></p>
<p>考虑将上图的节点$9$与根节点$1$打通。</p>
<p>因此要先将$9$转到当前splay的根（如图）。</p>
<p><img src="tree-splayed.png" alt="splay后的辅助树"></p>
<p>而根据辅助树上链的性质，$9$、$13$和$10$不应该在一条链上，于是将$9$与$13$断开成虚链（从父亲中移除指向即可），同时将下方与$x$连接的另一棵splay连接（<code>ch[x][1]:=pre</code>）。</p>
<p>以此类推，一直往上重复此操作直到根。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">access</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        <span class="built_in">splay</span>(x);</span><br><span class="line">        ch[x][<span class="number">1</span>] = pre;</span><br><span class="line">        <span class="built_in">pushup</span>(x);</span><br><span class="line">        pre = x;</span><br><span class="line">        x = fa[x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="makeroot-x"><a href="#makeroot-x" class="headerlink" title="makeroot(x)"></a>makeroot(x)</h5><p>让$x$成为新的原树的根。将$x$转到根节点的splay中，然后让$x$成为根节点。</p>
<p>但是这样一来，$x$所在的splay树就乱掉了，因为无法再保证深度递增。同时发现由于在<code>access(x)</code>之后$x$的右儿子被清空了，所以将该splay翻转就得到新的按深度递增的splay（仔细想想是不是）。于是代码就出来了：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">makeroot</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">access</span>(x);</span><br><span class="line">    <span class="built_in">splay</span>(x);</span><br><span class="line">    tag[x] ^= <span class="number">1</span>; <span class="comment">// 这是翻转的标记</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="split-x-y"><a href="#split-x-y" class="headerlink" title="split(x, y)"></a>split(x, y)</h5><p>将$x$成为原树的根（同时是该splay的深度最小节点），再将$y$与$x$打通，旋转$y$到该splay的根，显然$y$的当前$sum$值就是$x$到$y$路径的$sum$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">makeroot</span>(x);</span><br><span class="line">    <span class="built_in">access</span>(y);</span><br><span class="line">    <span class="built_in">splay</span>(y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="findroot-x"><a href="#findroot-x" class="headerlink" title="findroot(x)"></a>findroot(x)</h5><p>将$x$与根打通（<code>access(x)</code>），显然splay最左边的节点就是根了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">findroot</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">access</span>(x);</span><br><span class="line">    <span class="built_in">splay</span>(x);</span><br><span class="line">    <span class="keyword">while</span> (ch[x][<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">pushdown</span>(x), x = ch[x][<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">splay</span>(x);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="link-x-y"><a href="#link-x-y" class="headerlink" title="link(x, y)"></a>link(x, y)</h5><p>先判断$x$与$y$是否联通，类似并查集的方法。</p>
<p>然后$y$转到根，将$x$指向$y$（注意不要让父亲$y$指向儿子$x$）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">link</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">makeroot</span>(x);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">findroot</span>(y) == x)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    fa[x] = y;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="cut-x-y"><a href="#cut-x-y" class="headerlink" title="cut(x, y)"></a>cut(x, y)</h5><p>还是先判断$x$与$y$在同一个联通块。</p>
<p>将$x$到$y$的路径取出，并判断$x$与$y$是否直接连接。</p>
<p>如果直接连接，直接断开即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cut</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">findroot</span>(x) != <span class="built_in">findroot</span>(y))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">split</span>(x, y);</span><br><span class="line">    <span class="keyword">if</span> (fa[x] != y || ch[x][<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    fa[x] = ch[y][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至此，LCT的各函数实现就讲完了，下面放出一个封装好的模版：</p>
<h4 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h4><p>理论时间复杂度是$O(n \log n)$（我也不会证明），但是<strong>常数极大</strong>（听说能有$20$？），慎用。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LCT</span> &#123;</span><br><span class="line">    <span class="type">int</span> fa[MAXN], ch[MAXN][<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> val[MAXN], sum[MAXN], tag[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; sum[x] = sum[ch[x][<span class="number">0</span>]] ^ sum[ch[x][<span class="number">1</span>]] ^ val[x]; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> f, <span class="type">int</span> w)</span> </span>&#123; fa[x] = f, (~w) &amp;&amp; (ch[f][w] = x); &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ch[fa[x]][<span class="number">0</span>] == x)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ch[fa[x]][<span class="number">1</span>] == x)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tag[x]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(ch[x][<span class="number">0</span>], ch[x][<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (ch[x][<span class="number">0</span>])</span><br><span class="line">                tag[ch[x][<span class="number">0</span>]] ^= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (ch[x][<span class="number">1</span>])</span><br><span class="line">                tag[ch[x][<span class="number">1</span>]] ^= <span class="number">1</span>;</span><br><span class="line">            tag[x] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushall</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (~<span class="built_in">get</span>(x))</span><br><span class="line">            <span class="built_in">pushall</span>(fa[x]);</span><br><span class="line">        <span class="built_in">pushdown</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> y = fa[x], z = fa[y], w = <span class="built_in">get</span>(x);</span><br><span class="line">        <span class="keyword">if</span> (~w)</span><br><span class="line">            <span class="built_in">connect</span>(ch[x][w ^ <span class="number">1</span>], y, w);</span><br><span class="line">        <span class="built_in">connect</span>(x, z, <span class="built_in">get</span>(y));</span><br><span class="line">        <span class="built_in">connect</span>(y, x, w ^ <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">pushup</span>(y);</span><br><span class="line">        <span class="built_in">pushup</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">pushall</span>(x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> f = fa[x]; f = fa[x], ~<span class="built_in">get</span>(x); <span class="built_in">rotate</span>(x))</span><br><span class="line">            <span class="keyword">if</span> (~<span class="built_in">get</span>(f))</span><br><span class="line">                <span class="built_in">rotate</span>(<span class="built_in">get</span>(f) == <span class="built_in">get</span>(x) ? f : x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">access</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> pre = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x) &#123;</span><br><span class="line">            <span class="built_in">splay</span>(x);</span><br><span class="line">            ch[x][<span class="number">1</span>] = pre;</span><br><span class="line">            <span class="built_in">pushup</span>(x);</span><br><span class="line">            pre = x;</span><br><span class="line">            x = fa[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeroot</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">access</span>(x);</span><br><span class="line">        <span class="built_in">splay</span>(x);</span><br><span class="line">        tag[x] ^= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">makeroot</span>(x);</span><br><span class="line">        <span class="built_in">access</span>(y);</span><br><span class="line">        <span class="built_in">splay</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findroot</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">access</span>(x);</span><br><span class="line">        <span class="built_in">splay</span>(x);</span><br><span class="line">        <span class="keyword">while</span> (ch[x][<span class="number">0</span>])</span><br><span class="line">            <span class="built_in">pushdown</span>(x), x = ch[x][<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">splay</span>(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">link</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">makeroot</span>(x);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">findroot</span>(y) == x)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        fa[x] = y;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">cut</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">findroot</span>(x) != <span class="built_in">findroot</span>(y))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">split</span>(x, y);</span><br><span class="line">        <span class="keyword">if</span> (fa[x] != y || ch[x][<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        fa[x] = ch[y][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P3690.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P3690</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LCT</span> &#123;</span><br><span class="line">    <span class="type">int</span> fa[MAXN], ch[MAXN][<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> val[MAXN], sum[MAXN], tag[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; sum[x] = sum[ch[x][<span class="number">0</span>]] ^ sum[ch[x][<span class="number">1</span>]] ^ val[x]; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> f, <span class="type">int</span> w)</span> </span>&#123; fa[x] = f, (~w) &amp;&amp; (ch[f][w] = x); &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ch[fa[x]][<span class="number">0</span>] == x)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ch[fa[x]][<span class="number">1</span>] == x)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tag[x]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(ch[x][<span class="number">0</span>], ch[x][<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (ch[x][<span class="number">0</span>])</span><br><span class="line">                tag[ch[x][<span class="number">0</span>]] ^= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (ch[x][<span class="number">1</span>])</span><br><span class="line">                tag[ch[x][<span class="number">1</span>]] ^= <span class="number">1</span>;</span><br><span class="line">            tag[x] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushall</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (~<span class="built_in">get</span>(x))</span><br><span class="line">            <span class="built_in">pushall</span>(fa[x]);</span><br><span class="line">        <span class="built_in">pushdown</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> y = fa[x], z = fa[y], w = <span class="built_in">get</span>(x);</span><br><span class="line">        <span class="keyword">if</span> (~w)</span><br><span class="line">            <span class="built_in">connect</span>(ch[x][w ^ <span class="number">1</span>], y, w);</span><br><span class="line">        <span class="built_in">connect</span>(x, z, <span class="built_in">get</span>(y));</span><br><span class="line">        <span class="built_in">connect</span>(y, x, w ^ <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">pushup</span>(y);</span><br><span class="line">        <span class="built_in">pushup</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">pushall</span>(x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> f = fa[x]; f = fa[x], ~<span class="built_in">get</span>(x); <span class="built_in">rotate</span>(x))</span><br><span class="line">            <span class="keyword">if</span> (~<span class="built_in">get</span>(f))</span><br><span class="line">                <span class="built_in">rotate</span>(<span class="built_in">get</span>(f) == <span class="built_in">get</span>(x) ? f : x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">access</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> pre = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x) &#123;</span><br><span class="line">            <span class="built_in">splay</span>(x);</span><br><span class="line">            ch[x][<span class="number">1</span>] = pre;</span><br><span class="line">            <span class="built_in">pushup</span>(x);</span><br><span class="line">            pre = x;</span><br><span class="line">            x = fa[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeroot</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">access</span>(x);</span><br><span class="line">        <span class="built_in">splay</span>(x);</span><br><span class="line">        tag[x] ^= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">makeroot</span>(x);</span><br><span class="line">        <span class="built_in">access</span>(y);</span><br><span class="line">        <span class="built_in">splay</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findroot</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">access</span>(x);</span><br><span class="line">        <span class="built_in">splay</span>(x);</span><br><span class="line">        <span class="keyword">while</span> (ch[x][<span class="number">0</span>])</span><br><span class="line">            <span class="built_in">pushdown</span>(x), x = ch[x][<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">splay</span>(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">link</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">makeroot</span>(x);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">findroot</span>(y) == x)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        fa[x] = y;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">cut</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">findroot</span>(x) != <span class="built_in">findroot</span>(y))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">split</span>(x, y);</span><br><span class="line">        <span class="keyword">if</span> (fa[x] != y || ch[x][<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        fa[x] = ch[y][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, q;</span><br><span class="line">LCT lct;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(lct.val[i]);</span><br><span class="line">        lct.sum[i] = lct.val[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">int</span> op, x, y;</span><br><span class="line">        <span class="built_in">read</span>(op), <span class="built_in">read</span>(x), <span class="built_in">read</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">0</span>) &#123;</span><br><span class="line">            lct.<span class="built_in">split</span>(x, y);</span><br><span class="line">            <span class="built_in">write</span>(lct.sum[y]), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            lct.<span class="built_in">link</span>(x, y);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">            lct.<span class="built_in">cut</span>(x, y);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lct.val[x] = y;</span><br><span class="line">            lct.<span class="built_in">splay</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>CF297E Mystic Carvings</title>
    <url>/2022/01/21/sol-cf297e/</url>
    <content><![CDATA[<h2 id="CF297E-Mystic-Carvings"><a href="#CF297E-Mystic-Carvings" class="headerlink" title="CF297E Mystic Carvings"></a>CF297E Mystic Carvings</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/CF297E">题目链接</a></p>
<p><del>偷来hb的题（强烈安利codeforces的friends功能）</del></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>在圆中连接$3$条不在端点处相交的弦，共有以下$5$种情况：</p>
<p><img src="add.png" alt="add"></p>
<p><img src="sub.png" alt="sub"></p>
<p>那么第一行的$2$种是合法的，第二行的$3$种不合法。发现第二行的$3$种更加便于计算，于是想到用总数$\binom{n}{3}$减去不合法的。</p>
<p>第二行第一种情况，枚举中间的一条弦，预处理出每条弦的两侧不与其相交的弦的数量，计为$ls_i$和$rs_i$，第一种情况的贡献为</p>
<script type="math/tex; mode=display">
\sum_{i=1}^n ls_i \times rs_i</script><p>第二种和第三种情况可以一起考虑。还是先枚举一条弦，之后还需要一条与其相交的和一条与其不相交的就可以构造出第二种或第三种情况。同时每种情况会被计算$2$次，所以第二、三种情况的贡献为</p>
<script type="math/tex; mode=display">
\sum_{i=1}^n \frac{1}{2}(n-ls_i-rs_i-1)(ls_i+rs_i)</script><p>至于如何求出$ls_i$和$rs_i$，用树状数组和CDQ分治都可。</p>
<p>时间复杂度$O(n \log n)$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           CF297E.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/CF297E</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, id;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> line&amp; o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id &lt; o.id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, ls[MAXN], rs[MAXN], cnt[MAXN];</span><br><span class="line">line ln[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">solve1</span>(l, mid);</span><br><span class="line">    <span class="built_in">solve1</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="type">int</span> pos = l;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = mid + <span class="number">1</span>; i &lt;= r; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (pos &lt;= mid &amp;&amp; ln[pos].r &lt; ln[i].r)</span><br><span class="line">            pos++;</span><br><span class="line">        ls[ln[i].id] += pos - l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">inplace_merge</span>(ln + l, ln + mid + <span class="number">1</span>, ln + r + <span class="number">1</span>, [](<span class="type">const</span> line&amp; lhs, <span class="type">const</span> line&amp; rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.r &lt; rhs.r;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">solve2</span>(l, mid);</span><br><span class="line">    <span class="built_in">solve2</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="type">int</span> pos = l;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = mid + <span class="number">1</span>; i &lt;= r; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (pos &lt;= mid &amp;&amp; ln[pos].r &gt; ln[i].r)</span><br><span class="line">            pos++;</span><br><span class="line">        rs[ln[i].id] += pos - l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">inplace_merge</span>(ln + l, ln + mid + <span class="number">1</span>, ln + r + <span class="number">1</span>, [](<span class="type">const</span> line&amp; lhs, <span class="type">const</span> line&amp; rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.r &gt; rhs.r;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(ln[i].l), <span class="built_in">read</span>(ln[i].r);</span><br><span class="line">        <span class="keyword">if</span> (ln[i].l &gt; ln[i].r)</span><br><span class="line">            <span class="built_in">swap</span>(ln[i].l, ln[i].r);</span><br><span class="line">        ln[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(ln + <span class="number">1</span>, ln + n + <span class="number">1</span>, [](<span class="type">const</span> line&amp; lhs, <span class="type">const</span> line&amp; rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.l &gt; rhs.l;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">solve1</span>(<span class="number">1</span>, n);</span><br><span class="line">    <span class="built_in">sort</span>(ln + <span class="number">1</span>, ln + n + <span class="number">1</span>, [](<span class="type">const</span> line&amp; lhs, <span class="type">const</span> line&amp; rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.l &lt; rhs.l;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">solve2</span>(<span class="number">1</span>, n);</span><br><span class="line">    <span class="built_in">fill</span>(cnt + <span class="number">1</span>, cnt + n + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ++cnt[ln[i].r];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n + n; ++i)</span><br><span class="line">        cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        rs[ln[i].id] += cnt[ln[i].l];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fill</span>(cnt + <span class="number">1</span>, cnt + n + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ++cnt[ln[i].l];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n + n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">        cnt[i] += cnt[i + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        rs[ln[i].id] += cnt[ln[i].r];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(ln + <span class="number">1</span>, ln + n + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        ans += ls[i] * rs[i] * <span class="number">2</span>;</span><br><span class="line">        ans += (n - ls[i] - rs[i] - <span class="number">1</span>) * (ls[i] + rs[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    ans = n * (n - <span class="number">1</span>) * (n - <span class="number">2</span>) / <span class="number">6</span> - ans / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这年头OJ数组越界都不报RE报WA的吗？</p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4223 期望逆序对</title>
    <url>/2022/01/20/sol-p4223/</url>
    <content><![CDATA[<h2 id="P4223-期望逆序对"><a href="#P4223-期望逆序对" class="headerlink" title="P4223 期望逆序对"></a>P4223 期望逆序对</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4223">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>期望乘上$\binom{n}{2}^k$后，就变成了求所有情况的逆序对数量的总和。</p>
<p>考虑计算贡献。假设枚举了两个位置$i$和$j$，其变换前的序列中对应的数字为$x$和$y$，那么经过$k$次变换，在这两个位置上的数字有$7$中可能的情况：</p>
<script type="math/tex; mode=display">
\begin{matrix}
(x,y) & (y,x) & (x,t) & (y,t) & (t,x) & (t,y) & (t,t)
\end{matrix}</script><p>而这$7$种状态之间可以在$1$次变换之中相互转化，所以考虑矩阵快速幂。</p>
<p>先列出转移矩阵如下：</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
f_i(x,y) & f_i(y,x) & f_i(x,t) & f_i(y,t) & f_i(t,x) & f_i(t,y) & f_i(t,t)
\end{bmatrix} \\
\times \\
\begin{bmatrix}
\binom{n-2}{2} & 1 & n-2 & 0 & 0 & n-2 & 0 \\
1 & \binom{n-2}{2} & 0 & n-2 & n-2 & 0 & 0 \\
1 & 0 & \binom{n-2}{2}+n-3 & 1 & 1 & 0 & n-3 \\
0 & 1 & 1 & \binom{n-2}{2}+n-3 & 0 & 1 & n-3 \\
0 & 1 & 1 & 0 & \binom{n-2}{2}+n-3 & 1 & n-3 \\
1 & 0 & 0 & 1 & 1 & \binom{n-2}{2}+n-3 & n-3 \\
0 & 0 & 1 & 1 & 1 & 1 & \binom{n}{2}-4 \\
\end{bmatrix} \\
= \\
\begin{bmatrix}
f_{i+1}(x,y) & f_{i+1}(y,x) & f_{i+1}(x,t) & f_{i+1}(y,t) & f_{i+1}(t,x) & f_{i+1}(t,y) & f_{i+1}(t,t)
\end{bmatrix} \\</script><p>算出了每种情况的数量后，可以开始统计答案了。</p>
<p>考虑枚举右端点$a_j=y$，通过树状数组统计出$i<j$中$a_i<a_j$的数字个数、每个$i-1$的和以及每个$n-i-1$的和，分别计为$lt_0$，$lt_1$和$lt_2$，$i<j$中$a_i>a_j$的通过计算求出并计为$gt_0$，$gt_1$和$gt_2$。</p>
<ul>
<li>$(x,y)$: $p_0 \times gt_0$</li>
<li>$(y,x)$: $p_1 \times lt_0$</li>
<li>$(x,t)$: $p_2 \times \frac{gt_2+lt_1}{n-2}$</li>
<li>$(y,t)$: $p_3 \times \frac{lt_0(i-2)+gt_0(n-i)}{n-2}$</li>
<li>$(t,x)$: $p_4 \times \frac{gt_1+lt_2}{n-2}$</li>
<li>$(t,y)$: $p_5 \times \frac{gt_0(i-2)+lt_0(n-i)}{n-2}$</li>
</ul>
<p>$(t,t)$这种情况放在最后一起考虑，贡献为$p_6 \times \frac{1}{2}\binom{n}{2}$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4223.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4223</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binom2</span><span class="params">(<span class="type">int</span> x)</span></span>;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">MatrixType</span> &#123;</span><br><span class="line">    XY, YX, XT, YT, TX, TY, TT</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> (*a)[<span class="number">7</span>];</span><br><span class="line">    <span class="built_in">Matrix</span>() &#123; a = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">7</span>][<span class="number">7</span>] &#123;&#125;; &#125;</span><br><span class="line">    <span class="built_in">Matrix</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        a = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">7</span>][<span class="number">7</span>] &#123;</span><br><span class="line">            &#123; <span class="built_in">binom2</span>(n - <span class="number">2</span>), <span class="number">1</span>, n - <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, n - <span class="number">2</span>, <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="number">1</span>, <span class="built_in">binom2</span>(n - <span class="number">2</span>), <span class="number">0</span>, n - <span class="number">2</span>, n - <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="built_in">binom2</span>(n - <span class="number">2</span>) + n - <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, n - <span class="number">3</span> &#125;,</span><br><span class="line">            &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="built_in">binom2</span>(n - <span class="number">2</span>) + n - <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, n - <span class="number">3</span> &#125;,</span><br><span class="line">            &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="built_in">binom2</span>(n - <span class="number">2</span>) + n - <span class="number">3</span>, <span class="number">1</span>, n - <span class="number">3</span> &#125;,</span><br><span class="line">            &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="built_in">binom2</span>(n - <span class="number">2</span>) + n - <span class="number">3</span>, n - <span class="number">3</span> &#125;,</span><br><span class="line">            &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="built_in">binom2</span>(n) - <span class="number">4</span> &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; ++j)</span><br><span class="line">                a[i][j] %= MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>* <span class="keyword">operator</span>[](<span class="type">int</span> i) &#123; <span class="keyword">return</span> a[i]; &#125;</span><br><span class="line">    <span class="keyword">friend</span> Matrix <span class="keyword">operator</span>*(<span class="type">const</span> Matrix&amp; lhs, <span class="type">const</span> Matrix&amp; rhs) &#123;</span><br><span class="line">        Matrix ret;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; ++j)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">7</span>; ++k)</span><br><span class="line">                    ret.a[i][j] = <span class="built_in">add</span>(ret.a[i][j], lhs.a[i][k] * rhs.a[k][j] % MOD);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BinaryIndexTree</span> &#123;</span><br><span class="line">    <span class="type">int</span> c[MAXN], n;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123; n = m; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt;= n; i += (i &amp; -i))</span><br><span class="line">            c[i] = ::<span class="built_in">add</span>(c[i], v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x; i; i -= (i &amp; -i))</span><br><span class="line">            ret = ::<span class="built_in">add</span>(ret, c[i]);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, k, a[MAXN], p[<span class="number">7</span>], lt[<span class="number">3</span>], gt[<span class="number">3</span>], sum[<span class="number">3</span>];</span><br><span class="line">BinaryIndexTree ltr[<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">return</span> x &gt;= MOD ? x - MOD : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * y % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binom2</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * (x - <span class="number">1</span>) / <span class="number">2</span> % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x % MOD)</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            ret = ret * x % MOD;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Matrix <span class="title">qpow</span><span class="params">(Matrix x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    Matrix ret;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; ++i)</span><br><span class="line">        ret.a[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x)</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            ret = ret * x;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="function">Matrix <span class="title">base</span><span class="params">(n)</span>, ret</span>;</span><br><span class="line">    ret[<span class="number">0</span>][XY] = <span class="number">1</span>;</span><br><span class="line">    ret = ret * <span class="built_in">qpow</span>(base, k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; ++i)</span><br><span class="line">        p[i] = ret[<span class="number">0</span>][i];</span><br><span class="line">    ltr[<span class="number">0</span>].<span class="built_in">init</span>(n);</span><br><span class="line">    ltr[<span class="number">1</span>].<span class="built_in">init</span>(n);</span><br><span class="line">    ltr[<span class="number">2</span>].<span class="built_in">init</span>(n);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>, inv = <span class="built_in">qpow</span>(n - <span class="number">2</span>, MOD - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">            lt[j] = ltr[j].<span class="built_in">sum</span>(a[i]);</span><br><span class="line">            gt[j] = sum[j] - lt[j];</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(p[<span class="number">0</span>], gt[<span class="number">0</span>]));</span><br><span class="line">        ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(p[<span class="number">1</span>], lt[<span class="number">0</span>]));</span><br><span class="line">        ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(p[<span class="number">2</span>], <span class="built_in">add</span>(<span class="built_in">mul</span>(gt[<span class="number">2</span>], inv), <span class="built_in">mul</span>(lt[<span class="number">1</span>], inv))));</span><br><span class="line">        ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(p[<span class="number">3</span>], <span class="built_in">add</span>(<span class="built_in">mul</span>(lt[<span class="number">0</span>], <span class="built_in">mul</span>(i - <span class="number">2</span>, inv)), <span class="built_in">mul</span>(gt[<span class="number">0</span>], <span class="built_in">mul</span>(n - i, inv)))));</span><br><span class="line">        ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(p[<span class="number">4</span>], <span class="built_in">add</span>(<span class="built_in">mul</span>(gt[<span class="number">1</span>], inv), <span class="built_in">mul</span>(lt[<span class="number">2</span>], inv))));</span><br><span class="line">        ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(p[<span class="number">5</span>], <span class="built_in">add</span>(<span class="built_in">mul</span>(gt[<span class="number">0</span>], <span class="built_in">mul</span>(i - <span class="number">2</span>, inv)), <span class="built_in">mul</span>(lt[<span class="number">0</span>], <span class="built_in">mul</span>(n - i, inv)))));</span><br><span class="line">        ltr[<span class="number">0</span>].<span class="built_in">add</span>(a[i], <span class="number">1</span>);</span><br><span class="line">        ltr[<span class="number">1</span>].<span class="built_in">add</span>(a[i], i - <span class="number">1</span>);</span><br><span class="line">        ltr[<span class="number">2</span>].<span class="built_in">add</span>(a[i], n - i - <span class="number">1</span>);</span><br><span class="line">        sum[<span class="number">0</span>] = <span class="built_in">add</span>(sum[<span class="number">0</span>], <span class="number">1</span>);</span><br><span class="line">        sum[<span class="number">1</span>] = <span class="built_in">add</span>(sum[<span class="number">1</span>], i - <span class="number">1</span>);</span><br><span class="line">        sum[<span class="number">2</span>] = <span class="built_in">add</span>(sum[<span class="number">2</span>], n - i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(p[<span class="number">6</span>], <span class="built_in">mul</span>(<span class="built_in">binom2</span>(n), <span class="built_in">qpow</span>(<span class="number">2</span>, MOD - <span class="number">2</span>))));</span><br><span class="line">    <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P5850 calc</title>
    <url>/2022/01/20/sol-p5850/</url>
    <content><![CDATA[<h2 id="P5850-calc"><a href="#P5850-calc" class="headerlink" title="P5850 calc"></a>P5850 calc</h2><span id="more"></span>
<p><del>别做P4463，来做P5850，可以少写一个MTT</del></p>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P5850">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>首先想到能构造生成函数。</p>
<script type="math/tex; mode=display">
F(x) = \prod_{t=1}^k (1 + tx)</script><p>答案就是$n! [x^n]F(x)$，正确性显然。</p>
<p>$k$巨大（$10^9$级别），套路地将$\prod$化为$\sum$：</p>
<script type="math/tex; mode=display">
F(x) = \exp \sum_{t=1}^k \ln(1+tx)</script><p>使用麦克劳林级数将$\ln$化简：</p>
<script type="math/tex; mode=display">
F(x) = \exp \sum_{t=1}^k {\sum_{j=1}^{+\infty}(-1)^{j-1}\frac{t^jx^j}{j}} \\
\ln F(x) = \sum_{t=1}^k {\sum_{j=1}^{+\infty}(-1)^{j-1}\frac{t^jx^j}{j}} \\
[x^n] \ln F(x) = (-1)^{n-1} \frac{1}{n} \sum_{t=1}^k t^n</script><p>将$\ln F(x)$每项系数求出再进行多项式$\exp$得到$F(x)$。$\sum$左边的部分可以$O(1)$求出，右边是个自然数幂和的形式。令自然数幂和的<strong>指数生成函数</strong>为$S(x)$，则有</p>
<script type="math/tex; mode=display">
[x^n] \ln F(x) = (-1)^{n-1} \frac{n!}{n} S(n) = (-1)^{n-1} (n-1)! S(n)</script><script type="math/tex; mode=display">
S(x) = \sum_{j=0}^{+\infty} \frac{x^j}{j!} \sum_{i=1}^k i^j
= \sum_{i=1}^k \sum_{j=0}^{+\infty} \frac{i^jx^j}{j!}</script><p>发现右边一大串其实是$e^{ix}$的泰勒展开式。</p>
<script type="math/tex; mode=display">
S(x) = \sum_{i=1}^k e^{ix}</script><p>而且是个等比数列求和。</p>
<script type="math/tex; mode=display">
S(x) = \frac{e^{(k+1)x}-e^x}{e^x-1} = \frac{\exp ((k+1)x) - \exp x}{\exp x - 1}</script><p>会发现分子和分母的常数项都是$0$，而常数项为$0$的多项式没有逆，所以分子分母同时乘上$\frac{1}{x}$即可。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P5850.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P5850</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">namespace</span> fastio &#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> BUFFSIZ = <span class="number">1</span> &lt;&lt; <span class="number">21</span>;</span><br><span class="line"><span class="type">char</span> pbuf[BUFFSIZ], *pp = pbuf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fwrite</span>(pbuf, <span class="number">1</span>, BUFFSIZ, stdout), pp = pbuf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pc</span><span class="params">(<span class="type">char</span> ch)</span> </span>&#123;</span><br><span class="line">    (pp == pbuf + BUFFSIZ) ? <span class="built_in">flush</span>() : <span class="built_in">void</span>();</span><br><span class="line">    *pp++ = ch;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;  <span class="comment">// namespace fastio</span></span><br><span class="line"><span class="keyword">using</span> fastio::pc;</span><br><span class="line"><span class="keyword">using</span> fastio::flush;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">pc</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">pc</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">namespace</span> polynomial &#123;</span><br><span class="line"><span class="type">int</span> inv[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">return</span> x &gt;= MOD ? x - MOD : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    x -= y;</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">0</span> ? x + MOD : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> p = MOD)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="number">1ll</span> * x * x % p)</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            ret = <span class="number">1ll</span> * ret * x % p;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(_Tp* f, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> rev[MAXN];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = rev[<span class="number">0</span>] = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">            rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">            <span class="built_in">swap</span>(f[i], f[rev[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(<span class="type">int</span>* f, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">change</span>(f, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (MOD - <span class="number">1</span>) / h);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">            <span class="type">int</span> g = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; j + h / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                <span class="type">int</span> u = f[k], t = <span class="number">1ll</span> * g * f[k + h / <span class="number">2</span>] % MOD;</span><br><span class="line">                f[k] = <span class="built_in">add</span>(u, t), f[k + h / <span class="number">2</span>] = <span class="built_in">sub</span>(u, t);</span><br><span class="line">                g = <span class="number">1ll</span> * g * gn % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">reverse</span>(f + <span class="number">1</span>, f + len);</span><br><span class="line">        <span class="type">int</span> inv = <span class="built_in">qpow</span>(len, MOD - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            f[i] = <span class="number">1ll</span> * f[i] * inv % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">polymul</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">const</span> <span class="type">int</span>* g, <span class="type">int</span> m, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> tf[MAXN], tg[MAXN];</span><br><span class="line">    <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (len &lt; n + m - <span class="number">1</span>)</span><br><span class="line">        len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">copy</span>(f, f + n, tf);</span><br><span class="line">    <span class="built_in">fill</span>(tf + n, tf + len, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">copy</span>(g, g + m, tg);</span><br><span class="line">    <span class="built_in">fill</span>(tg + m, tg + len, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">ntt</span>(tf, len, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">ntt</span>(tg, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        tf[i] = <span class="number">1ll</span> * tf[i] * tg[i] % MOD;</span><br><span class="line">    <span class="built_in">ntt</span>(tf, len, <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">copy</span>(tf, tf + n + m - <span class="number">1</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> n + m - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">polyinv</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> tmp[MAXN];</span><br><span class="line">    <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (len &lt; n)</span><br><span class="line">        len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fill</span>(ans, ans + len + len, <span class="number">0</span>);</span><br><span class="line">    ans[<span class="number">0</span>] = <span class="built_in">qpow</span>(f[<span class="number">0</span>], MOD - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">copy</span>(f, f + h, tmp);</span><br><span class="line">        <span class="built_in">fill</span>(tmp + h, tmp + h + h, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">ntt</span>(tmp, h + h, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">ntt</span>(ans, h + h, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; h + h; ++i)</span><br><span class="line">            ans[i] = <span class="number">1ll</span> * ans[i] * (<span class="number">2</span> - <span class="number">1ll</span> * ans[i] * tmp[i] % MOD + MOD) % MOD;</span><br><span class="line">        <span class="built_in">ntt</span>(ans, h + h, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">fill</span>(ans + h, ans + h + h, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">derivation</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i)</span><br><span class="line">        ans[i] = <span class="number">1ll</span> * f[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % MOD;</span><br><span class="line">    <span class="keyword">return</span> ans[n - <span class="number">1</span>] = <span class="number">0</span>, n - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">integral</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">        ans[i] = <span class="number">1ll</span> * f[i - <span class="number">1</span>] * inv[i] % MOD;</span><br><span class="line">    <span class="keyword">return</span> ans[<span class="number">0</span>] = <span class="number">0</span>, n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ln</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> tf[MAXN], tg[MAXN];</span><br><span class="line">    <span class="built_in">derivation</span>(f, n, tf);</span><br><span class="line">    <span class="built_in">polyinv</span>(f, n, tg);</span><br><span class="line">    <span class="built_in">polymul</span>(tf, n - <span class="number">1</span>, tg, n, ans);</span><br><span class="line">    <span class="built_in">integral</span>(ans, n - <span class="number">1</span>, ans);</span><br><span class="line">    <span class="built_in">fill</span>(ans + n, ans + n + n, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exp</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> tmp[MAXN];</span><br><span class="line">    ans[<span class="number">0</span>] = <span class="number">1</span>, ans[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= (n &lt;&lt; <span class="number">1</span>); h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">ln</span>(ans, h, tmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; h; ++i)</span><br><span class="line">            tmp[i] = <span class="built_in">add</span>(i == <span class="number">0</span>, <span class="built_in">sub</span>(f[i], tmp[i]));</span><br><span class="line">        <span class="built_in">polymul</span>(ans, h, tmp, h, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;  <span class="comment">// namespace polynomial</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> polynomial;</span><br><span class="line"><span class="type">int</span> k, m, ta[MAXN], tb[MAXN], tc[MAXN], ts[MAXN], fac[MAXN], ans[MAXN];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(k), <span class="built_in">read</span>(m);</span><br><span class="line">    fac[<span class="number">0</span>] = inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        fac[i] = <span class="number">1ll</span> * fac[i - <span class="number">1</span>] * i % MOD;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; MAXN; ++i)</span><br><span class="line">        inv[i] = <span class="number">1ll</span> * (MOD - MOD / i) * inv[MOD % i] % MOD;</span><br><span class="line">    tc[<span class="number">1</span>] = (k + <span class="number">1</span>) % MOD;</span><br><span class="line">    <span class="built_in">exp</span>(tc, m + <span class="number">2</span>, ta);</span><br><span class="line">    tc[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">exp</span>(tc, m + <span class="number">2</span>, tb);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m + <span class="number">2</span>; ++i)</span><br><span class="line">        ta[i] = <span class="built_in">sub</span>(ta[i], tb[i]);</span><br><span class="line">    tb[<span class="number">0</span>] = <span class="built_in">sub</span>(tb[<span class="number">0</span>], <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">        ta[i] = ta[i + <span class="number">1</span>], tb[i] = tb[i + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">polyinv</span>(tb, m + <span class="number">1</span>, tc);</span><br><span class="line">    <span class="built_in">polymul</span>(ta, m + <span class="number">1</span>, tc, m + <span class="number">1</span>, ts);</span><br><span class="line">    ts[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">            ts[i] = <span class="built_in">add</span>(<span class="number">0</span>, <span class="number">1ll</span> * fac[i - <span class="number">1</span>] * ts[i] % MOD);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ts[i] = <span class="built_in">sub</span>(<span class="number">0</span>, <span class="number">1ll</span> * fac[i - <span class="number">1</span>] * ts[i] % MOD);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exp</span>(ts, m + <span class="number">1</span>, ans);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">write</span>(<span class="number">1ll</span> * ans[i] * fac[i] % MOD), <span class="built_in">pc</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">flush</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>subtask1过了，subtask2一直卡常，好像常数卡到现在的$\frac{1}{4}$倍，所以不卡了，代码贴出来作为参考。</p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4726 【模版】多项式指数函数（多项式exp）</title>
    <url>/2022/01/18/sol-p4726/</url>
    <content><![CDATA[<h2 id="P4726-【模版】多项式指数函数（多项式exp）"><a href="#P4726-【模版】多项式指数函数（多项式exp）" class="headerlink" title="P4726 【模版】多项式指数函数（多项式exp）"></a>P4726 【模版】多项式指数函数（多项式exp）</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4726">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>定义：给定多项式$A(x)$，求$B(x)$使得$B(x) \equiv e^{A(x)} \pmod{x^n}$。</p>
<p>根据题目有$B(x) = e^{A(x)}$，两边同时求导：</p>
<script type="math/tex; mode=display">
\begin{aligned}
B'(x) =& e^{A(x)} \times A'(x) \\
B'(x) =& B(x) \times A'(x) \\
B(x) =& \int B(x) \times A'(x)
\end{aligned}</script><p>使用分治NTT暴力搞，$O(n \log^2 n)$（代码不贴了，毕竟不是最优）。</p>
<h4 id="牛顿迭代法"><a href="#牛顿迭代法" class="headerlink" title="牛顿迭代法"></a>牛顿迭代法</h4><p>设想我们知道一个数$a$，要求$\sqrt{a}$精确到整数。</p>
<p>首先能想到二分，但是当$a$非常大，需要二分的次数就需要$\log_2 n$次。</p>
<p>于是使用牛顿迭代法求解。设$f(x)=x^2-a$，要求的就是$f(x)$的零点。</p>
<p>假设我们求出了一个近似值$x_0$，就可以过$(x_0,f(x_0))$作$f(x)$的切线，取切线与$x$轴的交点作为新的$x_0$。这样需要的次数是远小于直接二分的。</p>
<p>具体地，当我们有一个近似值$x_0$，其关于$f(x)$的切线方程如下：</p>
<script type="math/tex; mode=display">
y=f'(x_0)(x-x_0)+f(x_0)</script><p>求出切线与$x$轴的交点$x$：</p>
<script type="math/tex; mode=display">
x=x_0-\frac{f(x_0)}{f'(x_0)}</script><p>以上是二维坐标系中的牛顿迭代，而多项式可以看成是多维坐标系中的点，总之牛顿迭代仍然使用。</p>
<p>想要求一个函数$G(x)$使得$F(G(x))\equiv 0$。</p>
<p>使用上面的式子，我们呢每次令</p>
<script type="math/tex; mode=display">
G(x)=G_0(x)-\frac{F(G_0(x))}{F'(G_0(x))}</script><p>经过严谨的证明（我不会证），每次迭代可以使精度翻倍，即当$F(G_0(x))\equiv 0 \pmod{x^\frac{n}{2}}$，迭代后$F(G(x))\equiv 0 \pmod{x^n}$。</p>
<p>带到这道题中，我们首先由</p>
<script type="math/tex; mode=display">
\begin{aligned}
B(x) \equiv e^{A(x)} &\pmod{x^n} \\
\ln B(x) \equiv A(x) &\pmod{x^n} \\
\ln B(x) - A(x) \equiv 0 &\pmod{x^n} \\
\end{aligned}</script><p>我们让$F(G(x))=\ln G(x) - A(x) \equiv 0$即可。</p>
<p>将$F(G(x))$求导，得到：</p>
<script type="math/tex; mode=display">
F'(G(x)) = \frac{1}{G(x)}</script><p>因为对于函数$F(G(x))$而言，自变量是$G(x)$而不是$x$，其中的$A(x)$相当于是常数，因而直接被忽略。</p>
<p>将导数带进上式得到：</p>
<script type="math/tex; mode=display">
\begin{aligned}
G(x) =& G_0(x) - \frac{\ln G_0(x) - A(x)}{\frac{1}{G_0(x)}} \\
=& G_0(x)(1 + A(x) - \ln G_0(x))
\end{aligned}</script><p>递归计算，边界条件是$[x^0]B(x)=1$。</p>
<p>所以时间复杂度为</p>
<script type="math/tex; mode=display">
T(n) = T(\frac{n}{2}) + O(n \log n) = O(n \log n)</script><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4726.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4726</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">namespace</span> maths &#123;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">return</span> x &gt;= MOD ? x - MOD : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    x -= y;</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">0</span> ? x + MOD : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> p = MOD)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x % p)</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            ret = ret * x % p;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(_Tp* f, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> rev[MAXN] = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">            rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">            <span class="built_in">swap</span>(f[i], f[rev[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(<span class="type">int</span>* f, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">change</span>(f, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (MOD - <span class="number">1</span>) / h);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">            <span class="type">int</span> g = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; j + h / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                <span class="type">int</span> u = f[k], t = g * f[k + h / <span class="number">2</span>] % MOD;</span><br><span class="line">                f[k] = <span class="built_in">add</span>(u, t), f[k + h / <span class="number">2</span>] = <span class="built_in">sub</span>(u, t);</span><br><span class="line">                g = g * gn % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">reverse</span>(f + <span class="number">1</span>, f + len);</span><br><span class="line">        <span class="type">int</span> inv = <span class="built_in">qpow</span>(len, MOD - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            f[i] = f[i] * inv % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">poly_multiply</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">const</span> <span class="type">int</span>* g, <span class="type">int</span> m, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> tf[MAXN] = &#123;&#125;, tg[MAXN] = &#123;&#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (len &lt; n + m - <span class="number">1</span>)</span><br><span class="line">        len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fill</span>(ans, ans + len, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">copy</span>(f, f + n, tf);</span><br><span class="line">    <span class="built_in">fill</span>(tf + n, tf + len, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">copy</span>(g, g + m, tg);</span><br><span class="line">    <span class="built_in">fill</span>(tg + m, tg + len, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">ntt</span>(tf, len, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">ntt</span>(tg, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        tf[i] = tf[i] * tg[i] % MOD;</span><br><span class="line">    <span class="built_in">ntt</span>(tf, len, <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">copy</span>(tf, tf + n + m - <span class="number">1</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">poly_inverse</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> tmp[MAXN] = &#123;&#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (len &lt; n)</span><br><span class="line">        len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fill</span>(ans, ans + len + len, <span class="number">0</span>);</span><br><span class="line">    ans[<span class="number">0</span>] = <span class="built_in">qpow</span>(f[<span class="number">0</span>], MOD - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">copy</span>(f, f + h, tmp);</span><br><span class="line">        <span class="built_in">fill</span>(tmp + h, tmp + h + h, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">ntt</span>(tmp, h + h, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">ntt</span>(ans, h + h, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; h + h; ++i)</span><br><span class="line">            ans[i] = ans[i] * (<span class="number">2</span> - ans[i] * tmp[i] % MOD + MOD) % MOD;</span><br><span class="line">        <span class="built_in">ntt</span>(ans, h + h, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">fill</span>(ans + h, ans + h + h, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">poly_derivation</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i)</span><br><span class="line">        ans[i] = f[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % MOD;</span><br><span class="line">    ans[n - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">poly_integral</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">        ans[i] = f[i - <span class="number">1</span>] * <span class="built_in">qpow</span>(i, MOD - <span class="number">2</span>) % MOD;</span><br><span class="line">    ans[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">poly_ln</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> tf[MAXN] = &#123;&#125;, tg[MAXN] = &#123;&#125;;</span><br><span class="line">    <span class="built_in">poly_derivation</span>(f, n, tf);</span><br><span class="line">    <span class="built_in">poly_inverse</span>(f, n, tg);</span><br><span class="line">    <span class="built_in">poly_multiply</span>(tf, n - <span class="number">1</span>, tg, n, ans);</span><br><span class="line">    <span class="built_in">poly_integral</span>(ans, n - <span class="number">1</span>, ans);</span><br><span class="line">    <span class="built_in">fill</span>(ans + n, ans + n + n, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">poly_exp</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> tf[MAXN] = &#123;&#125;, tg[MAXN] = &#123;&#125;;</span><br><span class="line">    ans[<span class="number">0</span>] = <span class="number">1</span>, ans[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= (n &lt;&lt; <span class="number">1</span>); h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">poly_ln</span>(ans, h, tf);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; h; ++i)</span><br><span class="line">            tf[i] = <span class="built_in">add</span>((i == <span class="number">0</span>), <span class="built_in">sub</span>(f[i], tf[i]));</span><br><span class="line">        <span class="built_in">copy</span>(ans, ans + h, tg);</span><br><span class="line">        <span class="built_in">poly_multiply</span>(tf, h, tg, h, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;  <span class="comment">// namespace maths</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> maths;</span><br><span class="line"><span class="type">int</span> n, a[MAXN], b[MAXN], c[MAXN];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="built_in">poly_exp</span>(a, n, b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">write</span>(b[i]), <span class="built_in">putchar</span>(<span class="string">&quot; \n&quot;</span>[i == n - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此后，我决定一改封装多项式的坏习惯，转而使用面向过程的函数式编程，以防止多项式传递时额外的内存开销。</p>
<p>同时，近一个月的多项式学习，让我深刻认识到自己数学知识的不足。因此，这个寒假需要做的事不言而喻。</p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4725 【模版】多项式对数函数（多项式ln）</title>
    <url>/2022/01/18/sol-p4725/</url>
    <content><![CDATA[<h2 id="P4725-【模版】多项式对数函数（多项式ln）"><a href="#P4725-【模版】多项式对数函数（多项式ln）" class="headerlink" title="P4725 【模版】多项式对数函数（多项式ln）"></a>P4725 【模版】多项式对数函数（多项式ln）</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4725">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>定义：给定多项式$A(x)$，求多项式$B(x) \equiv \ln(A(x)) \pmod{x^n}$。</p>
<p>根据题目有$B(x) = \ln(A(x))$，两边同时求导：</p>
<script type="math/tex; mode=display">
\begin{aligned}
B'(x) =& \ln'(A(x)) \times A'(x) \\
=& \frac{1}{A(x)} \times A'(x) \\
=& \frac{A'(x)}{A(x)}
\end{aligned}</script><p>于是将$A(x)$求导，再乘上$A(x)$的逆，最后做积分，就得到了$B(x)$。</p>
<p>求导和积分复杂度为$O(n)$，多项式求逆和NTT都是$O(n \log n)$，总时间复杂度$O(n \log n)$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4726.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4726</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">namespace</span> maths &#123;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">return</span> x &gt;= MOD ? x - MOD : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    x -= y;</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">0</span> ? x + MOD : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> p = MOD)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x % p)</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            ret = ret * x % p;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">inverse</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> p = MOD)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">qpow</span>(x, p - <span class="number">2</span>, p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(_Tp* f, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> rev[MAXN] = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">            rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">            <span class="built_in">swap</span>(f[i], f[rev[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(<span class="type">int</span>* f, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">change</span>(f, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (MOD - <span class="number">1</span>) / h);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">            <span class="type">int</span> g = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; j + h / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                <span class="type">int</span> u = f[k], t = g * f[k + h / <span class="number">2</span>] % MOD;</span><br><span class="line">                f[k] = <span class="built_in">add</span>(u, t), f[k + h / <span class="number">2</span>] = <span class="built_in">sub</span>(u, t);</span><br><span class="line">                g = g * gn % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">reverse</span>(f + <span class="number">1</span>, f + len);</span><br><span class="line">        <span class="type">int</span> inv = <span class="built_in">inverse</span>(len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            f[i] = f[i] * inv % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">polynomial</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[MAXN], len;</span><br><span class="line">    <span class="built_in">polynomial</span>() &#123; <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a)); &#125;</span><br><span class="line">    <span class="built_in">polynomial</span>(<span class="type">int</span> len) : <span class="built_in">len</span>(len) &#123; <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a)); &#125;</span><br><span class="line">    <span class="type">int</span> <span class="keyword">operator</span>[](<span class="type">int</span> i) <span class="type">const</span> &#123; <span class="keyword">return</span> a[i]; &#125;</span><br><span class="line">    <span class="type">int</span>&amp; <span class="keyword">operator</span>[](<span class="type">int</span> i) &#123; <span class="keyword">return</span> a[i]; &#125;</span><br><span class="line">    polynomial <span class="keyword">operator</span>*(<span class="type">const</span> polynomial&amp; o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> f[MAXN], g[MAXN];</span><br><span class="line">        <span class="function">polynomial <span class="title">ret</span><span class="params">(len + o.len - <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> slen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (slen &lt; ret.len)</span><br><span class="line">            slen &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">copy</span>(a, a + slen, f);</span><br><span class="line">        <span class="built_in">copy</span>(o.a, o.a + slen, g);</span><br><span class="line">        <span class="built_in">ntt</span>(f, slen, <span class="number">1</span>), <span class="built_in">ntt</span>(g, slen, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; slen; ++i)</span><br><span class="line">            f[i] = f[i] * g[i] % MOD;</span><br><span class="line">        <span class="built_in">ntt</span>(f, slen, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">copy</span>(f, f + slen, ret.a);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">polynomial <span class="title">inverse</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> tmp[MAXN] = &#123;&#125;;</span><br><span class="line">        <span class="type">int</span> slen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (slen &lt; len)</span><br><span class="line">            slen &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="function">polynomial <span class="title">ret</span><span class="params">(slen)</span></span>;</span><br><span class="line">        ret[<span class="number">0</span>] = maths::<span class="built_in">inverse</span>(a[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= slen; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">copy</span>(a, a + h, tmp);</span><br><span class="line">            <span class="built_in">fill</span>(tmp + h, tmp + h + h, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">ntt</span>(tmp, h + h, <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">ntt</span>(ret.a, h + h, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; h + h; ++i)</span><br><span class="line">                ret[i] = ret[i] * (<span class="number">2</span> - tmp[i] * ret[i] % MOD + MOD) % MOD;</span><br><span class="line">            <span class="built_in">ntt</span>(ret.a, h + h, <span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">fill</span>(ret.a + h, ret.a + h + h, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">polynomial <span class="title">derivation</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="function">polynomial <span class="title">ret</span><span class="params">(len - <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; ++i)</span><br><span class="line">            ret[i] = a[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % MOD;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">polynomial <span class="title">integral</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="function">polynomial <span class="title">ret</span><span class="params">(len + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">            ret[i] = a[i - <span class="number">1</span>] * maths::<span class="built_in">inverse</span>(i) % MOD;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">polynomial <span class="title">ln</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">derivation</span>() * <span class="built_in">inverse</span>()).<span class="built_in">integral</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;  <span class="comment">// namespace maths</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> maths;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">polynomial a;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    a.len = n;</span><br><span class="line">    a = a.<span class="built_in">ln</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">write</span>(a[i]), <span class="built_in">putchar</span>(<span class="string">&quot; \n&quot;</span>[i == n - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4002 生成树计数</title>
    <url>/2022/01/17/sol-p4002/</url>
    <content><![CDATA[<h2 id="P4002-生成树计数"><a href="#P4002-生成树计数" class="headerlink" title="P4002 生成树计数"></a>P4002 生成树计数</h2><p><del>黑，真$^{\text{TM}}$的黑啊（指题目的颜色）</del></p>
<span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4002">题目链接</a></p>
<h3 id="前置知识：求数列幂和"><a href="#前置知识：求数列幂和" class="headerlink" title="前置知识：求数列幂和"></a>前置知识：求数列幂和</h3><p>给定序列${a<em>n}$，对于$0\le t \le k$，求$\sum\limits</em>{i=1}^n a_i^t$。</p>
<p>先写出幂次和所求值之间的生成函数：</p>
<script type="math/tex; mode=display">
\begin{aligned}
F(x) =& \sum_{t=0}{\sum_{i=1}^{n}{a_i^t x^t}} \\
=& \sum_{i=1}^{n}{\frac{1}{1-a_ix}}
\end{aligned}</script><p>不妨设$G(x)=\sum\limits_{i=1}^{n}(\ln’(1-a_ix))$，则有</p>
<script type="math/tex; mode=display">
\begin{aligned}
G(x) =& \sum_{i=1}^n(\ln'(1-a_ix)) \\
=& -\sum_{i=1}^n\frac{a_i}{1-a_ix}
\end{aligned}</script><p>于是求出$G(x)$后可以很容易地求出$F(x)$。思考如何求$G(x)$：</p>
<script type="math/tex; mode=display">
\begin{aligned}
G(x) =& \sum_{i=1}^n(\ln'(1-a_ix)) \\
=& \left(\sum_{i=1}^n\ln(1-a_ix)\right)' \\
=& \left(\ln(\prod_{i=1}^n(1-a_ix))\right)'
\end{aligned}</script><p>使用分治FFT求出$\prod\limits_{i=1}^n(1-a_ix)$，再$\ln$和求导，求出$G(x)$和$F(x)$，时间复杂度$O(n \log^2 n)$。</p>
<h3 id="多项式-ln-mid-exp"><a href="#多项式-ln-mid-exp" class="headerlink" title="多项式$\ln \mid \exp$"></a>多项式$\ln \mid \exp$</h3><p>见<a href="/2022/01/18/sol-p4725/" title="P4725 【模版】多项式对数函数（多项式ln）">P4725 【模版】多项式对数函数（多项式ln）</a>和<a href="/2022/01/18/sol-p4726/" title="P4726 【模版】多项式指数函数（多项式exp）">P4726 【模版】多项式指数函数（多项式exp）</a>。</p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>首先，你需要想到使用<a href="https://oi-wiki.org/graph/prufer/">prufer序列</a>来进行树形态的枚举并计算贡献。</p>
<p>根据prufer序列的定义，一棵$n$个节点的树共有$n^{n-2}$种不同的形态。</p>
<p>我们计算答案时需要的是每个节点的度$deg_u$。</p>
<p>为了方便设$d_u=deg_u-1$，$d_u$的实际意义是$u$在prufer序列中的出现次数。</p>
<p>所以枚举$\sum d_i=n-2$，然后prufer序列的$n-2$个数字排列共$(n-2)!$种情况。于是乎</p>
<script type="math/tex; mode=display">
\begin{aligned}
ans =& \sum_T val(T) \\
=& \sum_T \left(\prod_{i=1}^ndeg_i^m\right) \left(\sum_{i=1}^ndeg_i^m\right) \\
=& \sum_{\sum d_i=n-2}(n-2)!\left(\prod_{i=1}^n(d_i+1)^m\right) \left(\sum_{i=1}^n(d_i+1)^m\right) \left(\prod_{i=1}^n\frac{a_i^{d_i+1}}{d_i!}\right) \\
=& (n-2)! \prod_{i=1}^na_i \sum_{\sum d_i=n-2} \left(\prod_{i=1}^n\frac{a_i^{d_i}}{d_i!}(d_i+1)^m\right) \left(\sum_{i=1}^n(d_i+1)^m\right)
\end{aligned}</script><p>左边两项定值先不管，右边几项如下：</p>
<script type="math/tex; mode=display">
\sum_{\sum d_i=n-2} \sum_{i=1}^{n}{\frac{a_i^{d_i}}{d_i!}(d_i+1)^{2m} \prod_{j \neq i}{\frac{a_j^{d_j}}{d_j!}(d_j+1)^m}}</script><p>构造两个多项式$A(x)$和$B(x)$：</p>
<script type="math/tex; mode=display">
\begin{aligned}
A(x)=\sum_i\frac{(i+1)^{2m}x^i}{i!} \\
B(x)=\sum_i\frac{(i+1)^mx^i}{i!}
\end{aligned}</script><p>则有</p>
<script type="math/tex; mode=display">
\begin{aligned}
F(x) =& \sum_{i=1}^{n}{A(a_ix) \prod_{j\neq i}B(a_jx)} \\
=& \sum_{i=1}^{n}{\frac{A(a_ix)}{B(a_ix)} \prod_{j=1}^{n}B(a_jx)} \\
=& \sum_{i=1}^{n}{\frac{A(a_ix)}{B(a_ix)} \exp\left(\sum_{j=1}^{n}\ln(B(a_jx))\right)}
\end{aligned}</script><p>当我们求出$\frac{A(x)}{B(x)}$和$\ln(B(x))$以后，要想求出$\sum\limits<em>i \frac{A(a_ix)}{B(a_ix)}$和$\sum\limits_i \ln(B(a_ix))$，则需要将每项系数乘上$\sum\limits</em>{i=1}^na_i^k$，用前置知识中的方法分治计算。</p>
<p>总的时间复杂度为$O(n \log^2 n)$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4002.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4002</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1</span> &lt;&lt; <span class="number">17</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">namespace</span> maths &#123;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">return</span> x &gt;= MOD ? x - MOD : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    x -= y;</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">0</span> ? x + MOD : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> p = MOD)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x % p)</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            ret = ret * x % p;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(_Tp* f, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> rev[MAXN] = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">            rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">            <span class="built_in">swap</span>(f[i], f[rev[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(<span class="type">int</span>* f, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">change</span>(f, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (MOD - <span class="number">1</span>) / h);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">            <span class="type">int</span> g = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; j + h / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                <span class="type">int</span> u = f[k], t = g * f[k + h / <span class="number">2</span>] % MOD;</span><br><span class="line">                f[k] = <span class="built_in">add</span>(u, t), f[k + h / <span class="number">2</span>] = <span class="built_in">sub</span>(u, t);</span><br><span class="line">                g = g * gn % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">reverse</span>(f + <span class="number">1</span>, f + len);</span><br><span class="line">        <span class="type">int</span> inv = <span class="built_in">qpow</span>(len, MOD - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            f[i] = f[i] * inv % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">poly_multiply</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">const</span> <span class="type">int</span>* g, <span class="type">int</span> m, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> tf[MAXN] = &#123;&#125;, tg[MAXN] = &#123;&#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (len &lt; n + m - <span class="number">1</span>)</span><br><span class="line">        len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">copy</span>(f, f + n, tf);</span><br><span class="line">    <span class="built_in">fill</span>(tf + n, tf + len, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">copy</span>(g, g + m, tg);</span><br><span class="line">    <span class="built_in">fill</span>(tg + m, tg + len, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">fill</span>(ans, ans + len, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">ntt</span>(tf, len, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">ntt</span>(tg, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        tf[i] = tf[i] * tg[i] % MOD;</span><br><span class="line">    <span class="built_in">ntt</span>(tf, len, <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">copy</span>(tf, tf + n + m - <span class="number">1</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">poly_inverse</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> tmp[MAXN] = &#123;&#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (len &lt; n)</span><br><span class="line">        len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fill</span>(ans, ans + len + len, <span class="number">0</span>);</span><br><span class="line">    ans[<span class="number">0</span>] = <span class="built_in">qpow</span>(f[<span class="number">0</span>], MOD - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">copy</span>(f, f + h, tmp);</span><br><span class="line">        <span class="built_in">fill</span>(tmp + h, tmp + h + h, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">ntt</span>(tmp, h + h, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">ntt</span>(ans, h + h, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; h + h; ++i)</span><br><span class="line">            ans[i] = ans[i] * (<span class="number">2</span> - ans[i] * tmp[i] % MOD + MOD) % MOD;</span><br><span class="line">        <span class="built_in">ntt</span>(ans, h + h, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">fill</span>(ans + h, ans + h + h, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">poly_derivation</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i)</span><br><span class="line">        ans[i] = f[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % MOD;</span><br><span class="line">    ans[n - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">poly_integral</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">        ans[i] = f[i - <span class="number">1</span>] * <span class="built_in">qpow</span>(i, MOD - <span class="number">2</span>) % MOD;</span><br><span class="line">    ans[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">poly_ln</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> tf[MAXN] = &#123;&#125;, tg[MAXN] = &#123;&#125;;</span><br><span class="line">    <span class="built_in">poly_derivation</span>(f, n, tf);</span><br><span class="line">    <span class="built_in">poly_inverse</span>(f, n, tg);</span><br><span class="line">    <span class="built_in">poly_multiply</span>(tf, n - <span class="number">1</span>, tg, n, ans);</span><br><span class="line">    <span class="built_in">poly_integral</span>(ans, n - <span class="number">1</span>, ans);</span><br><span class="line">    <span class="built_in">fill</span>(ans + n, ans + n + n, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">poly_exp</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> tf[MAXN] = &#123;&#125;, tg[MAXN] = &#123;&#125;;</span><br><span class="line">    ans[<span class="number">0</span>] = <span class="number">1</span>, ans[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= (n &lt;&lt; <span class="number">1</span>); h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">poly_ln</span>(ans, h, tf);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; h; ++i)</span><br><span class="line">            tf[i] = <span class="built_in">add</span>((i == <span class="number">0</span>), <span class="built_in">sub</span>(f[i], tf[i]));</span><br><span class="line">        <span class="built_in">copy</span>(ans, ans + h, tg);</span><br><span class="line">        <span class="built_in">poly_multiply</span>(tf, h, tg, h, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;  <span class="comment">// namespace maths</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> maths;</span><br><span class="line"><span class="type">int</span> n, m, a[MAXN], ta[MAXN], tb[MAXN], tc[MAXN], ts[MAXN];</span><br><span class="line"><span class="type">int</span> fac[MAXN], inv[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> cl, <span class="type">int</span> cr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l + <span class="number">1</span> == r) &#123;</span><br><span class="line">        ts[cl] = <span class="number">1</span>, ts[cl + <span class="number">1</span>] = <span class="built_in">sub</span>(<span class="number">0</span>, a[l]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, cmid = (cl + cr) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">solve</span>(l, mid, cl, cmid);</span><br><span class="line">    <span class="built_in">solve</span>(mid, r, cmid, cr);</span><br><span class="line">    <span class="built_in">poly_multiply</span>(ts + cl, cmid - cl, ts + cmid, cr - cmid, ts + cl);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * i % MOD;</span><br><span class="line">    inv[n] = <span class="built_in">qpow</span>(fac[n], MOD - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        inv[i] = inv[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % MOD;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (len &lt;= n)</span><br><span class="line">        len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        ta[i] = <span class="built_in">qpow</span>(i + <span class="number">1</span>, m + m) * inv[i] % MOD;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        tb[i] = <span class="built_in">qpow</span>(i + <span class="number">1</span>, m) * inv[i] % MOD;</span><br><span class="line">    <span class="built_in">poly_inverse</span>(tb, len, tc);</span><br><span class="line">    <span class="built_in">poly_multiply</span>(ta, len, tc, len, ta);</span><br><span class="line">    <span class="built_in">poly_ln</span>(tb, len, tc);</span><br><span class="line">    <span class="built_in">copy</span>(tc, tc + len, tb);</span><br><span class="line">    <span class="built_in">solve</span>(<span class="number">0</span>, len, <span class="number">0</span>, len &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">poly_ln</span>(ts, len, ts);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ts[i] = <span class="built_in">sub</span>(<span class="number">0</span>, ts[i] * i % MOD);</span><br><span class="line">    ts[<span class="number">0</span>] = n;</span><br><span class="line">    <span class="built_in">fill</span>(ts + n, ts + len, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        ta[i] = ta[i] * ts[i] % MOD;</span><br><span class="line">        tb[i] = tb[i] * ts[i] % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">poly_exp</span>(tb, len, tc);</span><br><span class="line">    <span class="built_in">poly_multiply</span>(ta, len, tc, len, ta);</span><br><span class="line">    <span class="type">int</span> ans = fac[n - <span class="number">2</span>] * ta[n - <span class="number">2</span>] % MOD;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ans = ans * a[i] % MOD;</span><br><span class="line">    <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>Live2D 搭建</title>
    <url>/2022/01/15/extra-blog-live2d/</url>
    <content><![CDATA[<h2 id="Live2D-搭建"><a href="#Live2D-搭建" class="headerlink" title="Live2D 搭建"></a>Live2D 搭建</h2><p>一日闲来无事，忽觉Live2D。网上找教程，却嫌不够详细。奈何？奈何？只得自己摸索。</p>
<span id="more"></span>
<p><del>写的什么烂诗</del></p>
<hr>
<h3 id="初级"><a href="#初级" class="headerlink" title="初级"></a>初级</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>这是最基础的Live2D，完成后只有一个人物在网页上，没有对话功能。</p>
<p>且<strong>初级与中级、高级之间没有任何联系</strong>，如果想要更好的效果，请<strong>跳过初级教程</strong>。</p>
<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><p>先安装<code>hexo-helper-live2d</code>插件。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>
<p>然后到<a href="https://github.com/xiazeyu/live2d-widget-models">这里</a>找一个你喜欢的Live2D模型进行安装。如选择了<code>live2d-widget-model-wanko</code>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-wanko <span class="comment"># 没有 --save</span></span><br></pre></td></tr></table></figure>
<p>然后到<strong>根目录</strong>的<code>_config.yml</code>中添加配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Live2D</span></span><br><span class="line"><span class="comment">## https://github.com/EYHN/hexo-helper-live2d</span></span><br><span class="line"><span class="comment">## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#enable: false</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span> <span class="comment"># 默认</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span> <span class="comment"># 插件在站点上的根目录(相对路径)</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span> <span class="comment"># 脚本文件相对与插件根目录路径</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span> <span class="comment"># 模型文件相对与插件根目录路径</span></span><br><span class="line">  <span class="comment"># scriptFrom: jsdelivr # jsdelivr CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: unpkg # unpkg CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span> <span class="comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">false</span> <span class="comment"># 调试, 是否在控制台输出日志</span></span><br><span class="line">  <span class="string">model</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-wanko</span> <span class="comment"># 替换成你的模型名</span></span><br><span class="line">    <span class="comment"># use: live2d-widget-model-wanko # npm-module package name</span></span><br><span class="line">    <span class="comment"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span></span><br><span class="line">    <span class="comment"># use: ./wives/wanko # 相对于博客根目录的路径</span></span><br><span class="line">    <span class="comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">145</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">315</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span> <span class="comment"># 是否在移动设备上显示</span></span><br><span class="line">    <span class="attr">scale:</span> <span class="number">0.5</span> <span class="comment"># 移动设备上的缩放       </span></span><br><span class="line">  <span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacityDefault:</span> <span class="number">0.7</span></span><br><span class="line">    <span class="attr">opacityOnHover:</span> <span class="number">0.8</span></span><br></pre></td></tr></table></figure>
<p>运行<code>hexo c &amp;&amp; hexo g &amp;&amp; hexo s</code>，就可以在本地看到Live2D模型了。</p>
<hr>
<h3 id="中级"><a href="#中级" class="headerlink" title="中级"></a>中级</h3><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><p>阅读高级教程之前，请先阅读中级教程。</p>
<h4 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h4><p>先关闭<code>hexo-helper-live2d</code>（如果已经按照初级教程开启过的话）：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-helper-live2d</span><br><span class="line">npm uninstall live2d-widget-model-wanko <span class="comment"># 替换成你的模型名</span></span><br></pre></td></tr></table></figure>
<p>克隆<a href="https://github.com/stevenjoezhang/live2d-widget">live2d-widget</a>到本地<code>themes/next/live2d-widget</code>（我这里是<code>next</code>主题）中：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/stevenjoezhang/live2d-widget.git</span><br></pre></td></tr></table></figure>
<p>修改<code>next</code>主题配置文件：</p>
<p>打开<code>themes/next/layout/_layout.swig</code>，在<code>&lt;footer&gt;</code>标签中添加以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Live2D --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/jquery@3.3.1/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/live2d-widget/autoload.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>并在文件的<code>&lt;head&gt;</code>标签中添加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后重新生成并运行。</p>
<hr>
<h3 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h3><h3 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h3><p>相比中级，增加了换装功能。</p>
<h3 id="操作-2"><a href="#操作-2" class="headerlink" title="操作"></a>操作</h3><p><strong>先按照中级完成操作</strong></p>
<p>打开<code>themes/next/layout/_layout.swig</code>，在<code>&lt;footer&gt;</code>标签中的<code>&lt;script src=&quot;/live2d-widget/autoload.js&gt;</code>之前的部分添加<code>jquery</code>和<code>jquery-ui</code>，代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/jquery@3.3.1/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/jquery-ui-dist@1.12.1/jquery-ui.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改<code>themes/next/live2d-widget/autoload.js</code>，删掉原有内容替换如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加载 CSS</span></span><br><span class="line">$(<span class="string">&quot;&lt;link&gt;&quot;</span>).<span class="title function_">attr</span>(&#123;<span class="attr">href</span>: <span class="string">&quot;/live2d-widget/waifu.css&quot;</span>, <span class="attr">rel</span>: <span class="string">&quot;stylesheet&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;text/css&quot;</span>&#125;).<span class="title function_">appendTo</span>(<span class="string">&#x27;head&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入 DIV</span></span><br><span class="line">$(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">append</span>(<span class="string">&#x27;&lt;div class=&quot;waifu&quot;&gt;&lt;div class=&quot;waifu-tips&quot;&gt;&lt;/div&gt;&lt;canvas id=&quot;live2d&quot; class=&quot;live2d&quot;&gt;&lt;/canvas&gt;&lt;div class=&quot;waifu-tool&quot;&gt;&lt;span class=&quot;fui-home&quot;&gt;&lt;/span&gt; &lt;span class=&quot;fui-chat&quot;&gt;&lt;/span&gt; &lt;span class=&quot;fui-eye&quot;&gt;&lt;/span&gt; &lt;span class=&quot;fui-user&quot;&gt;&lt;/span&gt; &lt;span class=&quot;fui-photo&quot;&gt;&lt;/span&gt; &lt;span class=&quot;fui-info-circle&quot;&gt;&lt;/span&gt; &lt;span class=&quot;fui-cross&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载 JS</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">	<span class="attr">url</span>: <span class="string">&#x27;/live2d-widget/waifu-tips.js&#x27;</span>,</span><br><span class="line">	<span class="attr">dataType</span>:<span class="string">&quot;script&quot;</span>,</span><br><span class="line">	<span class="attr">cache</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="attr">async</span>: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">	<span class="attr">url</span>: <span class="string">&#x27;/live2d-widget/live2d.min.js&#x27;</span>,</span><br><span class="line">	<span class="attr">dataType</span>:<span class="string">&quot;script&quot;</span>,</span><br><span class="line">	<span class="attr">cache</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="attr">async</span>: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化看板娘，加载 waifu-tips.json</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 可直接修改部分参数 */</span></span><br><span class="line">live2d_settings[<span class="string">&#x27;modelId&#x27;</span>] = <span class="number">1</span>;                  <span class="comment">// 默认模型 ID</span></span><br><span class="line">live2d_settings[<span class="string">&#x27;modelTexturesId&#x27;</span>] = <span class="number">88</span>;          <span class="comment">// 默认材质 ID</span></span><br><span class="line"><span class="comment">/* 在 initModel 前添加 */</span></span><br><span class="line"><span class="title function_">initModel</span>(<span class="string">&#x27;/live2d-widget/waifu-tips.json&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>修改<code>themes/next/live2d-widget/waifu-tips.js</code>，删掉原有内容替换如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">live2d_settings</span> = <span class="title class_">Array</span>(); <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        く__,.ヘヽ.　　　　/　,ー､ 〉</span></span><br><span class="line"><span class="comment">        　　　　　＼ &#x27;, !-─‐-i　/　/´</span></span><br><span class="line"><span class="comment">        　　　 　 ／｀ｰ&#x27;　　　 L/／｀ヽ､            Live2D 看板娘 参数设置</span></span><br><span class="line"><span class="comment">        　　 　 /　 ／,　 /|　 ,　 ,　　　 &#x27;,          Version 1.4.2</span></span><br><span class="line"><span class="comment">        　　　ｲ 　/ /-‐/　ｉ　L_ ﾊ ヽ!　 i             Update 2018.11.12</span></span><br><span class="line"><span class="comment">        　　　 ﾚ ﾍ 7ｲ｀ﾄ　 ﾚ&#x27;ｧ-ﾄ､!ハ|　 |  </span></span><br><span class="line"><span class="comment">        　　　　 !,/7 &#x27;0&#x27;　　 ´0iソ| 　 |　　　</span></span><br><span class="line"><span class="comment">        　　　　 |.从&quot;　　_　　 ,,,, / |./ 　 |    网页添加 Live2D 看板娘</span></span><br><span class="line"><span class="comment">        　　　　 ﾚ&#x27;| i＞.､,,__　_,.イ / 　.i 　|       https://yaoxi-std.github.io/2022/01/15/extra-blog-live2d/</span></span><br><span class="line"><span class="comment">        　　　　　 ﾚ&#x27;| | / k_７_/ﾚ&#x27;ヽ,　ﾊ.　|           </span></span><br><span class="line"><span class="comment">        　　　　　　 | |/i 〈|/　 i　,.ﾍ |　i　|    Thanks</span></span><br><span class="line"><span class="comment">        　　　　　　.|/ /　ｉ： 　 ﾍ!　　＼　|          journey-ad / https://github.com/journey-ad/live2d_src</span></span><br><span class="line"><span class="comment">        　　　 　 　 kヽ&gt;､ﾊ 　 _,.ﾍ､ 　 /､!            xiazeyu / https://github.com/xiazeyu/live2d-widget.js</span></span><br><span class="line"><span class="comment">        　　　　　　 !&#x27;〈//｀Ｔ´&#x27;, ＼ ｀&#x27;7&#x27;ｰr&#x27;         Live2d Cubism SDK WebGL 2.1 Projrct &amp; All model authors.</span></span><br><span class="line"><span class="comment">        　　　　　　 ﾚ&#x27;ヽL__|___i,___,ンﾚ|ノ           fghrsh / https://github.com/fghrsh/live2d_api</span></span><br><span class="line"><span class="comment">        　　　　　 　　　ﾄ-,/　|___./</span></span><br><span class="line"><span class="comment">        　　　　　 　　　&#x27;ｰ&#x27;　　!_,.:*********************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 后端接口</span></span><br><span class="line">live2d_settings[<span class="string">&quot;modelAPI&quot;</span>] = <span class="string">&quot;//live2d.fghrsh.net/api/&quot;</span>; <span class="comment">// 自建 API 修改这里</span></span><br><span class="line">live2d_settings[<span class="string">&quot;tipsMessage&quot;</span>] = <span class="string">&quot;waifu-tips.json&quot;</span>; <span class="comment">// 同目录下可省略路径</span></span><br><span class="line">live2d_settings[<span class="string">&quot;hitokotoAPI&quot;</span>] = <span class="string">&quot;hitokoto.cn&quot;</span>; <span class="comment">// 一言 API，可选 &#x27;lwl12.com&#x27;, &#x27;hitokoto.cn&#x27;, &#x27;jinrishici.com&#x27;(古诗词)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认模型</span></span><br><span class="line">live2d_settings[<span class="string">&quot;modelId&quot;</span>] = <span class="number">1</span>; <span class="comment">// 默认模型 ID，可在 F12 控制台找到</span></span><br><span class="line">live2d_settings[<span class="string">&quot;modelTexturesId&quot;</span>] = <span class="number">88</span>; <span class="comment">// 默认材质 ID，可在 F12 控制台找到</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 工具栏设置</span></span><br><span class="line">live2d_settings[<span class="string">&quot;showToolMenu&quot;</span>] = <span class="literal">true</span>; <span class="comment">// 显示 工具栏          ，可选 true(真), false(假)</span></span><br><span class="line">live2d_settings[<span class="string">&quot;canCloseLive2d&quot;</span>] = <span class="literal">true</span>; <span class="comment">// 显示 关闭看板娘  按钮，可选 true(真), false(假)</span></span><br><span class="line">live2d_settings[<span class="string">&quot;canSwitchModel&quot;</span>] = <span class="literal">true</span>; <span class="comment">// 显示 模型切换    按钮，可选 true(真), false(假)</span></span><br><span class="line">live2d_settings[<span class="string">&quot;canSwitchTextures&quot;</span>] = <span class="literal">true</span>; <span class="comment">// 显示 材质切换    按钮，可选 true(真), false(假)</span></span><br><span class="line">live2d_settings[<span class="string">&quot;canSwitchHitokoto&quot;</span>] = <span class="literal">true</span>; <span class="comment">// 显示 一言切换    按钮，可选 true(真), false(假)</span></span><br><span class="line">live2d_settings[<span class="string">&quot;canTakeScreenshot&quot;</span>] = <span class="literal">true</span>; <span class="comment">// 显示 看板娘截图  按钮，可选 true(真), false(假)</span></span><br><span class="line">live2d_settings[<span class="string">&quot;canTurnToHomePage&quot;</span>] = <span class="literal">true</span>; <span class="comment">// 显示 返回首页    按钮，可选 true(真), false(假)</span></span><br><span class="line">live2d_settings[<span class="string">&quot;canTurnToAboutPage&quot;</span>] = <span class="literal">true</span>; <span class="comment">// 显示 跳转关于页  按钮，可选 true(真), false(假)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模型切换模式</span></span><br><span class="line">live2d_settings[<span class="string">&quot;modelStorage&quot;</span>] = <span class="literal">true</span>; <span class="comment">// 记录 ID (刷新后恢复)，可选 true(真), false(假)</span></span><br><span class="line">live2d_settings[<span class="string">&quot;modelRandMode&quot;</span>] = <span class="string">&quot;switch&quot;</span>; <span class="comment">// 模型切换，可选 &#x27;rand&#x27;(随机), &#x27;switch&#x27;(顺序)</span></span><br><span class="line">live2d_settings[<span class="string">&quot;modelTexturesRandMode&quot;</span>] = <span class="string">&quot;rand&quot;</span>; <span class="comment">// 材质切换，可选 &#x27;rand&#x27;(随机), &#x27;switch&#x27;(顺序)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提示消息选项</span></span><br><span class="line">live2d_settings[<span class="string">&quot;showHitokoto&quot;</span>] = <span class="literal">true</span>; <span class="comment">// 显示一言</span></span><br><span class="line">live2d_settings[<span class="string">&quot;showF12Status&quot;</span>] = <span class="literal">true</span>; <span class="comment">// 显示加载状态</span></span><br><span class="line">live2d_settings[<span class="string">&quot;showF12Message&quot;</span>] = <span class="literal">false</span>; <span class="comment">// 显示看板娘消息</span></span><br><span class="line">live2d_settings[<span class="string">&quot;showF12OpenMsg&quot;</span>] = <span class="literal">true</span>; <span class="comment">// 显示控制台打开提示</span></span><br><span class="line">live2d_settings[<span class="string">&quot;showCopyMessage&quot;</span>] = <span class="literal">true</span>; <span class="comment">// 显示 复制内容 提示</span></span><br><span class="line">live2d_settings[<span class="string">&quot;showWelcomeMessage&quot;</span>] = <span class="literal">true</span>; <span class="comment">// 显示进入面页欢迎词</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//看板娘样式设置</span></span><br><span class="line">live2d_settings[<span class="string">&quot;waifuSize&quot;</span>] = <span class="string">&quot;800x800&quot;</span>; <span class="comment">// 看板娘大小，例如 &#x27;280x250&#x27;, &#x27;600x535&#x27;</span></span><br><span class="line">live2d_settings[<span class="string">&quot;waifuTipsSize&quot;</span>] = <span class="string">&quot;250x70&quot;</span>; <span class="comment">// 提示框大小，例如 &#x27;250x70&#x27;, &#x27;570x150&#x27;</span></span><br><span class="line">live2d_settings[<span class="string">&quot;waifuFontSize&quot;</span>] = <span class="string">&quot;14px&quot;</span>; <span class="comment">// 提示框字体，例如 &#x27;12px&#x27;, &#x27;30px&#x27;</span></span><br><span class="line">live2d_settings[<span class="string">&quot;waifuToolFont&quot;</span>] = <span class="string">&quot;14px&quot;</span>; <span class="comment">// 工具栏字体，例如 &#x27;14px&#x27;, &#x27;36px&#x27;</span></span><br><span class="line">live2d_settings[<span class="string">&quot;waifuToolLine&quot;</span>] = <span class="string">&quot;20px&quot;</span>; <span class="comment">// 工具栏行高，例如 &#x27;20px&#x27;, &#x27;36px&#x27;</span></span><br><span class="line">live2d_settings[<span class="string">&quot;waifuToolTop&quot;</span>] = <span class="string">&quot;0px&quot;</span>; <span class="comment">// 工具栏顶部边距，例如 &#x27;0px&#x27;, &#x27;-60px&#x27;</span></span><br><span class="line">live2d_settings[<span class="string">&quot;waifuMinWidth&quot;</span>] = <span class="string">&quot;768px&quot;</span>; <span class="comment">// 面页小于 指定宽度 隐藏看板娘，例如 &#x27;disable&#x27;(禁用), &#x27;768px&#x27;</span></span><br><span class="line">live2d_settings[<span class="string">&quot;waifuEdgeSide&quot;</span>] = <span class="string">&quot;left:0&quot;</span>; <span class="comment">// 看板娘贴边方向，例如 &#x27;left:0&#x27;(靠左 0px), &#x27;right:30&#x27;(靠右 30px)</span></span><br><span class="line">live2d_settings[<span class="string">&quot;waifuDraggable&quot;</span>] = <span class="string">&quot;disable&quot;</span>; <span class="comment">// 拖拽样式，例如 &#x27;disable&#x27;(禁用), &#x27;axis-x&#x27;(只能水平拖拽), &#x27;unlimited&#x27;(自由拖拽)</span></span><br><span class="line">live2d_settings[<span class="string">&quot;waifuDraggableRevert&quot;</span>] = <span class="literal">true</span>; <span class="comment">// 松开鼠标还原拖拽位置，可选 true(真), false(假)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他杂项设置</span></span><br><span class="line">live2d_settings[<span class="string">&quot;l2dVersion&quot;</span>] = <span class="string">&quot;1.4.2&quot;</span>; <span class="comment">// 当前版本</span></span><br><span class="line">live2d_settings[<span class="string">&quot;l2dVerDate&quot;</span>] = <span class="string">&quot;2018.11.12&quot;</span>; <span class="comment">// 版本更新日期</span></span><br><span class="line">live2d_settings[<span class="string">&quot;homePageUrl&quot;</span>] = <span class="string">&quot;auto&quot;</span>; <span class="comment">// 主页地址，可选 &#x27;auto&#x27;(自动), &#x27;&#123;URL 网址&#125;&#x27;</span></span><br><span class="line">live2d_settings[<span class="string">&quot;aboutPageUrl&quot;</span>] =</span><br><span class="line">    <span class="string">&quot;https://yaoxi-std.github.io/2022/01/15/extra-blog-live2d/&quot;</span>; <span class="comment">// 关于页地址, &#x27;&#123;URL 网址&#125;&#x27;</span></span><br><span class="line">live2d_settings[<span class="string">&quot;screenshotCaptureName&quot;</span>] = <span class="string">&quot;live2d.png&quot;</span>; <span class="comment">// 看板娘截图文件名，例如 &#x27;live2d.png&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/****************************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">render</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> tokenReg = <span class="regexp">/(\\)?\&#123;([^\&#123;\&#125;\\]+)(\\)?\&#125;/g</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">replace</span>(tokenReg, <span class="keyword">function</span> (<span class="params">word, slash1, token, slash2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (slash1 || slash2) &#123;</span><br><span class="line">            <span class="keyword">return</span> word.<span class="title function_">replace</span>(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> variables = token.<span class="title function_">replace</span>(<span class="regexp">/\s/g</span>, <span class="string">&quot;&quot;</span>).<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> currentObject = context;</span><br><span class="line">        <span class="keyword">var</span> i, length, variable;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>, length = variables.<span class="property">length</span>; i &lt; length; ++i) &#123;</span><br><span class="line">            variable = variables[i];</span><br><span class="line">            currentObject = currentObject[variable];</span><br><span class="line">            <span class="keyword">if</span> (currentObject === <span class="literal">undefined</span> || currentObject === <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> currentObject;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/x/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">empty</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> obj == <span class="string">&quot;undefined&quot;</span> || obj == <span class="literal">null</span> || obj == <span class="string">&quot;&quot;</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRandText</span>(<span class="params">text</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(text)</span><br><span class="line">        ? text[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * text.<span class="property">length</span> + <span class="number">1</span>) - <span class="number">1</span>]</span><br><span class="line">        : text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showMessage</span>(<span class="params">text, timeout, flag</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        flag ||</span><br><span class="line">        sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;waifu-text&quot;</span>) === <span class="string">&quot;&quot;</span> ||</span><br><span class="line">        sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;waifu-text&quot;</span>) === <span class="literal">null</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(text))</span><br><span class="line">            text = text[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * text.<span class="property">length</span> + <span class="number">1</span>) - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (live2d_settings.<span class="property">showF12Message</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[Message]&quot;</span>, text.<span class="title function_">replace</span>(<span class="regexp">/&lt;[^&lt;&gt;]+&gt;/g</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flag) sessionStorage.<span class="title function_">setItem</span>(<span class="string">&quot;waifu-text&quot;</span>, text);</span><br><span class="line"></span><br><span class="line">        $(<span class="string">&quot;.waifu-tips&quot;</span>).<span class="title function_">stop</span>();</span><br><span class="line">        $(<span class="string">&quot;.waifu-tips&quot;</span>).<span class="title function_">html</span>(text).<span class="title function_">fadeTo</span>(<span class="number">200</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (timeout === <span class="literal">undefined</span>) timeout = <span class="number">5000</span>;</span><br><span class="line">        <span class="title function_">hideMessage</span>(timeout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hideMessage</span>(<span class="params">timeout</span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;.waifu-tips&quot;</span>).<span class="title function_">stop</span>().<span class="title function_">css</span>(<span class="string">&quot;opacity&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (timeout === <span class="literal">undefined</span>) timeout = <span class="number">5000</span>;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        sessionStorage.<span class="title function_">removeItem</span>(<span class="string">&quot;waifu-text&quot;</span>);</span><br><span class="line">    &#125;, timeout);</span><br><span class="line">    $(<span class="string">&quot;.waifu-tips&quot;</span>).<span class="title function_">delay</span>(timeout).<span class="title function_">fadeTo</span>(<span class="number">200</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initModel</span>(<span class="params">waifuPath, type</span>) &#123;</span><br><span class="line">    <span class="comment">/* console welcome message */</span></span><br><span class="line">    <span class="built_in">eval</span>(</span><br><span class="line">        (<span class="keyword">function</span> (<span class="params">p, a, c, k, e, r</span>) &#123;</span><br><span class="line">            e = <span class="keyword">function</span> (<span class="params">c</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> (</span><br><span class="line">                    (c &lt; a ? <span class="string">&quot;&quot;</span> : <span class="title function_">e</span>(<span class="built_in">parseInt</span>(c / a))) +</span><br><span class="line">                    ((c = c % a) &gt; <span class="number">35</span> ? <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(c + <span class="number">29</span>) : c.<span class="title function_">toString</span>(<span class="number">36</span>))</span><br><span class="line">                );</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.<span class="title function_">replace</span>(<span class="regexp">/^/</span>, <span class="title class_">String</span>)) &#123;</span><br><span class="line">                <span class="keyword">while</span> (c--) r[<span class="title function_">e</span>(c)] = k[c] || <span class="title function_">e</span>(c);</span><br><span class="line">                k = [</span><br><span class="line">                    <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> r[e];</span><br><span class="line">                    &#125;,</span><br><span class="line">                ];</span><br><span class="line">                e = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;\\w+&quot;</span>;</span><br><span class="line">                &#125;;</span><br><span class="line">                c = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (c--)</span><br><span class="line">                <span class="keyword">if</span> (k[c]) p = p.<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;\\b&quot;</span> + <span class="title function_">e</span>(c) + <span class="string">&quot;\\b&quot;</span>, <span class="string">&quot;g&quot;</span>), k[c]);</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;)(</span><br><span class="line">            <span class="string">&quot;8.d(\&quot; \&quot;);8.d(\&quot;\\U,.\\y\\5.\\1\\1\\1\\1/\\1,\\u\\2 \\H\\n\\1\\1\\1\\1\\1\\b &#x27;, !-\\r\\j-i\\1/\\1/\\g\\n\\1\\1\\1 \\1 \\a\\4\\f&#x27;\\1\\1\\1 L/\\a\\4\\5\\2\\n\\1\\1 \\1 /\\1 \\a,\\1 /|\\1 ,\\1 ,\\1\\1\\1 &#x27;,\\n\\1\\1\\1\\q \\1/ /-\\j/\\1\\h\\E \\9 \\5!\\1 i\\n\\1\\1\\1 \\3 \\6 7\\q\\4\\c\\1 \\3&#x27;\\s-\\c\\2!\\t|\\1 |\\n\\1\\1\\1\\1 !,/7 &#x27;0&#x27;\\1\\1 \\X\\w| \\1 |\\1\\1\\1\\n\\1\\1\\1\\1 |.\\x\\\&quot;\\1\\l\\1\\1 ,,,, / |./ \\1 |\\n\\1\\1\\1\\1 \\3&#x27;| i\\z.\\2,,A\\l,.\\B / \\1.i \\1|\\n\\1\\1\\1\\1\\1 \\3&#x27;| | / C\\D/\\3&#x27;\\5,\\1\\9.\\1|\\n\\1\\1\\1\\1\\1\\1 | |/i \\m|/\\1 i\\1,.\\6 |\\F\\1|\\n\\1\\1\\1\\1\\1\\1.|/ /\\1\\h\\G \\1 \\6!\\1\\1\\b\\1|\\n\\1\\1\\1 \\1 \\1 k\\5&gt;\\2\\9 \\1 o,.\\6\\2 \\1 /\\2!\\n\\1\\1\\1\\1\\1\\1 !&#x27;\\m//\\4\\I\\g&#x27;, \\b \\4&#x27;7&#x27;\\J&#x27;\\n\\1\\1\\1\\1\\1\\1 \\3&#x27;\\K|M,p,\\O\\3|\\P\\n\\1\\1\\1\\1\\1 \\1\\1\\1\\c-,/\\1|p./\\n\\1\\1\\1\\1\\1 \\1\\1\\1&#x27;\\f&#x27;\\1\\1!o,.:\\Q \\R\\S\\T v\&quot;+e.V+\&quot; / W \&quot;+e.N);8.d(\&quot; \&quot;);&quot;</span>,</span><br><span class="line">            <span class="number">60</span>,</span><br><span class="line">            <span class="number">60</span>,</span><br><span class="line">            <span class="string">&quot;|u3000|uff64|uff9a|uff40|u30fd|uff8d||console|uff8a|uff0f|uff3c|uff84|log|live2d_settings|uff70|u00b4|uff49||u2010||u3000_|u3008||_|___|uff72|u2500|uff67|u30cf|u30fc||u30bd|u4ece|u30d8|uff1e|__|u30a4|k_|uff17_|u3000L_|u3000i|uff1a|u3009|uff34|uff70r|u30fdL__||___i|l2dVerDate|u30f3|u30ce|nLive2D|u770b|u677f|u5a18|u304f__|l2dVersion|FGHRSH|u00b40i&quot;</span>.<span class="title function_">split</span>(</span><br><span class="line">                <span class="string">&quot;|&quot;</span></span><br><span class="line">            ),</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            &#123;&#125;</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 判断 JQuery */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> $.ajax != <span class="string">&quot;function&quot;</span>)</span><br><span class="line">        <span class="keyword">typeof</span> jQuery.<span class="property">ajax</span> == <span class="string">&quot;function&quot;</span></span><br><span class="line">            ? (<span class="variable language_">window</span>.<span class="property">$</span> = jQuery)</span><br><span class="line">            : <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[Error] JQuery is not defined.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 加载看板娘样式 */</span></span><br><span class="line">    live2d_settings.<span class="property">waifuSize</span> = live2d_settings.<span class="property">waifuSize</span>.<span class="title function_">split</span>(<span class="string">&quot;x&quot;</span>);</span><br><span class="line">    live2d_settings.<span class="property">waifuTipsSize</span> = live2d_settings.<span class="property">waifuTipsSize</span>.<span class="title function_">split</span>(<span class="string">&quot;x&quot;</span>);</span><br><span class="line">    live2d_settings.<span class="property">waifuEdgeSide</span> = live2d_settings.<span class="property">waifuEdgeSide</span>.<span class="title function_">split</span>(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;#live2d&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;width&quot;</span>, live2d_settings.<span class="property">waifuSize</span>[<span class="number">0</span>]);</span><br><span class="line">    $(<span class="string">&quot;#live2d&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;height&quot;</span>, live2d_settings.<span class="property">waifuSize</span>[<span class="number">1</span>]);</span><br><span class="line">    $(<span class="string">&quot;.waifu-tips&quot;</span>).<span class="title function_">width</span>(live2d_settings.<span class="property">waifuTipsSize</span>[<span class="number">0</span>]);</span><br><span class="line">    $(<span class="string">&quot;.waifu-tips&quot;</span>).<span class="title function_">height</span>(live2d_settings.<span class="property">waifuTipsSize</span>[<span class="number">1</span>]);</span><br><span class="line">    $(<span class="string">&quot;.waifu-tips&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;top&quot;</span>, live2d_settings.<span class="property">waifuToolTop</span>);</span><br><span class="line">    $(<span class="string">&quot;.waifu-tips&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;font-size&quot;</span>, live2d_settings.<span class="property">waifuFontSize</span>);</span><br><span class="line">    $(<span class="string">&quot;.waifu-tool&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;font-size&quot;</span>, live2d_settings.<span class="property">waifuToolFont</span>);</span><br><span class="line">    $(<span class="string">&quot;.waifu-tool span&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;line-height&quot;</span>, live2d_settings.<span class="property">waifuToolLine</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (live2d_settings.<span class="property">waifuEdgeSide</span>[<span class="number">0</span>] == <span class="string">&quot;left&quot;</span>)</span><br><span class="line">        $(<span class="string">&quot;.waifu&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;left&quot;</span>, live2d_settings.<span class="property">waifuEdgeSide</span>[<span class="number">1</span>] + <span class="string">&quot;px&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (live2d_settings.<span class="property">waifuEdgeSide</span>[<span class="number">0</span>] == <span class="string">&quot;right&quot;</span>)</span><br><span class="line">        $(<span class="string">&quot;.waifu&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;right&quot;</span>, live2d_settings.<span class="property">waifuEdgeSide</span>[<span class="number">1</span>] + <span class="string">&quot;px&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">waifuResize</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="variable language_">window</span>).<span class="title function_">width</span>() &lt;= <span class="title class_">Number</span>(live2d_settings.<span class="property">waifuMinWidth</span>.<span class="title function_">replace</span>(<span class="string">&quot;px&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">            ? $(<span class="string">&quot;.waifu&quot;</span>).<span class="title function_">hide</span>()</span><br><span class="line">            : $(<span class="string">&quot;.waifu&quot;</span>).<span class="title function_">show</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (live2d_settings.<span class="property">waifuMinWidth</span> != <span class="string">&quot;disable&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">waifuResize</span>();</span><br><span class="line">        $(<span class="variable language_">window</span>).<span class="title function_">resize</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">waifuResize</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (live2d_settings.<span class="property">waifuDraggable</span> == <span class="string">&quot;axis-x&quot;</span>)</span><br><span class="line">            $(<span class="string">&quot;.waifu&quot;</span>).<span class="title function_">draggable</span>(&#123;</span><br><span class="line">                <span class="attr">axis</span>: <span class="string">&quot;x&quot;</span>,</span><br><span class="line">                <span class="attr">revert</span>: live2d_settings.<span class="property">waifuDraggableRevert</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (live2d_settings.<span class="property">waifuDraggable</span> == <span class="string">&quot;unlimited&quot;</span>)</span><br><span class="line">            $(<span class="string">&quot;.waifu&quot;</span>).<span class="title function_">draggable</span>(&#123; <span class="attr">revert</span>: live2d_settings.<span class="property">waifuDraggableRevert</span> &#125;);</span><br><span class="line">        <span class="keyword">else</span> $(<span class="string">&quot;.waifu&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;transition&quot;</span>, <span class="string">&quot;all .3s ease-in-out&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[Error] JQuery UI is not defined.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    live2d_settings.<span class="property">homePageUrl</span> =</span><br><span class="line">        live2d_settings.<span class="property">homePageUrl</span> == <span class="string">&quot;auto&quot;</span></span><br><span class="line">            ? <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">protocol</span> + <span class="string">&quot;//&quot;</span> + <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hostname</span> + (<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">port</span> ? <span class="string">&#x27;:&#x27;</span> + <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">port</span> : <span class="string">&#x27;&#x27;</span>) + <span class="string">&quot;/&quot;</span></span><br><span class="line">            : live2d_settings.<span class="property">homePageUrl</span>;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">protocol</span> == <span class="string">&quot;file:&quot;</span> &amp;&amp;</span><br><span class="line">        live2d_settings.<span class="property">modelAPI</span>.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">2</span>) == <span class="string">&quot;//&quot;</span></span><br><span class="line">    )</span><br><span class="line">        live2d_settings.<span class="property">modelAPI</span> = <span class="string">&quot;http:&quot;</span> + live2d_settings.<span class="property">modelAPI</span>;</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;.waifu-tool .fui-home&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//window.location = &#x27;https://www.fghrsh.net/&#x27;;</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">location</span> = live2d_settings.<span class="property">homePageUrl</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;.waifu-tool .fui-info-circle&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//window.open(&#x27;https://imjad.cn/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-02&#x27;);</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">open</span>(live2d_settings.<span class="property">aboutPageUrl</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> waifuPath == <span class="string">&quot;object&quot;</span>) <span class="title function_">loadTipsMessage</span>(waifuPath);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">cache</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">url</span>:</span><br><span class="line">                waifuPath == <span class="string">&quot;&quot;</span></span><br><span class="line">                    ? live2d_settings.<span class="property">tipsMessage</span></span><br><span class="line">                    : waifuPath.<span class="title function_">substr</span>(waifuPath.<span class="property">length</span> - <span class="number">15</span>) == <span class="string">&quot;waifu-tips.json&quot;</span></span><br><span class="line">                    ? waifuPath</span><br><span class="line">                    : waifuPath + <span class="string">&quot;waifu-tips.json&quot;</span>,</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">                <span class="title function_">loadTipsMessage</span>(result);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!live2d_settings.<span class="property">showToolMenu</span>) $(<span class="string">&quot;.waifu-tool&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">    <span class="keyword">if</span> (!live2d_settings.<span class="property">canCloseLive2d</span>) $(<span class="string">&quot;.waifu-tool .fui-cross&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">    <span class="keyword">if</span> (!live2d_settings.<span class="property">canSwitchModel</span>) $(<span class="string">&quot;.waifu-tool .fui-eye&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">    <span class="keyword">if</span> (!live2d_settings.<span class="property">canSwitchTextures</span>) $(<span class="string">&quot;.waifu-tool .fui-user&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">    <span class="keyword">if</span> (!live2d_settings.<span class="property">canSwitchHitokoto</span>) $(<span class="string">&quot;.waifu-tool .fui-chat&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">    <span class="keyword">if</span> (!live2d_settings.<span class="property">canTakeScreenshot</span>) $(<span class="string">&quot;.waifu-tool .fui-photo&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">    <span class="keyword">if</span> (!live2d_settings.<span class="property">canTurnToHomePage</span>) $(<span class="string">&quot;.waifu-tool .fui-home&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">    <span class="keyword">if</span> (!live2d_settings.<span class="property">canTurnToAboutPage</span>)</span><br><span class="line">        $(<span class="string">&quot;.waifu-tool .fui-info-circle&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (waifuPath === <span class="literal">undefined</span>) waifuPath = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> modelId = sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;modelId&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> modelTexturesId = sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;modelTexturesId&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!live2d_settings.<span class="property">modelStorage</span> || modelId == <span class="literal">null</span>) &#123;</span><br><span class="line">        modelId = live2d_settings.<span class="property">modelId</span>;</span><br><span class="line">        modelTexturesId = live2d_settings.<span class="property">modelTexturesId</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">loadModel</span>(modelId, modelTexturesId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadModel</span>(<span class="params">modelId, modelTexturesId = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (live2d_settings.<span class="property">modelStorage</span>) &#123;</span><br><span class="line">        sessionStorage.<span class="title function_">setItem</span>(<span class="string">&quot;modelId&quot;</span>, modelId);</span><br><span class="line">        sessionStorage.<span class="title function_">setItem</span>(<span class="string">&quot;modelTexturesId&quot;</span>, modelTexturesId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        live2d_settings[<span class="string">&quot;modelId&quot;</span>] = modelId;</span><br><span class="line">        live2d_settings[<span class="string">&quot;modelTexturesId&quot;</span>] = modelTexturesId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">loadlive2d</span>(</span><br><span class="line">        <span class="string">&quot;live2d&quot;</span>,</span><br><span class="line">        live2d_settings.<span class="property">modelAPI</span> + <span class="string">&quot;get/?id=&quot;</span> + modelId + <span class="string">&quot;-&quot;</span> + modelTexturesId,</span><br><span class="line">        live2d_settings.<span class="property">showF12Status</span></span><br><span class="line">            ? <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">                    <span class="string">&quot;[Status]&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;live2d&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;模型&quot;</span>,</span><br><span class="line">                    modelId + <span class="string">&quot;-&quot;</span> + modelTexturesId,</span><br><span class="line">                    <span class="string">&quot;加载完成&quot;</span></span><br><span class="line">                )</span><br><span class="line">            : <span class="literal">null</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadTipsMessage</span>(<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">waifu_tips</span> = result;</span><br><span class="line"></span><br><span class="line">    $.<span class="title function_">each</span>(result.<span class="property">mouseover</span>, <span class="keyword">function</span> (<span class="params">index, tips</span>) &#123;</span><br><span class="line">        $(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&quot;mouseover&quot;</span>, tips.<span class="property">selector</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> text = <span class="title function_">getRandText</span>(tips.<span class="property">text</span>);</span><br><span class="line">            text = text.<span class="title function_">render</span>(&#123; <span class="attr">text</span>: $(<span class="variable language_">this</span>).<span class="title function_">text</span>() &#125;);</span><br><span class="line">            <span class="title function_">showMessage</span>(text, <span class="number">3000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    $.<span class="title function_">each</span>(result.<span class="property">click</span>, <span class="keyword">function</span> (<span class="params">index, tips</span>) &#123;</span><br><span class="line">        $(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, tips.<span class="property">selector</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> text = <span class="title function_">getRandText</span>(tips.<span class="property">text</span>);</span><br><span class="line">            text = text.<span class="title function_">render</span>(&#123; <span class="attr">text</span>: $(<span class="variable language_">this</span>).<span class="title function_">text</span>() &#125;);</span><br><span class="line">            <span class="title function_">showMessage</span>(text, <span class="number">3000</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    $.<span class="title function_">each</span>(result.<span class="property">seasons</span>, <span class="keyword">function</span> (<span class="params">index, tips</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="keyword">var</span> after = tips.<span class="property">date</span>.<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> before = tips.<span class="property">date</span>.<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>] || after;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            after.<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>)[<span class="number">0</span>] &lt;= now.<span class="title function_">getMonth</span>() + <span class="number">1</span> &amp;&amp;</span><br><span class="line">            now.<span class="title function_">getMonth</span>() + <span class="number">1</span> &lt;= before.<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>)[<span class="number">0</span>] &amp;&amp;</span><br><span class="line">            after.<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>)[<span class="number">1</span>] &lt;= now.<span class="title function_">getDate</span>() &amp;&amp;</span><br><span class="line">            now.<span class="title function_">getDate</span>() &lt;= before.<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">var</span> text = <span class="title function_">getRandText</span>(tips.<span class="property">text</span>);</span><br><span class="line">            text = text.<span class="title function_">render</span>(&#123; <span class="attr">year</span>: now.<span class="title function_">getFullYear</span>() &#125;);</span><br><span class="line">            <span class="title function_">showMessage</span>(text, <span class="number">6000</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (live2d_settings.<span class="property">showF12OpenMsg</span>) &#123;</span><br><span class="line">        re.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">showMessage</span>(<span class="title function_">getRandText</span>(result.<span class="property">waifu</span>.<span class="property">console_open_msg</span>), <span class="number">5000</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (live2d_settings.<span class="property">showCopyMessage</span>) &#123;</span><br><span class="line">        $(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&quot;copy&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">showMessage</span>(<span class="title function_">getRandText</span>(result.<span class="property">waifu</span>.<span class="property">copy_message</span>), <span class="number">5000</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;.waifu-tool .fui-photo&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">showMessage</span>(<span class="title function_">getRandText</span>(result.<span class="property">waifu</span>.<span class="property">screenshot_message</span>), <span class="number">5000</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">Live2D</span>.<span class="property">captureName</span> = live2d_settings.<span class="property">screenshotCaptureName</span>;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">Live2D</span>.<span class="property">captureFrame</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;.waifu-tool .fui-cross&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        sessionStorage.<span class="title function_">setItem</span>(<span class="string">&quot;waifu-dsiplay&quot;</span>, <span class="string">&quot;none&quot;</span>);</span><br><span class="line">        <span class="title function_">showMessage</span>(<span class="title function_">getRandText</span>(result.<span class="property">waifu</span>.<span class="property">hidden_message</span>), <span class="number">1300</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            $(<span class="string">&quot;.waifu&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">        &#125;, <span class="number">1300</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">showWelcomeMessage</span> = <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> text;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> == live2d_settings.<span class="property">homePageUrl</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getHours</span>();</span><br><span class="line">            <span class="keyword">if</span> (now &gt; <span class="number">23</span> || now &lt;= <span class="number">5</span>)</span><br><span class="line">                text = <span class="title function_">getRandText</span>(result.<span class="property">waifu</span>.<span class="property">hour_tips</span>.<span class="property">t23</span> - <span class="number">5</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (now &gt; <span class="number">5</span> &amp;&amp; now &lt;= <span class="number">7</span>)</span><br><span class="line">                text = <span class="title function_">getRandText</span>(result.<span class="property">waifu</span>.<span class="property">hour_tips</span>.<span class="property">t5</span> - <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (now &gt; <span class="number">7</span> &amp;&amp; now &lt;= <span class="number">11</span>)</span><br><span class="line">                text = <span class="title function_">getRandText</span>(result.<span class="property">waifu</span>.<span class="property">hour_tips</span>.<span class="property">t7</span> - <span class="number">11</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (now &gt; <span class="number">11</span> &amp;&amp; now &lt;= <span class="number">14</span>)</span><br><span class="line">                text = <span class="title function_">getRandText</span>(result.<span class="property">waifu</span>.<span class="property">hour_tips</span>.<span class="property">t11</span> - <span class="number">14</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (now &gt; <span class="number">14</span> &amp;&amp; now &lt;= <span class="number">17</span>)</span><br><span class="line">                text = <span class="title function_">getRandText</span>(result.<span class="property">waifu</span>.<span class="property">hour_tips</span>.<span class="property">t14</span> - <span class="number">17</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (now &gt; <span class="number">17</span> &amp;&amp; now &lt;= <span class="number">19</span>)</span><br><span class="line">                text = <span class="title function_">getRandText</span>(result.<span class="property">waifu</span>.<span class="property">hour_tips</span>.<span class="property">t17</span> - <span class="number">19</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (now &gt; <span class="number">19</span> &amp;&amp; now &lt;= <span class="number">21</span>)</span><br><span class="line">                text = <span class="title function_">getRandText</span>(result.<span class="property">waifu</span>.<span class="property">hour_tips</span>.<span class="property">t19</span> - <span class="number">21</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (now &gt; <span class="number">21</span> &amp;&amp; now &lt;= <span class="number">23</span>)</span><br><span class="line">                text = <span class="title function_">getRandText</span>(result.<span class="property">waifu</span>.<span class="property">hour_tips</span>.<span class="property">t21</span> - <span class="number">23</span>);</span><br><span class="line">            <span class="keyword">else</span> text = <span class="title function_">getRandText</span>(result.<span class="property">waifu</span>.<span class="property">hour_tips</span>.<span class="property">default</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> referrer_message = result.<span class="property">waifu</span>.<span class="property">referrer_message</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">referrer</span> !== <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> referrer = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">                referrer.<span class="property">href</span> = <span class="variable language_">document</span>.<span class="property">referrer</span>;</span><br><span class="line">                <span class="keyword">var</span> domain = referrer.<span class="property">hostname</span>.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hostname</span> == referrer.<span class="property">hostname</span>)</span><br><span class="line">                    text =</span><br><span class="line">                        referrer_message.<span class="property">localhost</span>[<span class="number">0</span>] +</span><br><span class="line">                        <span class="variable language_">document</span>.<span class="property">title</span>.<span class="title function_">split</span>(referrer_message.<span class="property">localhost</span>[<span class="number">2</span>])[<span class="number">0</span>] +</span><br><span class="line">                        referrer_message.<span class="property">localhost</span>[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (domain == <span class="string">&quot;baidu&quot;</span>)</span><br><span class="line">                    text =</span><br><span class="line">                        referrer_message.<span class="property">baidu</span>[<span class="number">0</span>] +</span><br><span class="line">                        referrer.<span class="property">search</span>.<span class="title function_">split</span>(<span class="string">&quot;&amp;wd=&quot;</span>)[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>)[<span class="number">0</span>] +</span><br><span class="line">                        referrer_message.<span class="property">baidu</span>[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (domain == <span class="string">&quot;so&quot;</span>)</span><br><span class="line">                    text =</span><br><span class="line">                        referrer_message.<span class="property">so</span>[<span class="number">0</span>] +</span><br><span class="line">                        referrer.<span class="property">search</span>.<span class="title function_">split</span>(<span class="string">&quot;&amp;q=&quot;</span>)[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>)[<span class="number">0</span>] +</span><br><span class="line">                        referrer_message.<span class="property">so</span>[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (domain == <span class="string">&quot;google&quot;</span>)</span><br><span class="line">                    text =</span><br><span class="line">                        referrer_message.<span class="property">google</span>[<span class="number">0</span>] +</span><br><span class="line">                        <span class="variable language_">document</span>.<span class="property">title</span>.<span class="title function_">split</span>(referrer_message.<span class="property">google</span>[<span class="number">2</span>])[<span class="number">0</span>] +</span><br><span class="line">                        referrer_message.<span class="property">google</span>[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    $.<span class="title function_">each</span>(result.<span class="property">waifu</span>.<span class="property">referrer_hostname</span>, <span class="keyword">function</span> (<span class="params">i, val</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (i == referrer.<span class="property">hostname</span>) referrer.<span class="property">hostname</span> = <span class="title function_">getRandText</span>(val);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    text =</span><br><span class="line">                        referrer_message.<span class="property">default</span>[<span class="number">0</span>] +</span><br><span class="line">                        referrer.<span class="property">hostname</span> +</span><br><span class="line">                        referrer_message.<span class="property">default</span>[<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                text =</span><br><span class="line">                    referrer_message.<span class="property">none</span>[<span class="number">0</span>] +</span><br><span class="line">                    <span class="variable language_">document</span>.<span class="property">title</span>.<span class="title function_">split</span>(referrer_message.<span class="property">none</span>[<span class="number">2</span>])[<span class="number">0</span>] +</span><br><span class="line">                    referrer_message.<span class="property">none</span>[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">showMessage</span>(text, <span class="number">6000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (live2d_settings.<span class="property">showWelcomeMessage</span>) <span class="title function_">showWelcomeMessage</span>(result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> waifu_tips = result.<span class="property">waifu</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">loadOtherModel</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> modelId = <span class="title function_">modelStorageGetItem</span>(<span class="string">&quot;modelId&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> modelRandMode = live2d_settings.<span class="property">modelRandMode</span>;</span><br><span class="line"></span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">cache</span>: modelRandMode == <span class="string">&quot;switch&quot;</span> ? <span class="literal">true</span> : <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">url</span>: live2d_settings.<span class="property">modelAPI</span> + modelRandMode + <span class="string">&quot;/?id=&quot;</span> + modelId,</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">                <span class="title function_">loadModel</span>(result.<span class="property">model</span>[<span class="string">&quot;id&quot;</span>]);</span><br><span class="line">                <span class="keyword">var</span> message = result.<span class="property">model</span>[<span class="string">&quot;message&quot;</span>];</span><br><span class="line">                $.<span class="title function_">each</span>(waifu_tips.<span class="property">model_message</span>, <span class="keyword">function</span> (<span class="params">i, val</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == result.<span class="property">model</span>[<span class="string">&quot;id&quot;</span>]) message = <span class="title function_">getRandText</span>(val);</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="title function_">showMessage</span>(message, <span class="number">3000</span>, <span class="literal">true</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">loadRandTextures</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> modelId = <span class="title function_">modelStorageGetItem</span>(<span class="string">&quot;modelId&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> modelTexturesId = <span class="title function_">modelStorageGetItem</span>(<span class="string">&quot;modelTexturesId&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> modelTexturesRandMode = live2d_settings.<span class="property">modelTexturesRandMode</span>;</span><br><span class="line"></span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">cache</span>: modelTexturesRandMode == <span class="string">&quot;switch&quot;</span> ? <span class="literal">true</span> : <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">url</span>:</span><br><span class="line">                live2d_settings.<span class="property">modelAPI</span> +</span><br><span class="line">                modelTexturesRandMode +</span><br><span class="line">                <span class="string">&quot;_textures/?id=&quot;</span> +</span><br><span class="line">                modelId +</span><br><span class="line">                <span class="string">&quot;-&quot;</span> +</span><br><span class="line">                modelTexturesId,</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (</span><br><span class="line">                    result.<span class="property">textures</span>[<span class="string">&quot;id&quot;</span>] == <span class="number">1</span> &amp;&amp;</span><br><span class="line">                    (modelTexturesId == <span class="number">1</span> || modelTexturesId == <span class="number">0</span>)</span><br><span class="line">                )</span><br><span class="line">                    <span class="title function_">showMessage</span>(waifu_tips.<span class="property">load_rand_textures</span>[<span class="number">0</span>], <span class="number">3000</span>, <span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="title function_">showMessage</span>(waifu_tips.<span class="property">load_rand_textures</span>[<span class="number">1</span>], <span class="number">3000</span>, <span class="literal">true</span>);</span><br><span class="line">                <span class="title function_">loadModel</span>(modelId, result.<span class="property">textures</span>[<span class="string">&quot;id&quot;</span>]);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">modelStorageGetItem</span>(<span class="params">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> live2d_settings.<span class="property">modelStorage</span></span><br><span class="line">            ? sessionStorage.<span class="title function_">getItem</span>(key)</span><br><span class="line">            : live2d_settings[key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 检测用户活动状态，并在空闲时显示一言 */</span></span><br><span class="line">    <span class="keyword">if</span> (live2d_settings.<span class="property">showHitokoto</span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">getActed</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">hitokotoTimer</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">hitokotoInterval</span> = <span class="literal">false</span>;</span><br><span class="line">        $(<span class="variable language_">document</span>)</span><br><span class="line">            .<span class="title function_">mousemove</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">                getActed = <span class="literal">true</span>;</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">keydown</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                getActed = <span class="literal">true</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!getActed) <span class="title function_">ifActed</span>();</span><br><span class="line">            <span class="keyword">else</span> <span class="title function_">elseActed</span>();</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">ifActed</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hitokotoInterval) &#123;</span><br><span class="line">            hitokotoInterval = <span class="literal">true</span>;</span><br><span class="line">            hitokotoTimer = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(showHitokotoActed, <span class="number">30000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">elseActed</span>(<span class="params"></span>) &#123;</span><br><span class="line">        getActed = hitokotoInterval = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(hitokotoTimer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">showHitokotoActed</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="variable language_">document</span>)[<span class="number">0</span>].<span class="property">visibilityState</span> == <span class="string">&quot;visible&quot;</span>) <span class="title function_">showHitokoto</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">showHitokoto</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (live2d_settings.<span class="property">hitokotoAPI</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;lwl12.com&quot;</span>:</span><br><span class="line">                $.<span class="title function_">getJSON</span>(</span><br><span class="line">                    <span class="string">&quot;https://api.lwl12.com/hitokoto/v1?encode=realjson&quot;</span>,</span><br><span class="line">                    <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="title function_">empty</span>(result.<span class="property">source</span>)) &#123;</span><br><span class="line">                            <span class="keyword">var</span> text = waifu_tips.<span class="property">hitokoto_api_message</span>[<span class="string">&quot;lwl12.com&quot;</span>][<span class="number">0</span>];</span><br><span class="line">                            <span class="keyword">if</span> (!<span class="title function_">empty</span>(result.<span class="property">author</span>))</span><br><span class="line">                                text += waifu_tips.<span class="property">hitokoto_api_message</span>[<span class="string">&quot;lwl12.com&quot;</span>][<span class="number">1</span>];</span><br><span class="line">                            text = text.<span class="title function_">render</span>(&#123;</span><br><span class="line">                                <span class="attr">source</span>: result.<span class="property">source</span>,</span><br><span class="line">                                <span class="attr">creator</span>: result.<span class="property">author</span>,</span><br><span class="line">                            &#125;);</span><br><span class="line">                            <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                                <span class="title function_">showMessage</span>(</span><br><span class="line">                                    text + waifu_tips.<span class="property">hitokoto_api_message</span>[<span class="string">&quot;lwl12.com&quot;</span>][<span class="number">2</span>],</span><br><span class="line">                                    <span class="number">3000</span>,</span><br><span class="line">                                    <span class="literal">true</span></span><br><span class="line">                                );</span><br><span class="line">                            &#125;, <span class="number">5000</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="title function_">showMessage</span>(result.<span class="property">text</span>, <span class="number">5000</span>, <span class="literal">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                );</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;fghrsh.net&quot;</span>:</span><br><span class="line">                $.<span class="title function_">getJSON</span>(</span><br><span class="line">                    <span class="string">&quot;https://api.fghrsh.net/hitokoto/rand/?encode=jsc&amp;uid=3335&quot;</span>,</span><br><span class="line">                    <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="title function_">empty</span>(result.<span class="property">source</span>)) &#123;</span><br><span class="line">                            <span class="keyword">var</span> text = waifu_tips.<span class="property">hitokoto_api_message</span>[<span class="string">&quot;fghrsh.net&quot;</span>][<span class="number">0</span>];</span><br><span class="line">                            text = text.<span class="title function_">render</span>(&#123; <span class="attr">source</span>: result.<span class="property">source</span>, <span class="attr">date</span>: result.<span class="property">date</span> &#125;);</span><br><span class="line">                            <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                                <span class="title function_">showMessage</span>(text, <span class="number">3000</span>, <span class="literal">true</span>);</span><br><span class="line">                            &#125;, <span class="number">5000</span>);</span><br><span class="line">                            <span class="title function_">showMessage</span>(result.<span class="property">hitokoto</span>, <span class="number">5000</span>, <span class="literal">true</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                );</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;jinrishici.com&quot;</span>:</span><br><span class="line">                $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">                    <span class="attr">url</span>: <span class="string">&quot;https://v2.jinrishici.com/one.json&quot;</span>,</span><br><span class="line">                    <span class="attr">xhrFields</span>: &#123; <span class="attr">withCredentials</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">                    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">result, status</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="title function_">empty</span>(result.<span class="property">data</span>.<span class="property">origin</span>.<span class="property">title</span>)) &#123;</span><br><span class="line">                            <span class="keyword">var</span> text = waifu_tips.<span class="property">hitokoto_api_message</span>[<span class="string">&quot;jinrishici.com&quot;</span>][<span class="number">0</span>];</span><br><span class="line">                            text = text.<span class="title function_">render</span>(&#123;</span><br><span class="line">                                <span class="attr">title</span>: result.<span class="property">data</span>.<span class="property">origin</span>.<span class="property">title</span>,</span><br><span class="line">                                <span class="attr">dynasty</span>: result.<span class="property">data</span>.<span class="property">origin</span>.<span class="property">dynasty</span>,</span><br><span class="line">                                <span class="attr">author</span>: result.<span class="property">data</span>.<span class="property">origin</span>.<span class="property">author</span>,</span><br><span class="line">                            &#125;);</span><br><span class="line">                            <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                                <span class="title function_">showMessage</span>(text, <span class="number">3000</span>, <span class="literal">true</span>);</span><br><span class="line">                            &#125;, <span class="number">5000</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="title function_">showMessage</span>(result.<span class="property">data</span>.<span class="property">content</span>, <span class="number">5000</span>, <span class="literal">true</span>);</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                $.<span class="title function_">getJSON</span>(<span class="string">&quot;https://v1.hitokoto.cn&quot;</span>, <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="title function_">empty</span>(result.<span class="property">from</span>)) &#123;</span><br><span class="line">                        <span class="keyword">var</span> text = waifu_tips.<span class="property">hitokoto_api_message</span>[<span class="string">&quot;hitokoto.cn&quot;</span>][<span class="number">0</span>];</span><br><span class="line">                        text = text.<span class="title function_">render</span>(&#123;</span><br><span class="line">                            <span class="attr">source</span>: result.<span class="property">from</span>,</span><br><span class="line">                            <span class="attr">creator</span>: result.<span class="property">creator</span>,</span><br><span class="line">                        &#125;);</span><br><span class="line">                        <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                            <span class="title function_">showMessage</span>(text, <span class="number">3000</span>, <span class="literal">true</span>);</span><br><span class="line">                        &#125;, <span class="number">5000</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="title function_">showMessage</span>(result.<span class="property">hitokoto</span>, <span class="number">5000</span>, <span class="literal">true</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;.waifu-tool .fui-eye&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">loadOtherModel</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&quot;.waifu-tool .fui-user&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">loadRandTextures</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&quot;.waifu-tool .fui-chat&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">showHitokoto</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改<code>themes/next/live2d-widget/waifu-tips.json</code>，删掉原有内容替换如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;waifu&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;console_open_msg&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;哈哈，你打开了控制台，是想要看看我的秘密吗？&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;copy_message&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;你都复制了些什么呀，转载要记得加上出处哦&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;screenshot_message&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;照好了嘛，是不是很可爱呢？&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hidden_message&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;我们还能再见面的吧…&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;load_rand_textures&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;我还没有其他衣服呢&quot;</span><span class="punctuation">,</span> <span class="string">&quot;我的新衣服好看嘛&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hour_tips&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;t5-7&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;早上好！一日之计在于晨，美好的一天就要开始了&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;t7-11&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;上午好！工作顺利嘛，不要久坐，多起来走动走动哦！&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;t11-14&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;中午了，工作了一个上午，现在是午餐时间！&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;t14-17&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;午后很容易犯困呢，今天的运动目标完成了吗？&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;t17-19&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;傍晚了！窗外夕阳的景色很美丽呢，最美不过夕阳红~&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;t19-21&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;晚上好，今天过得怎么样？&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;t21-23&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;已经这么晚了呀，早点休息吧，晚安~&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;t23-5&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;你是夜猫子呀？这么晚还不睡觉，明天起的来嘛&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;嗨~ 快来逗我玩吧！&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;referrer_message&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;localhost&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;欢迎阅读&lt;span style=\&quot;color:#0099cc;\&quot;&gt;『&quot;</span><span class="punctuation">,</span> <span class="string">&quot;』&lt;/span&gt;&quot;</span><span class="punctuation">,</span> <span class="string">&quot; - &quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;baidu&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Hello! 来自 百度搜索 的朋友&lt;br&gt;你是搜索 &lt;span style=\&quot;color:#0099cc;\&quot;&gt;&quot;</span><span class="punctuation">,</span> <span class="string">&quot;&lt;/span&gt; 找到的我吗？&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;so&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Hello! 来自 360搜索 的朋友&lt;br&gt;你是搜索 &lt;span style=\&quot;color:#0099cc;\&quot;&gt;&quot;</span><span class="punctuation">,</span> <span class="string">&quot;&lt;/span&gt; 找到的我吗？&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;google&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Hello! 来自 谷歌搜索 的朋友&lt;br&gt;欢迎阅读&lt;span style=\&quot;color:#0099cc;\&quot;&gt;『&quot;</span><span class="punctuation">,</span> <span class="string">&quot;』&lt;/span&gt;&quot;</span><span class="punctuation">,</span> <span class="string">&quot; - &quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Hello! 来自 &lt;span style=\&quot;color:#0099cc;\&quot;&gt;&quot;</span><span class="punctuation">,</span> <span class="string">&quot;&lt;/span&gt; 的朋友&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;none&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;欢迎阅读&lt;span style=\&quot;color:#0099cc;\&quot;&gt;『&quot;</span><span class="punctuation">,</span> <span class="string">&quot;』&lt;/span&gt;&quot;</span><span class="punctuation">,</span> <span class="string">&quot; - &quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;referrer_hostname&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;yaoxi-std.github.io&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;yaoxi-std&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;model_message&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;1&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;来自 Potion Maker 的 Pio 酱 ~&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;2&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;来自 Potion Maker 的 Tia 酱 ~&quot;</span><span class="punctuation">]</span>  </span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hitokoto_api_message&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;lwl12.com&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;这句一言来自 &lt;span style=\&quot;color:#0099cc;\&quot;&gt;『&#123;source&#125;』&lt;/span&gt;&quot;</span><span class="punctuation">,</span> <span class="string">&quot;，是 &lt;span style=\&quot;color:#0099cc;\&quot;&gt;&#123;creator&#125;&lt;/span&gt; 投稿的&quot;</span><span class="punctuation">,</span> <span class="string">&quot;。&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;fghrsh.net&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;这句一言出处是 &lt;span style=\&quot;color:#0099cc;\&quot;&gt;『&#123;source&#125;』&lt;/span&gt;，是 &lt;span style=\&quot;color:#0099cc;\&quot;&gt;FGHRSH&lt;/span&gt; 在 &#123;date&#125; 收藏的！&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;jinrishici.com&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;这句诗词出自 &lt;span style=\&quot;color:#0099cc;\&quot;&gt;《&#123;title&#125;》&lt;/span&gt;，是 &#123;dynasty&#125;诗人 &#123;author&#125; 创作的！&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;hitokoto.cn&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;这句一言来自 &lt;span style=\&quot;color:#0099cc;\&quot;&gt;『&#123;source&#125;』&lt;/span&gt;，是 &lt;span style=\&quot;color:#0099cc;\&quot;&gt;&#123;creator&#125;&lt;/span&gt; 在 hitokoto.cn 投稿的。&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mouseover&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.container a[href^=&#x27;http&#x27;]&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;要看看 &lt;span style=\&quot;color:#0099cc;\&quot;&gt;&#123;text&#125;&lt;/span&gt; 么？&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.fui-home&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;点击前往首页，想回到上一页可以使用浏览器的后退功能哦&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.fui-chat&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;一言一语，一颦一笑。一字一句，一颗赛艇。&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.fui-eye&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;嗯··· 要切换 看板娘 吗？&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.fui-user&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;喜欢换装 Play 吗？&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.fui-photo&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;要拍张纪念照片吗？&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.fui-info-circle&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;这里有关于我的信息呢&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.fui-cross&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;你不喜欢我了吗...&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#tor_show&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;翻页比较麻烦吗，点击可以显示这篇文章的目录呢&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#comment_go&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;想要去评论些什么吗？&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#night_mode&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;深夜时要爱护眼睛呀&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#qrcode&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;手机扫一下就能继续看，很方便呢&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.comment_reply&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;要吐槽些什么呢&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#back-to-top&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;回到开始的地方吧&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#author&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;该怎么称呼你呢&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#mail&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;留下你的邮箱，不然就是无头像人士了&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#url&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;你的家在哪里呢，好让我去参观参观&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#textarea&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;认真填写哦，垃圾评论是禁止事项&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.OwO-logo&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;要插入一个表情吗&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#csubmit&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;要[提交]^(Commit)了吗，首次评论需要审核，请耐心等待~&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.ImageBox&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;点击图片可以放大呢&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;input[name=s]&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;找不到想看的内容？搜索看看吧&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.previous&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;去上一页看看吧&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.next&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;去下一页看看吧&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.dropdown-toggle&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;这里是菜单&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c-player a.play-icon&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;想要听点音乐吗&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c-player div.time&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;在这里可以调整&lt;span style=\&quot;color:#0099cc;\&quot;&gt;播放进度&lt;/span&gt;呢&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c-player div.volume&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;在这里可以调整&lt;span style=\&quot;color:#0099cc;\&quot;&gt;音量&lt;/span&gt;呢&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c-player div.list-button&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;span style=\&quot;color:#0099cc;\&quot;&gt;播放列表&lt;/span&gt;里都有什么呢&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c-player div.lyric-button&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;有&lt;span style=\&quot;color:#0099cc;\&quot;&gt;歌词&lt;/span&gt;的话就能跟着一起唱呢&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.waifu #live2d&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;干嘛呢你，快把手拿开&quot;</span><span class="punctuation">,</span> <span class="string">&quot;鼠…鼠标放错地方了！&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;click&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.waifu #live2d&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;是…是不小心碰到了吧&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;萝莉控是什么呀&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;你看到我的小熊了吗&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;再摸的话我可要报警了！⌇●﹏●⌇&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;110吗，这里有个变态一直在摸我(ó﹏ò｡)&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;seasons&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;01/01&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;span style=\&quot;color:#0099cc;\&quot;&gt;元旦&lt;/span&gt;了呢，新的一年又开始了，今年是&#123;year&#125;年~&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;02/14&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;又是一年&lt;span style=\&quot;color:#0099cc;\&quot;&gt;情人节&lt;/span&gt;，&#123;year&#125;年找到对象了嘛~&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;03/08&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;今天是&lt;span style=\&quot;color:#0099cc;\&quot;&gt;妇女节&lt;/span&gt;！&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;03/12&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;今天是&lt;span style=\&quot;color:#0099cc;\&quot;&gt;植树节&lt;/span&gt;，要保护环境呀&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;04/01&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;悄悄告诉你一个秘密~&lt;span style=\&quot;background-color:#34495e;\&quot;&gt;今天是愚人节，不要被骗了哦~&lt;/span&gt;&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;05/01&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;今天是&lt;span style=\&quot;color:#0099cc;\&quot;&gt;五一劳动节&lt;/span&gt;，计划好假期去哪里了吗~&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;06/01&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;span style=\&quot;color:#0099cc;\&quot;&gt;儿童节&lt;/span&gt;了呢，快活的时光总是短暂，要是永远长不大该多好啊…&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;09/03&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;span style=\&quot;color:#0099cc;\&quot;&gt;中国人民抗日战争胜利纪念日&lt;/span&gt;，铭记历史、缅怀先烈、珍爱和平、开创未来。&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;09/10&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;span style=\&quot;color:#0099cc;\&quot;&gt;教师节&lt;/span&gt;，在学校要给老师问声好呀~&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10/01&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;span style=\&quot;color:#0099cc;\&quot;&gt;国庆节&lt;/span&gt;，新中国已经成立了呢&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11/05-11/12&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;今年的&lt;span style=\&quot;color:#0099cc;\&quot;&gt;双十一&lt;/span&gt;是和谁一起过的呢~&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;12/20-12/31&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;这几天是&lt;span style=\&quot;color:#0099cc;\&quot;&gt;圣诞节&lt;/span&gt;，主人肯定又去剁手买买买了~&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>修改<code>themes/next/live2d-widget/waifu-tips.css</code>，<strong>不要删掉</strong>原有内容，在文档末尾添加如下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.waifu</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">20px</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">20px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.waifu</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">15px</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">15px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.waifu-tips</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">224</span>, <span class="number">186</span>, <span class="number">140</span>, <span class="number">0.62</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">236</span>, <span class="number">217</span>, <span class="number">188</span>, <span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">15px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">191</span>, <span class="number">158</span>, <span class="number">118</span>, <span class="number">0.2</span>);</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">animation-delay</span>: <span class="number">5s</span>;</span><br><span class="line">    <span class="attribute">animation-duration</span>: <span class="number">50s</span>;</span><br><span class="line">    <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">    <span class="attribute">animation-name</span>: shake;</span><br><span class="line">    <span class="attribute">animation-timing-function</span>: ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.waifu-tool</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#aaa</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.waifu</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.waifu-tool</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.waifu-tool</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#5b6c7d</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.waifu-tool</span> <span class="selector-tag">span</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#34495e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.waifu</span> <span class="selector-id">#live2d</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> shake &#123;</span><br><span class="line">    <span class="number">2%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0.5px</span>, -<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">4%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0.5px</span>, <span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">6%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">1.5px</span>, <span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">8%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">2.5px</span>, <span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">10%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0.5px</span>, <span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">12%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">1.5px</span>, <span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">14%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0.5px</span>, <span class="number">0.5px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">16%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">1.5px</span>, -<span class="number">0.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">18%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0.5px</span>, <span class="number">0.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">20%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">2.5px</span>, <span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">22%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0.5px</span>, -<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">24%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">1.5px</span>, <span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">26%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">1.5px</span>, <span class="number">0.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">28%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">0.5px</span>, -<span class="number">0.5px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">30%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">1.5px</span>, -<span class="number">0.5px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">32%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">2.5px</span>, -<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">34%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">2.5px</span>, <span class="number">2.5px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">36%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0.5px</span>, -<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">38%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">2.5px</span>, -<span class="number">0.5px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">40%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">0.5px</span>, <span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">42%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">1.5px</span>, <span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">44%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">1.5px</span>, <span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">46%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">1.5px</span>, -<span class="number">0.5px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">48%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">2.5px</span>, -<span class="number">0.5px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">1.5px</span>, <span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">52%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">0.5px</span>, <span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">54%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">1.5px</span>, <span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">56%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0.5px</span>, <span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">58%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">2.5px</span>, <span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">60%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">2.5px</span>, -<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">62%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">1.5px</span>, <span class="number">0.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">64%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">1.5px</span>, <span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">66%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0.5px</span>, <span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">68%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">2.5px</span>, -<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">70%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">2.5px</span>, <span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">72%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">0.5px</span>, -<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">74%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">1.5px</span>, <span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">76%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">1.5px</span>, <span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">78%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">1.5px</span>, <span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">80%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">1.5px</span>, <span class="number">0.5px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">82%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">1.5px</span>, <span class="number">0.5px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">84%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">0.5px</span>, <span class="number">0.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">86%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">2.5px</span>, <span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">88%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">1.5px</span>, <span class="number">0.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">90%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">1.5px</span>, -<span class="number">0.5px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">92%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">1.5px</span>, -<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">94%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0.5px</span>, <span class="number">0.5px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">96%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">2.5px</span>, -<span class="number">0.5px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">98%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">1.5px</span>, -<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">0%</span>, <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, <span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Flat-UI-Icons&#x27;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;flat-ui-icons-regular.eot&#x27;</span>);</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;flat-ui-icons-regular.eot?#iefix&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;flat-ui-icons-regular.woff&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;flat-ui-icons-regular.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;flat-ui-icons-regular.svg#flat-ui-icons-regular&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[class^=<span class="string">&quot;fui-&quot;</span>]</span>,</span><br><span class="line"><span class="selector-attr">[class*=<span class="string">&quot;fui-&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Flat-UI-Icons&#x27;</span>;</span><br><span class="line">  <span class="attribute">speak</span>: none;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-variant</span>: normal;</span><br><span class="line">  <span class="attribute">text-transform</span>: none;</span><br><span class="line">  -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span><br><span class="line">  -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fui-cross</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;\e609&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fui-info-circle</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;\e60f&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fui-photo</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;\e62a&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fui-eye</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;\e62c&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fui-chat</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;\e62d&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fui-home</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;\e62e&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fui-user</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;\e631&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到<a href="https://github.com/fghrsh/live2d_demo">这里</a>下载以<code>flat-ui-icons</code>开头的$4$个图标文件，放在<code>themes/next/live2d-widget/</code>文件夹中。</p>
<p>至此工作全部完成，清理目录并重新生成<code>html</code>文件，打开<code>localhost</code>，你会发现角色可以正常换装了。</p>
<p>我一直开着一言直到某天蹦出了一句“这瓜多少钱一斤”（？？？</p>
]]></content>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>CF553E Kyoya and Train</title>
    <url>/2022/01/09/sol-cf553e/</url>
    <content><![CDATA[<h2 id="CF553E-Kyoya-and-Train"><a href="#CF553E-Kyoya-and-Train" class="headerlink" title="CF553E Kyoya and Train"></a>CF553E Kyoya and Train</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/CF553E">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>考虑dp。$dp_{u,i}$表示点$u$处已花费时间$i$的最小代价。</p>
<script type="math/tex; mode=display">
dp_{u,i} = 
\begin{cases}
0 & (u = n, i \lt t) \\
x & (u = n, i \ge t) \\
\min\limits_{e:u \to v,w}{w+\sum\limits_{k=1}^{t}{p_{e,k} dp_{v,i+k}}} & (u \neq n, i \lt t) \\
dist(u, n) & (u \neq n, i \ge t) \\
\end{cases}</script><p>暴力解dp，复杂度$O(mt^2)$。</p>
<p>时间复杂度的瓶颈在于第三行的求和，考虑优化它。</p>
<p>设$g<em>{e,i} = w_e + \sum\limits</em>{k=1}^{t}{p<em>{e,k} dp</em>{v<em>e,i+k}}$，再设$f</em>{e,i+t} = g_{e,i}$，就有了</p>
<script type="math/tex; mode=display">
f_{e,i+t} = w_e + \sum_{k=1}^{t}{p_{e,k} dp_{v_e,i+k}}</script><p>设$p’<em>k=p</em>{t-k}$（翻转），这个求和就变成了卷积：</p>
<script type="math/tex; mode=display">
f_{e,i+t} = w_e + \sum_{k=1}^{t}{p'_{e,t-k} dp_{v_e,i+k}}</script><p>通过分治FFT转移，复杂度降到$O(mt \log^2 t)$，可以接受。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           CF553E.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/CF553E</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">55</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">120</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXK = <span class="number">1</span> &lt;&lt; <span class="number">17</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> EPS = <span class="number">1e-6</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">namespace</span> maths &#123;</span><br><span class="line"><span class="keyword">using</span> comp = complex&lt;<span class="type">double</span>&gt;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(_Tp* f, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> rev[MAXK] = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">            rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">            <span class="built_in">swap</span>(f[i], f[rev[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fft</span><span class="params">(comp* f, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">change</span>(f, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="function">comp <span class="title">wn</span><span class="params">(cos(<span class="number">2</span> * PI / h), sin(<span class="number">2</span> * PI / h))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">            <span class="function">comp <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; j + h / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                comp u = f[k], t = w * f[k + h / <span class="number">2</span>];</span><br><span class="line">                f[k] = u + t, f[k + h / <span class="number">2</span>] = u - t;</span><br><span class="line">                w *= wn;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">reverse</span>(f + <span class="number">1</span>, f + len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            f[i] /= len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;  <span class="comment">// namespace maths</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> maths;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> u, v, w;</span><br><span class="line">    <span class="type">double</span> p[MAXK];</span><br><span class="line">    <span class="built_in">Edge</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Edge</span>(<span class="type">int</span> _u, <span class="type">int</span> _v, <span class="type">int</span> _w) : <span class="built_in">u</span>(_u), <span class="built_in">v</span>(_v), <span class="built_in">w</span>(_w) &#123;&#125;</span><br><span class="line">&#125; edge[MAXM];</span><br><span class="line"><span class="type">int</span> n, m, t, x;</span><br><span class="line"><span class="type">int</span> dis[MAXN][MAXN];</span><br><span class="line"><span class="type">double</span> f[MAXM][MAXK], dp[MAXN][MAXK];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> comp tf[MAXK], tg[MAXK];</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> lx = r - mid, rx = r - l, len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (len &lt;= lx + rx)</span><br><span class="line">        len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> e = <span class="number">1</span>; e &lt;= m; ++e) &#123;</span><br><span class="line">        Edge&amp; ed = edge[e];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            tf[i] = tg[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lx; ++i)</span><br><span class="line">            tf[i] = dp[ed.v][i + mid + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; rx; ++i)</span><br><span class="line">            tg[i] = ed.p[rx - i];</span><br><span class="line">        <span class="built_in">fft</span>(tf, len, <span class="number">1</span>), <span class="built_in">fft</span>(tg, len, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            tf[i] *= tg[i];</span><br><span class="line">        <span class="built_in">fft</span>(tf, len, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= mid; ++i)</span><br><span class="line">            f[e][i] += tf[i + rx - mid - <span class="number">1</span>].<span class="built_in">real</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> comp tf[MAXK], tg[MAXK];</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            dp[edge[i].u][l] = <span class="built_in">min</span>(dp[edge[i].u][l], f[i][l] + edge[i].w);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">solve</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">calc</span>(l, r);</span><br><span class="line">    <span class="built_in">solve</span>(l, mid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m), <span class="built_in">read</span>(t), <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        dis[i][i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        Edge&amp; ed = edge[i];</span><br><span class="line">        <span class="built_in">read</span>(ed.u), <span class="built_in">read</span>(ed.v), <span class="built_in">read</span>(ed.w);</span><br><span class="line">        dis[ed.u][ed.v] = <span class="built_in">min</span>(dis[ed.u][ed.v], ed.w);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= t; ++j)</span><br><span class="line">            <span class="built_in">read</span>(ed.p[j]) /= <span class="number">1e5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                <span class="keyword">if</span> (dis[i][j] &gt; dis[i][k] + dis[k][j])</span><br><span class="line">                    dis[i][j] = dis[i][k] + dis[k][j];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= t; ++j)</span><br><span class="line">            dp[i][j] = INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = t + <span class="number">1</span>; j &lt;= t + t; ++j)</span><br><span class="line">            dp[i][j] = dis[i][n] + x;</span><br><span class="line">    <span class="built_in">calc</span>(<span class="number">0</span>, t + t);</span><br><span class="line">    <span class="built_in">solve</span>(<span class="number">0</span>, t);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.10lf\n&quot;</span>, dp[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>CF773F Test Data Generation</title>
    <url>/2022/01/07/sol-cf773f/</url>
    <content><![CDATA[<h2 id="CF773F-Test-Data-Generation"><a href="#CF773F-Test-Data-Generation" class="headerlink" title="CF773F Test Data Generation"></a>CF773F Test Data Generation</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/CF773F">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>update: 发现<a href="https://www.luogu.com.cn/discuss/396583">FFT不同写法会输出不同的答案</a></p>
<p>第一种解法出错，显然$n$要是奇数。</p>
<p>第二种解法出错，则$a_n$和$\frac{a_n}{g}$奇偶性不同，只有$a_n$为偶数，$\frac{a_n}{g}$为奇数。这时$a_n$中因数$2$的个数与$g$中的相同。</p>
<p>于是我们可以枚举$g$中因数$2$的个数$k$，将序列$a$的所有数除以$2^k$，答案就是$1 \le a_i \le \frac{max_a}{2^k}$且$a_n$为奇数的个数。</p>
<p>令$f_{a,n}$表示所有数$\in [1,a]$，长度为$n$，最后一位为奇数的方案数。</p>
<p>令$g_{a,n}$表示所有数$\in [1,a]$，长度为$n$，最后一位为偶数的方案数。</p>
<p>答案是</p>
<script type="math/tex; mode=display">\sum\limits_{i \equiv 1 \pmod{2}} f_{\lfloor\frac{max_a}{2^k}\rfloor,i}</script><p>由于要计算每个$f<em>{\lfloor\frac{max_a}{2^k}\rfloor}$，如果可以从$f</em>{\lfloor\frac{max_a}{2^{k+1}}\rfloor}$转移就可以不用每次都重新计算。</p>
<p>所以分为$f<em>{a} \to f</em>{2a}$和$f<em>{a-1} \to f</em>{a}$两种情况转移。</p>
<p>第一种情况下，当$a$为奇数时：</p>
<script type="math/tex; mode=display">
\begin{aligned}
f_{2a,k} &= \sum_{i+j=k}{(f_{a,i}+g_{a,i})g_{a,j}}-g_{a,k}g_{a,0}[k \neq 0] \\
g_{2a,k} &= \sum_{i+j=k}{(f_{a,i}+g_{a,i})f_{a,j}}-f_{a,k}f_{a,0}[k \neq 0] \\
\end{aligned}</script><p>第一种情况下，当$a$为偶数时：</p>
<script type="math/tex; mode=display">
\begin{aligned}
f_{2a,k} &= \sum_{i+j=k}{(f_{a,i}+g_{a,i})f_{a,j}}-g_{a,k}f_{a,0}[k \neq 0] \\
g_{2a,k} &= \sum_{i+j=k}{(f_{a,i}+g_{a,i})g_{a,j}}-f_{a,k}g_{a,0}[k \neq 0] \\
\end{aligned}</script><p>第二种情况下，很容易转移：</p>
<script type="math/tex; mode=display">
\begin{aligned}
f_{a,k} &= f_{a-1,k} + (f_{a-1,k-1} + g_{a-1,k-1})[a \equiv 1 \pmod{2}] \\
g_{a,k} &= g_{a-1,k} + (f_{a-1,k-1} + g_{a-1,k-1})[a \equiv 0 \pmod{2}] \\
\end{aligned}</script><p>时间复杂度$O(max_n \log max_n \log max_a)$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           CF773F.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/CF773F</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1</span> &lt;&lt; <span class="number">16</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">namespace</span> maths &#123;</span><br><span class="line"><span class="type">int</span> mod;</span><br><span class="line"><span class="keyword">using</span> comp = complex&lt;<span class="type">long</span> <span class="type">double</span>&gt;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">return</span> x &gt;= mod ? x - mod : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(_Tp* f, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> rev[MAXN];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = rev[<span class="number">0</span>] = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">            rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">            <span class="built_in">swap</span>(f[i], f[rev[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fft</span><span class="params">(comp* f, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">change</span>(f, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="function">comp <span class="title">wn</span><span class="params">(cos(<span class="number">2</span> * PI / h), sin(<span class="number">2</span> * PI / h))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">            <span class="function">comp <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; j + h / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                comp u = f[k], t = w * f[k + h / <span class="number">2</span>];</span><br><span class="line">                f[k] = u + t, f[k + h / <span class="number">2</span>] = u - t;</span><br><span class="line">                w *= wn;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">reverse</span>(f + <span class="number">1</span>, f + len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            f[i] /= len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">polymul</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>* lhs, <span class="type">int</span>* rhs, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> comp f1[MAXN], f2[MAXN];</span><br><span class="line">    <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (len &lt;= n + n)</span><br><span class="line">        len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        f1[i] = f2[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">        f1[i] = lhs[i], f2[i] = rhs[i];</span><br><span class="line">    <span class="built_in">fft</span>(f1, len, <span class="number">1</span>), <span class="built_in">fft</span>(f2, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        f1[i] *= f2[i];</span><br><span class="line">    <span class="built_in">fft</span>(f1, len, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">        ans[i] = (<span class="type">int</span>)(f1[i].<span class="built_in">real</span>() + <span class="number">0.5</span>) % mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;  <span class="comment">// namespace maths</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> maths;</span><br><span class="line"><span class="type">int</span> n, m, ans;</span><br><span class="line"><span class="type">int</span> f[MAXN], g[MAXN], tf[MAXN], tg[MAXN], sum[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">void</span>(f[<span class="number">0</span>] = <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> y = x &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">solve</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (y &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">            sum[i] = <span class="built_in">add</span>(f[i], g[i]);</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">polymul</span>(n, sum, f, tg);</span><br><span class="line">        <span class="built_in">polymul</span>(n, sum, g, tf);</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            f[i] = <span class="built_in">add</span>(f[i], tf[i]);</span><br><span class="line">            g[i] = <span class="built_in">add</span>(g[i], tg[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">            sum[i] = <span class="built_in">add</span>(f[i], g[i]);</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">polymul</span>(n, sum, f, tf);</span><br><span class="line">        <span class="built_in">polymul</span>(n, sum, g, tg);</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            f[i] = <span class="built_in">add</span>(f[i], tf[i]);</span><br><span class="line">            g[i] = <span class="built_in">add</span>(g[i], tg[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i; --i)</span><br><span class="line">            f[i] = <span class="built_in">add</span>(f[i], <span class="built_in">add</span>(f[i - <span class="number">1</span>], g[i - <span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i += <span class="number">2</span>)</span><br><span class="line">        ans = <span class="built_in">add</span>(ans, f[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m), <span class="built_in">read</span>(mod);</span><br><span class="line">    <span class="built_in">solve</span>(m &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>CF623E Transforming Sequence</title>
    <url>/2022/01/05/sol-cf623e/</url>
    <content><![CDATA[<h2 id="CF623E-Transforming-Sequence"><a href="#CF623E-Transforming-Sequence" class="headerlink" title="CF623E Transforming Sequence"></a>CF623E Transforming Sequence</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/CF623E">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>序列$a$的前缀或严格单调递增，考虑到$b<em>n$二进制表示中包含$k$个$1$的情况本质相同而顺序不重要，所以设$dp</em>{n,k}$表示长度为$n$的序列$a$中，$b_n$二进制表示中包含$k$个$1$。则有</p>
<script type="math/tex; mode=display">
\begin{aligned}
dp_{n+m,k} &= \sum_{i+j=k}{dp_{n,i} \times dp_{m,j} \times \binom{k}{i} \times 2^{m \times i}} \\
&= \sum_{i+j=k}{dp_{n,i} \times dp_{m,j} \times \frac{k!}{i!j!} \times 2^{m \times i}} \\
&= k! \times \sum_{i+j=k}{(dp_{n,i} \times \frac{1}{i!} \times 2^{m \times i}) \times (dp_{m,j} \times \frac{1}{j!})} \\
\end{aligned}</script><p>令$n=m$，倍增NTT求解。</p>
<p>需要注意，里面的$(dp_{n,i} \times i!)$和类似的不是卷积而是按位将系数相乘，只有$i$和$j$不同时才是卷积运算。于是阶乘和逆元不需要参与卷积运算的。</p>
<p>为了方便，代码中的<code>operator*()</code>是按位乘系数，<code>operator^()</code>是卷积。</p>
<p>时间复杂度$O(k \log n \log k)$。</p>
<p>注意模数是$10^9+7$要用<a href="/2021/12/05/sol-p4245/" title="任意模数NTT">任意模数NTT</a>。</p>
<p>PS: MTT带个$5$的常数，这里$\log_2n=60$，$k=3\times 10^4$，FFT长度取$2^{16}$，导致理论上的运算次数已经卡满了$10^9$，本地小样例都要跑$7$秒，但谁叫CF评测机快呢～</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           CF623E.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/CF623E</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1</span> &lt;&lt; <span class="number">16</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LOGN = <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> BLOC = <span class="number">1</span> &lt;&lt; <span class="number">15</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">namespace</span> maths &#123;</span><br><span class="line">    <span class="keyword">using</span> comp = complex&lt;<span class="type">long</span> <span class="type">double</span>&gt;;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x += y;</span><br><span class="line">        <span class="keyword">return</span> x &gt;= MOD ? x - MOD : x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x -= y;</span><br><span class="line">        <span class="keyword">return</span> x &lt; <span class="number">0</span> ? x + MOD : x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> p = MOD)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x % p)</span><br><span class="line">            <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">                ret = ret * x % p;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(_Tp* f, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> rev[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = rev[<span class="number">0</span>] = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">                rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">                <span class="built_in">swap</span>(f[i], f[rev[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fft</span><span class="params">(comp* f, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">change</span>(f, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="function">comp <span class="title">wn</span><span class="params">(cos(<span class="number">2</span> * PI / h), sin(<span class="number">2</span> * PI / h))</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">                <span class="function">comp <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; j + h / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                    comp u = f[k], t = w * f[k + h / <span class="number">2</span>];</span><br><span class="line">                    f[k] = u + t, f[k + h / <span class="number">2</span>] = u - t;</span><br><span class="line">                    w *= wn;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">reverse</span>(f + <span class="number">1</span>, f + len);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">                f[i] /= len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">poly</span> &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">static</span> <span class="type">int</span> len = <span class="number">1</span> &lt;&lt; <span class="number">16</span>;</span><br><span class="line">        <span class="type">int</span> a[MAXN];</span><br><span class="line">        <span class="type">int</span> <span class="keyword">operator</span>[](<span class="type">int</span> i) <span class="type">const</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>&amp; <span class="keyword">operator</span>[](<span class="type">int</span> i) &#123;</span><br><span class="line">            <span class="keyword">return</span> a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        poly <span class="keyword">operator</span>*(<span class="type">const</span> poly&amp; rhs) <span class="type">const</span> &#123;</span><br><span class="line">            poly ret;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">                ret[i] = a[i] * rhs[i] % MOD;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        poly <span class="keyword">operator</span>^(<span class="type">const</span> poly&amp; rhs) <span class="type">const</span> &#123;</span><br><span class="line">            <span class="type">static</span> comp f1[MAXN], f2[MAXN], f3[MAXN];</span><br><span class="line">            poly ret;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">                f1[i] = <span class="built_in">comp</span>(a[i] / BLOC, a[i] % BLOC);</span><br><span class="line">                f2[i] = <span class="built_in">comp</span>(a[i] / BLOC, -a[i] % BLOC);</span><br><span class="line">                f3[i] = <span class="built_in">comp</span>(rhs[i] / BLOC, rhs[i] % BLOC);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">fft</span>(f1, len, <span class="number">1</span>), <span class="built_in">fft</span>(f2, len, <span class="number">1</span>), <span class="built_in">fft</span>(f3, len, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">                f1[i] *= f3[i];</span><br><span class="line">                f2[i] *= f3[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">fft</span>(f1, len, <span class="number">-1</span>), <span class="built_in">fft</span>(f2, len, <span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">                <span class="type">int</span> axay = (<span class="type">int</span>)<span class="built_in">round</span>((f1[i].<span class="built_in">real</span>() + f2[i].<span class="built_in">real</span>()) / <span class="number">2</span>) % MOD;</span><br><span class="line">                <span class="type">int</span> bxby = (<span class="type">int</span>)<span class="built_in">round</span>((f2[i].<span class="built_in">real</span>() - f1[i].<span class="built_in">real</span>()) / <span class="number">2</span>) % MOD;</span><br><span class="line">                <span class="type">int</span> axby = (<span class="type">int</span>)<span class="built_in">round</span>((f1[i].<span class="built_in">imag</span>() + f2[i].<span class="built_in">imag</span>()) / <span class="number">2</span>) % MOD;</span><br><span class="line">                <span class="type">int</span> aybx = (<span class="type">int</span>)<span class="built_in">round</span>((f1[i].<span class="built_in">imag</span>() - f2[i].<span class="built_in">imag</span>()) / <span class="number">2</span>) % MOD;</span><br><span class="line">                ret[i] = (axay * BLOC % MOD * BLOC + (axby + aybx) * BLOC % MOD + bxby) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> maths;</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line">poly fac, inv, lhs, rhs, ans;</span><br><span class="line">poly pw2[LOGN], dp[LOGN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binom</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fac[x] * inv[y] % MOD * inv[x - y] % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = fac[<span class="number">0</span>] = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * i % MOD;</span><br><span class="line">    inv[k] = <span class="built_in">qpow</span>(fac[k], MOD - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = k - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        inv[i] = inv[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % MOD;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = pw2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">        pw2[<span class="number">0</span>][i] = pw2[<span class="number">0</span>][i - <span class="number">1</span>] * <span class="number">2</span> % MOD;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">        dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; LOGN; ++i) &#123;</span><br><span class="line">        pw2[i] = pw2[i - <span class="number">1</span>] * pw2[i - <span class="number">1</span>];</span><br><span class="line">        lhs = dp[i - <span class="number">1</span>] * inv * pw2[i - <span class="number">1</span>];</span><br><span class="line">        rhs = dp[i - <span class="number">1</span>] * inv;</span><br><span class="line">        dp[i] = (lhs ^ rhs) * fac;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; LOGN; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!((n &gt;&gt; i) &amp; <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        lhs = ans * inv * pw2[i];</span><br><span class="line">        rhs = dp[i] * inv;</span><br><span class="line">        ans = (lhs ^ rhs) * fac;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= k; ++i)</span><br><span class="line">        tot = <span class="built_in">add</span>(tot, ans[i] * <span class="built_in">binom</span>(k, i) % MOD);</span><br><span class="line">    <span class="built_in">write</span>(tot), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>CF755G PolandBall and Many Other Balls</title>
    <url>/2022/01/03/sol-cf755g/</url>
    <content><![CDATA[<h2 id="CF755G-PolandBall-and-Many-Other-Balls"><a href="#CF755G-PolandBall-and-Many-Other-Balls" class="headerlink" title="CF755G PolandBall and Many Other Balls"></a>CF755G PolandBall and Many Other Balls</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/CF755G">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>首先想到朴素的dp。令$dp_{n,k}$表示$n$个数取$k$个，则</p>
<script type="math/tex; mode=display">dp_{x+y,k} = \sum_{i+j=k}{dp_{x,i} \times dp_{y,j}} + \sum_{i+j=k-1}{dp_{x-1,i} \times dp_{y-1,j}}</script><p>发现左右两个求和符号都容易写成卷积的形式，不妨对于每个$x+y$取$x=y$代入计算，这样用倍增NTT就可以。</p>
<p>但是求$dp<em>{x+y}$时还要知道$dp</em>{x-1}$和$dp<em>{y-1}$，所以再设$F</em>{t,0 \le l \le 2}(x)$表示原来的$dp_{2^t-l,x}$的生成函数，有以下转移方程</p>
<script type="math/tex; mode=display">
\begin{aligned}
F_{t,0}(x) &= F_{t-1,0}(x) \times F_{t-1,0}(x) + F_{t-1,1}(x) \times F_{t-1,1}(x) \\
F_{t,1}(x) &= F_{t-1,0}(x) \times F_{t-1,1}(x) + F_{t-1,1}(x) \times F_{t-1,2}(x) \\
F_{t,2}(x) &= F_{t-1,1}(x) \times F_{t-1,1}(x) + F_{t-1,2}(x) \times F_{t-1,2}(x)
\end{aligned}</script><p>时间复杂度$O(k \log n \log k)$，可通过。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           CF755G.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/CF755G</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXK = <span class="number">1</span> &lt;&lt; <span class="number">17</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LOGN = <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">namespace</span> maths &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x += y;</span><br><span class="line">        <span class="keyword">return</span> x &gt;= MOD ? x - MOD : x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x -= y;</span><br><span class="line">        <span class="keyword">return</span> x &lt; <span class="number">0</span> ? x + MOD : x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> p = MOD)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x % p)</span><br><span class="line">            <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">                ret = ret * x % p;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(_Tp* f, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> rev[MAXK];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = rev[<span class="number">0</span>] = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">                rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">                <span class="built_in">swap</span>(f[i], f[rev[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(<span class="type">int</span>* f, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">change</span>(f, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (MOD - <span class="number">1</span>) / h);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">                <span class="type">int</span> g = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; j + h / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                    <span class="type">int</span> u = f[k], t = g * f[k + h / <span class="number">2</span>] % MOD;</span><br><span class="line">                    f[k] = <span class="built_in">add</span>(u, t), f[k + h / <span class="number">2</span>] = <span class="built_in">sub</span>(u, t);</span><br><span class="line">                    g = g * gn % MOD;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">reverse</span>(f + <span class="number">1</span>, f + len);</span><br><span class="line">            <span class="type">int</span> inv = <span class="built_in">qpow</span>(len, MOD - <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">                f[i] = f[i] * inv % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> maths;</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">knap</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">        <span class="type">int</span> dp[MAXK];</span><br><span class="line">        <span class="built_in">node</span>() &#123; <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp)); &#125;</span><br><span class="line">        <span class="built_in">node</span>(<span class="type">const</span> node&amp; o) &#123; <span class="built_in">memcpy</span>(dp, o.dp, <span class="built_in">sizeof</span>(dp)); &#125;</span><br><span class="line">        node <span class="keyword">operator</span>+(<span class="type">const</span> node&amp; rhs) <span class="type">const</span> &#123;</span><br><span class="line">            node ret;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= k; ++i)</span><br><span class="line">                ret.dp[i] = <span class="built_in">add</span>(dp[i], rhs.dp[i]);</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        node <span class="keyword">operator</span>*(<span class="type">const</span> node&amp; rhs) <span class="type">const</span> &#123;</span><br><span class="line">            <span class="type">static</span> <span class="type">int</span> f1[MAXK], f2[MAXK];</span><br><span class="line">            node ret;</span><br><span class="line">            <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (len &lt; k + k + <span class="number">2</span>)</span><br><span class="line">                len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">                f1[i] = dp[i], f2[i] = rhs.dp[i];</span><br><span class="line">            <span class="built_in">ntt</span>(f1, len, <span class="number">1</span>), <span class="built_in">ntt</span>(f2, len, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">                f1[i] = f1[i] * f2[i] % MOD;</span><br><span class="line">            <span class="built_in">ntt</span>(f1, len, <span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= k; ++i)</span><br><span class="line">                ret.dp[i] = f1[i];</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        node <span class="keyword">operator</span>&lt;&lt;(<span class="type">int</span> rhs) <span class="type">const</span> &#123;</span><br><span class="line">            node ret;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = rhs; i &lt;= k; ++i)</span><br><span class="line">                ret.dp[i] = dp[i - rhs];</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; dp[<span class="number">3</span>];</span><br><span class="line">    knap <span class="keyword">operator</span>*(<span class="type">const</span> knap&amp; rhs) <span class="type">const</span> &#123;</span><br><span class="line">        knap ret;</span><br><span class="line">        ret.dp[<span class="number">0</span>] = dp[<span class="number">0</span>] * rhs.dp[<span class="number">0</span>] + ((dp[<span class="number">1</span>] * rhs.dp[<span class="number">1</span>]) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        ret.dp[<span class="number">1</span>] = dp[<span class="number">0</span>] * rhs.dp[<span class="number">1</span>] + ((dp[<span class="number">1</span>] * rhs.dp[<span class="number">2</span>]) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        ret.dp[<span class="number">2</span>] = dp[<span class="number">1</span>] * rhs.dp[<span class="number">1</span>] + ((dp[<span class="number">2</span>] * rhs.dp[<span class="number">2</span>]) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">knap dp[LOGN], ans;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(k);</span><br><span class="line">    ans.dp[<span class="number">0</span>].dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">0</span>].dp[<span class="number">0</span>].dp[<span class="number">0</span>] = dp[<span class="number">0</span>].dp[<span class="number">0</span>].dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">0</span>].dp[<span class="number">1</span>].dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; LOGN; ++i)</span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] * dp[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; LOGN; ++i)</span><br><span class="line">        <span class="keyword">if</span>  ((n &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">            ans = ans * dp[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">        <span class="built_in">write</span>(ans.dp[<span class="number">0</span>].dp[i]), <span class="built_in">putchar</span>(<span class="string">&quot; \n&quot;</span>[i == k]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1613F Tree Coloring</title>
    <url>/2022/01/03/sol-cf1613f/</url>
    <content><![CDATA[<h2 id="CF1613F-Tree-Coloring"><a href="#CF1613F-Tree-Coloring" class="headerlink" title="CF1613F Tree Coloring"></a>CF1613F Tree Coloring</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/CF1613F">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>不易直接计算符合条件的方案数，所以利用容斥计算不符合条件的方案数。假设有$i$个点的$c<em>k=c</em>{fa<em>k}-1$，整棵树就被分成了$n-i$条链，每条链只要有一个点确定了则其他点都能确定，排列数为$(n-i)!$。设有$i$个点的$c_k=c</em>{fa_k}-1$共有$f(i)$种方案，则</p>
<script type="math/tex; mode=display">ans=\sum_{i=0}^{n-1}{(-1)^i(n-i)!f(i)}</script><p>考虑如何计算$f(i)$。对于节点$u$，要么不和子节点相差为$1$，要么只能和其中一个子节点相差为$1$，所以其生成函数为</p>
<script type="math/tex; mode=display">F_u(x) = deg_ux + 1</script><p>$f(i)$的生成函数显然是每个$u$的生成函数乘起来：</p>
<script type="math/tex; mode=display">F(x) = \prod_{u=1}^{n}{(deg_ux + 1)}</script><p>所以求出$f(i)$如下：</p>
<script type="math/tex; mode=display">f(i) = [x^i]\prod_{u=1}^{n}{(deg_ux + 1)}</script><p>使用分治NTT计算，时间复杂度$O(n \log^2 n)$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           CF1613F.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/CF1613F</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">namespace</span> maths &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x += y;</span><br><span class="line">        <span class="keyword">return</span> x &gt;= MOD ? x - MOD : x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x -= y;</span><br><span class="line">        <span class="keyword">return</span> x &lt; <span class="number">0</span> ? x + MOD : x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> p = MOD)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x % p)</span><br><span class="line">            <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">                ret = ret * x % p;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(_Tp* f, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> rev[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = rev[<span class="number">0</span>] = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">                rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">                <span class="built_in">swap</span>(f[i], f[rev[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(<span class="type">int</span>* f, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">change</span>(f, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (MOD - <span class="number">1</span>) / h);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">                <span class="type">int</span> g = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; j + h / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                    <span class="type">int</span> u = f[k], t = g * f[k + h / <span class="number">2</span>] % MOD;</span><br><span class="line">                    f[k] = <span class="built_in">add</span>(u, t), f[k + h / <span class="number">2</span>] = <span class="built_in">sub</span>(u, t);</span><br><span class="line">                    g = g * gn % MOD;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">reverse</span>(f + <span class="number">1</span>, f + len);</span><br><span class="line">            <span class="type">int</span> inv = <span class="built_in">qpow</span>(len, MOD - <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">                f[i] = f[i] * inv % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> maths;</span><br><span class="line"><span class="type">int</span> n, fa[MAXN], deg[MAXN], fac[MAXN];</span><br><span class="line"><span class="type">int</span> f[MAXN], f1[MAXN], f2[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    fa[u] = f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u])</span><br><span class="line">        <span class="keyword">if</span> (v != f)</span><br><span class="line">            <span class="built_in">build</span>(v, u), ++deg[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, len = r - l;</span><br><span class="line">    <span class="built_in">solve</span>(l, mid), <span class="built_in">solve</span>(mid, r);</span><br><span class="line">    <span class="built_in">copy</span>(f + l, f + mid, f1);</span><br><span class="line">    <span class="built_in">fill</span>(f1 + len / <span class="number">2</span>, f1 + len, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">copy</span>(f + mid, f + r, f2);</span><br><span class="line">    <span class="built_in">fill</span>(f2 + len / <span class="number">2</span>, f2 + len, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">ntt</span>(f1, len, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">ntt</span>(f2, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        f1[i] = f1[i] * f2[i] % MOD;</span><br><span class="line">    <span class="built_in">ntt</span>(f1, len, <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">copy</span>(f1, f1 + len, f + l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v);</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (len &lt;= n + n)</span><br><span class="line">        len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i += <span class="number">2</span>)</span><br><span class="line">        f[i] = <span class="number">1</span>, f[i + <span class="number">1</span>] = deg[i &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">solve</span>(<span class="number">0</span>, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = fac[<span class="number">0</span>] = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * i % MOD;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">            ans = <span class="built_in">sub</span>(ans, fac[n - i] * f[i] % MOD);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans = <span class="built_in">add</span>(ans, fac[n - i] * f[i] % MOD);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>CF986D Perfect Encoding</title>
    <url>/2022/01/02/sol-cf986d/</url>
    <content><![CDATA[<h2 id="CF986D-Perfect-Encoding"><a href="#CF986D-Perfect-Encoding" class="headerlink" title="CF986D Perfect Encoding"></a>CF986D Perfect Encoding</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/CF986D">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>一道思维难度低但码量极大且及其卡常的烂题。</p>
<p>首先根据小学奥数学过的东西，可以知道分解出许多$3$，剩下无法分解的凑成$1$到$2$个$2$，这样得到的积一定是最大的。</p>
<p>答案明显是单调的，可以考虑二分+判断。$n$的范围巨大，需要用高精度+FFT+快速幂，时间复杂度一下子$O(n \log^3 n)$级别，无法通过。</p>
<p>进一步思考，答案应该接近$\log_3n$，不妨从$\lfloor \log_3n \rfloor$开始枚举答案，只需要枚举大约$6$个就可以找到答案，优化成$O(n \log^2 n)$。</p>
<p>时间复杂度无法进一步优化，于是设法开始卡常。首先这个高精度必须得压位，而且为了防止MLE又不能开<code>long long</code>，所以假设压$x$位，就要求FFT时$(10^x)^2 \times \frac{1.5 \times 10^6}{10^x} \le$ <code>INT_MAX</code>，于是$x$最大取到$3$，压$3$位。</p>
<p>其次在进行快速幂时，变量$x$需要一直乘上自己，可以省略一次FFT。由于快速幂刚开始时数字不是很大，我们选择用<code>vector</code>储存高精度而不是使用定长数组，这样又可以提高一些变量拷贝的效率。至此我就没有再想到能够进一步优化的方法了，但是也足以在时限内通过了。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           CF986D.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/CF986D</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 加大火车</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1</span> &lt;&lt; <span class="number">21</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXB = <span class="number">1000</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXK = <span class="number">3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> LOG3_10 = <span class="built_in">log</span>(<span class="number">10</span>) / <span class="built_in">log</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">namespace</span> bignum &#123;</span><br><span class="line">    <span class="keyword">using</span> comp = complex&lt;<span class="type">double</span>&gt;;</span><br><span class="line">    comp flhs[MAXN], frhs[MAXN];</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> tmp[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(comp *f, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> rev[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = rev[<span class="number">0</span>] = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">                rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">                <span class="built_in">swap</span>(f[i], f[rev[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fft</span><span class="params">(comp *f, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">change</span>(f, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="function">comp <span class="title">wn</span><span class="params">(cos(<span class="number">2</span> * PI / h), sin(<span class="number">2</span> * PI / h))</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">                <span class="function">comp <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; j + h / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                    comp u = f[k], t = w * f[k + h / <span class="number">2</span>];</span><br><span class="line">                    f[k] = u + t;</span><br><span class="line">                    f[k + h / <span class="number">2</span>] = u - t;</span><br><span class="line">                    w = w * wn;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">reverse</span>(f + <span class="number">1</span>, f + len);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">                f[i] /= len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt;&amp; <span class="title">polymul</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; lhs, <span class="type">int</span> rhs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lhs.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            lhs[i] *= rhs;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lhs.<span class="built_in">size</span>() - <span class="number">1</span>; ++i)</span><br><span class="line">            lhs[i + <span class="number">1</span>] += lhs[i] / MAXB, lhs[i] %= MAXB;</span><br><span class="line">        <span class="type">int</span> len = lhs.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (lhs[len - <span class="number">1</span>] &gt;= MAXB)</span><br><span class="line">            lhs.<span class="built_in">push_back</span>(lhs[len - <span class="number">1</span>] / MAXB), lhs[len - <span class="number">1</span>] %= MAXB, ++len;</span><br><span class="line">        <span class="keyword">return</span> lhs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt;&amp; <span class="title">polymul</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; lhs)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (len &lt; lhs.<span class="built_in">size</span>() * <span class="number">2</span>)</span><br><span class="line">            len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lhs.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            flhs[i] = lhs[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = lhs.<span class="built_in">size</span>(); i &lt; len; ++i)</span><br><span class="line">            flhs[i] = <span class="number">0</span>;</span><br><span class="line">        lhs.<span class="built_in">resize</span>(len);</span><br><span class="line">        <span class="built_in">fft</span>(flhs, len, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            flhs[i] = flhs[i] * flhs[i];</span><br><span class="line">        <span class="built_in">fft</span>(flhs, len, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            tmp[i] = (<span class="type">long</span> <span class="type">long</span>)(flhs[i].<span class="built_in">real</span>() + <span class="number">0.5</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; ++i)</span><br><span class="line">            tmp[i + <span class="number">1</span>] += tmp[i] / MAXB, tmp[i] %= MAXB;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            lhs[i] = tmp[i];</span><br><span class="line">        <span class="keyword">while</span> (*lhs.<span class="built_in">rbegin</span>() == <span class="number">0</span>)</span><br><span class="line">            lhs.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">return</span> lhs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt;&amp; <span class="title">polymul</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; lhs, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; rhs)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (len &lt; lhs.<span class="built_in">size</span>() + rhs.<span class="built_in">size</span>())</span><br><span class="line">            len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lhs.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            flhs[i] = lhs[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = lhs.<span class="built_in">size</span>(); i &lt; len; ++i)</span><br><span class="line">            flhs[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; rhs.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            frhs[i] = rhs[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = rhs.<span class="built_in">size</span>(); i &lt; len; ++i)</span><br><span class="line">            frhs[i] = <span class="number">0</span>;</span><br><span class="line">        lhs.<span class="built_in">resize</span>(len);</span><br><span class="line">        <span class="built_in">fft</span>(flhs, len, <span class="number">1</span>), <span class="built_in">fft</span>(frhs, len, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            flhs[i] = flhs[i] * frhs[i];</span><br><span class="line">        <span class="built_in">fft</span>(flhs, len, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            tmp[i] = (<span class="type">long</span> <span class="type">long</span>)(flhs[i].<span class="built_in">real</span>() + <span class="number">0.5</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; ++i)</span><br><span class="line">            tmp[i + <span class="number">1</span>] += tmp[i] / MAXB, tmp[i] %= MAXB;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            lhs[i] = tmp[i];</span><br><span class="line">        <span class="keyword">while</span> (*lhs.<span class="built_in">rbegin</span>() == <span class="number">0</span>)</span><br><span class="line">            lhs.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">return</span> lhs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">is_less</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; lhs, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; rhs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lhs.<span class="built_in">size</span>() != rhs.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> lhs.<span class="built_in">size</span>() &lt; rhs.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = lhs.<span class="built_in">size</span>() - <span class="number">1</span>; ~i; --i)</span><br><span class="line">            <span class="keyword">if</span> (lhs[i] != rhs[i])</span><br><span class="line">                <span class="keyword">return</span> lhs[i] &lt; rhs[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">qpow</span><span class="params">(vector&lt;<span class="type">int</span>&gt; x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret&#123;<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, <span class="built_in">polymul</span>(x, x))</span><br><span class="line">            <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">polymul</span>(ret, x);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> bignum;</span><br><span class="line"><span class="type">int</span> n, cur, num;</span><br><span class="line"><span class="type">char</span> buf[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; inp, now, now2;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, vec[vec.<span class="built_in">size</span>() - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = vec.<span class="built_in">size</span>() - <span class="number">2</span>; ~i; --i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02d&quot;</span>, vec[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">6</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">is_less</span>(inp, vector&lt;<span class="type">int</span>&gt;&#123;n&#125;);</span><br><span class="line">    <span class="type">int</span> tx, ty;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">        tx = n / <span class="number">3</span> - <span class="number">1</span>, ty = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">1</span>)</span><br><span class="line">        tx = n / <span class="number">3</span> - <span class="number">1</span>, ty = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">2</span>)</span><br><span class="line">        tx = n / <span class="number">3</span> - <span class="number">1</span>, ty = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur &lt; tx)</span><br><span class="line">        <span class="built_in">polymul</span>(now, <span class="number">3</span>), ++cur;</span><br><span class="line">    <span class="built_in">polymul</span>(now2 = now, ty);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">is_less</span>(inp, now2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">    n = <span class="built_in">strlen</span>(buf);</span><br><span class="line">    num = <span class="built_in">floor</span>(<span class="number">3</span> * LOG3_10 * (n - <span class="number">1</span>));</span><br><span class="line">    cur = <span class="built_in">max</span>((<span class="type">int</span>)<span class="number">0</span>, num / <span class="number">3</span> - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">reverse</span>(buf, buf + n);</span><br><span class="line">    <span class="keyword">while</span> (n % MAXK)</span><br><span class="line">        buf[n++] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += MAXK) &#123;</span><br><span class="line">        inp.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>, x = <span class="number">1</span>; j &lt; MAXK; ++j, x *= <span class="number">10</span>)</span><br><span class="line">            *inp.<span class="built_in">rbegin</span>() += x * (buf[i + j] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    now = <span class="built_in">qpow</span>(vector&lt;<span class="type">int</span>&gt;&#123;<span class="number">3</span>&#125;, cur);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = num; ; ++i)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(i))</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">write</span>(i), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>), <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4009 汽车加油行驶问题</title>
    <url>/2021/12/31/sol-p4009/</url>
    <content><![CDATA[<h2 id="P4009-汽车加油行驶问题"><a href="#P4009-汽车加油行驶问题" class="headerlink" title="P4009 汽车加油行驶问题"></a>P4009 汽车加油行驶问题</h2><span id="more"></span>
<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P4009">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>分层图跑dijkstra。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4009.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4009</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> pii = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">150</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXK = <span class="number">15</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXV = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXE = <span class="number">4e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> DX[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> DY[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> v, cost;</span><br><span class="line">&#125; edge[MAXE];</span><br><span class="line"><span class="type">int</span> n, k, a, b, c, mp[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> s, t, num, pt[MAXN][MAXN][MAXK];</span><br><span class="line"><span class="type">int</span> tot, head[MAXV], nxt[MAXE], dis[MAXV];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">    edge[++tot] = &#123;v, cost&#125;;</span><br><span class="line">    nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; que;</span><br><span class="line">    <span class="built_in">fill</span>(dis, dis + MAXV, INF);</span><br><span class="line">    dis[s] = <span class="number">0</span>, que.<span class="built_in">push</span>(&#123;dis[s], s&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> u = que.<span class="built_in">top</span>().second, d = que.<span class="built_in">top</span>().first;</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (d &gt; dis[u])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u] + edge[i].cost) &#123;</span><br><span class="line">                dis[v] = dis[u] + edge[i].cost;</span><br><span class="line">                que.<span class="built_in">push</span>(&#123;dis[v], v&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(k), <span class="built_in">read</span>(a), <span class="built_in">read</span>(b), <span class="built_in">read</span>(c);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="built_in">read</span>(mp[i][j]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt;= k; ++l)</span><br><span class="line">                pt[i][j][l] = ++num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    s = pt[<span class="number">1</span>][<span class="number">1</span>][k], t = ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= k; ++i)</span><br><span class="line">        <span class="built_in">addedge</span>(pt[n][n][i], t, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mp[i][j]) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt;= k; ++l)</span><br><span class="line">                    <span class="built_in">addedge</span>(pt[i][j][l], pt[i][j][k], a);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> d = <span class="number">0</span>; d &lt; <span class="number">4</span>; ++d) &#123;</span><br><span class="line">                    <span class="type">int</span> x = i + DX[d], y = j + DY[d];</span><br><span class="line">                    <span class="keyword">if</span> (x &lt; <span class="number">1</span> || y &lt; <span class="number">1</span> || x &gt; n || y &gt; n)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="built_in">addedge</span>(pt[i][j][k], pt[x][y][k - <span class="number">1</span>], d &gt; <span class="number">1</span> ? <span class="number">0</span> : b);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> d = <span class="number">0</span>; d &lt; <span class="number">4</span>; ++d) &#123;</span><br><span class="line">                    <span class="type">int</span> x = i + DX[d], y = j + DY[d];</span><br><span class="line">                    <span class="keyword">if</span> (x &lt; <span class="number">1</span> || y &lt; <span class="number">1</span> || x &gt; n || y &gt; n)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>; l &lt;= k; ++l)</span><br><span class="line">                        <span class="built_in">addedge</span>(pt[i][j][l], pt[x][y][l - <span class="number">1</span>], d &gt; <span class="number">1</span> ? <span class="number">0</span> : b);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">addedge</span>(pt[i][j][<span class="number">0</span>], pt[i][j][k], a + c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">write</span>(<span class="built_in">dijkstra</span>(s, t)), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4015 运输问题</title>
    <url>/2021/12/30/sol-p4015/</url>
    <content><![CDATA[<h2 id="P4015-运输问题"><a href="#P4015-运输问题" class="headerlink" title="P4015 运输问题"></a>P4015 运输问题</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4015">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>怎么会有这么sb的题目啊。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4015.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4015</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">const</span> <span class="type">int</span> MAXV, <span class="type">const</span> <span class="type">int</span> MAXE&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MINCMF</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, flow, cost;</span><br><span class="line">    &#125; edge[MAXE * <span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>, head[MAXV], nxt[MAXE];</span><br><span class="line">    <span class="type">int</span> flow, cost, cur[MAXV], dis[MAXV];</span><br><span class="line">    <span class="type">bool</span> vis[MAXV];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> flow, <span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, flow, cost&#125;;</span><br><span class="line">        nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, <span class="number">0</span>, -cost&#125;;</span><br><span class="line">        nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>(vis, vis + MAXV, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(dis, dis + MAXV, INF);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line">        vis[s] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            vis[u] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[i].v;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; dis[v] &gt; dis[u] + edge[i].cost) &#123;</span><br><span class="line">                    dis[v] = dis[u] + edge[i].cost;</span><br><span class="line">                    <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                        que.<span class="built_in">push</span>(v);</span><br><span class="line">                        vis[v] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis[t] != INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">augment</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (vis[v] || dis[v] != dis[u] + edge[i].cost)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">augment</span>(v, t, <span class="built_in">min</span>(mx, edge[i].flow));</span><br><span class="line">            cost += tmp * edge[i].cost;</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">mcmf</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">spfa</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">copy</span>(head, head + MAXV, cur);</span><br><span class="line">            flow += <span class="built_in">augment</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">make_pair</span>(flow, cost);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">const</span> <span class="type">int</span> MAXV, <span class="type">const</span> <span class="type">int</span> MAXE&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MAXCMF</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, flow, cost;</span><br><span class="line">    &#125; edge[MAXE * <span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>, head[MAXV], nxt[MAXE];</span><br><span class="line">    <span class="type">int</span> flow, cost, cur[MAXV], dis[MAXV];</span><br><span class="line">    <span class="type">bool</span> vis[MAXV];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> flow, <span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, flow, cost&#125;;</span><br><span class="line">        nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, <span class="number">0</span>, -cost&#125;;</span><br><span class="line">        nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>(vis, vis + MAXV, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(dis, dis + MAXV, -INF);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line">        vis[s] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            vis[u] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[i].v;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; dis[v] &lt; dis[u] + edge[i].cost) &#123;</span><br><span class="line">                    dis[v] = dis[u] + edge[i].cost;</span><br><span class="line">                    <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                        que.<span class="built_in">push</span>(v);</span><br><span class="line">                        vis[v] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis[t] != -INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">augment</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (vis[v] || dis[v] != dis[u] + edge[i].cost)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">augment</span>(v, t, <span class="built_in">min</span>(mx, edge[i].flow));</span><br><span class="line">            cost += tmp * edge[i].cost;</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">mcmf</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">spfa</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">copy</span>(head, head + MAXV, cur);</span><br><span class="line">            flow += <span class="built_in">augment</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">make_pair</span>(flow, cost);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXV = <span class="number">2e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXE = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n, m, s, t, num, a[MAXN], b[MAXN], c[MAXN][MAXN], pt[MAXN][<span class="number">2</span>];</span><br><span class="line">MINCMF&lt;MAXV, MAXE&gt; minnt;</span><br><span class="line">MAXCMF&lt;MAXV, MAXE&gt; maxnt;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    s = ++num, t = ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(a[i]), pt[i][<span class="number">0</span>] = ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">read</span>(b[i]), pt[i][<span class="number">1</span>] = ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            <span class="built_in">read</span>(c[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        minnt.<span class="built_in">addedge</span>(s, pt[i][<span class="number">0</span>], a[i], <span class="number">0</span>);</span><br><span class="line">        maxnt.<span class="built_in">addedge</span>(s, pt[i][<span class="number">0</span>], a[i], <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        minnt.<span class="built_in">addedge</span>(pt[i][<span class="number">1</span>], t, b[i], <span class="number">0</span>);</span><br><span class="line">        maxnt.<span class="built_in">addedge</span>(pt[i][<span class="number">1</span>], t, b[i], <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            minnt.<span class="built_in">addedge</span>(pt[i][<span class="number">0</span>], pt[j][<span class="number">1</span>], INF, c[i][j]);</span><br><span class="line">            maxnt.<span class="built_in">addedge</span>(pt[i][<span class="number">0</span>], pt[j][<span class="number">1</span>], INF, c[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">write</span>(minnt.<span class="built_in">mcmf</span>(s, t).second), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">write</span>(maxnt.<span class="built_in">mcmf</span>(s, t).second), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4014 分配问题</title>
    <url>/2021/12/30/sol-p4014/</url>
    <content><![CDATA[<h2 id="P4014-分配问题"><a href="#P4014-分配问题" class="headerlink" title="P4014 分配问题"></a>P4014 分配问题</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4014">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>不就是个二分图最小/最大权匹配吗，就这也能紫题？</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4014.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4014</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">const</span> <span class="type">int</span> MAXV, <span class="type">const</span> <span class="type">int</span> MAXE&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MINCMF</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, flow, cost;</span><br><span class="line">    &#125; edge[MAXE * <span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>, head[MAXV], nxt[MAXE];</span><br><span class="line">    <span class="type">int</span> flow, cost, cur[MAXV], dis[MAXV];</span><br><span class="line">    <span class="type">bool</span> vis[MAXV];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> flow, <span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, flow, cost&#125;;</span><br><span class="line">        nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, <span class="number">0</span>, -cost&#125;;</span><br><span class="line">        nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>(vis, vis + MAXV, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(dis, dis + MAXV, INF);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line">        vis[s] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            vis[u] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[i].v;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; dis[v] &gt; dis[u] + edge[i].cost) &#123;</span><br><span class="line">                    dis[v] = dis[u] + edge[i].cost;</span><br><span class="line">                    <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                        que.<span class="built_in">push</span>(v);</span><br><span class="line">                        vis[v] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis[t] != INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">augment</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (vis[v] || dis[v] != dis[u] + edge[i].cost)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">augment</span>(v, t, <span class="built_in">min</span>(mx, edge[i].flow));</span><br><span class="line">            cost += tmp * edge[i].cost;</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">mcmf</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">spfa</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">copy</span>(head, head + MAXV, cur);</span><br><span class="line">            flow += <span class="built_in">augment</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">make_pair</span>(flow, cost);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">const</span> <span class="type">int</span> MAXV, <span class="type">const</span> <span class="type">int</span> MAXE&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MAXCMF</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, flow, cost;</span><br><span class="line">    &#125; edge[MAXE * <span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>, head[MAXV], nxt[MAXE];</span><br><span class="line">    <span class="type">int</span> flow, cost, cur[MAXV], dis[MAXV];</span><br><span class="line">    <span class="type">bool</span> vis[MAXV];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> flow, <span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, flow, cost&#125;;</span><br><span class="line">        nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, <span class="number">0</span>, -cost&#125;;</span><br><span class="line">        nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>(vis, vis + MAXV, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(dis, dis + MAXV, -INF);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line">        vis[s] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            vis[u] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[i].v;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; dis[v] &lt; dis[u] + edge[i].cost) &#123;</span><br><span class="line">                    dis[v] = dis[u] + edge[i].cost;</span><br><span class="line">                    <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                        que.<span class="built_in">push</span>(v);</span><br><span class="line">                        vis[v] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis[t] != -INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">augment</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (vis[v] || dis[v] != dis[u] + edge[i].cost)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">augment</span>(v, t, <span class="built_in">min</span>(mx, edge[i].flow));</span><br><span class="line">            cost += tmp * edge[i].cost;</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">mcmf</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">spfa</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">copy</span>(head, head + MAXV, cur);</span><br><span class="line">            flow += <span class="built_in">augment</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">make_pair</span>(flow, cost);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXV = <span class="number">2e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXE = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n, s, t, num, a[MAXN][MAXN], pt[MAXN][<span class="number">2</span>];</span><br><span class="line">MINCMF&lt;MAXV, MAXE&gt; minnt;</span><br><span class="line">MAXCMF&lt;MAXV, MAXE&gt; maxnt;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    s = ++num, t = ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        pt[i][<span class="number">0</span>] = ++num, pt[i][<span class="number">1</span>] = ++num;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="built_in">read</span>(a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        minnt.<span class="built_in">addedge</span>(s, pt[i][<span class="number">0</span>], <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        maxnt.<span class="built_in">addedge</span>(s, pt[i][<span class="number">0</span>], <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        minnt.<span class="built_in">addedge</span>(pt[i][<span class="number">1</span>], t, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        maxnt.<span class="built_in">addedge</span>(pt[i][<span class="number">1</span>], t, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            minnt.<span class="built_in">addedge</span>(pt[i][<span class="number">0</span>], pt[j][<span class="number">1</span>], <span class="number">1</span>, a[i][j]);</span><br><span class="line">            maxnt.<span class="built_in">addedge</span>(pt[i][<span class="number">0</span>], pt[j][<span class="number">1</span>], <span class="number">1</span>, a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">write</span>(minnt.<span class="built_in">mcmf</span>(s, t).second), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">write</span>(maxnt.<span class="built_in">mcmf</span>(s, t).second), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4013 数字梯形问题</title>
    <url>/2021/12/30/sol-p4013/</url>
    <content><![CDATA[<h2 id="P4013-数字梯形问题"><a href="#P4013-数字梯形问题" class="headerlink" title="P4013 数字梯形问题"></a>P4013 数字梯形问题</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4013">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>三次询问分别拆点构建网络流即可。</p>
<p>费用流不能在残余网络上加边重新跑，否则无法保证最大/最小费用。</p>
<p>数组应当开$20 \times 40$而不是$20 \times 20$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4013.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4013</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">const</span> <span class="type">int</span> MAXV, <span class="type">const</span> <span class="type">int</span> MAXE&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MCMF</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, flow, cost;</span><br><span class="line">    &#125; edge[MAXE * <span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>, head[MAXV], nxt[MAXE];</span><br><span class="line">    <span class="type">int</span> flow, cost, cur[MAXV], dis[MAXV];</span><br><span class="line">    <span class="type">bool</span> vis[MAXV];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> flow, <span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, flow, cost&#125;;</span><br><span class="line">        nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, <span class="number">0</span>, -cost&#125;;</span><br><span class="line">        nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>(vis, vis + MAXV, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(dis, dis + MAXV, -INF);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line">        vis[s] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            vis[u] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[i].v;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; dis[v] &lt; dis[u] + edge[i].cost) &#123;</span><br><span class="line">                    dis[v] = dis[u] + edge[i].cost;</span><br><span class="line">                    <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                        que.<span class="built_in">push</span>(v);</span><br><span class="line">                        vis[v] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis[t] != -INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">augment</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (vis[v] || dis[v] != dis[u] + edge[i].cost)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">augment</span>(v, t, <span class="built_in">min</span>(mx, edge[i].flow));</span><br><span class="line">            cost += tmp * edge[i].cost;</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">mcmf</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">spfa</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">copy</span>(head, head + MAXV, cur);</span><br><span class="line">            flow += <span class="built_in">augment</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">make_pair</span>(flow, cost);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">45</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXV = <span class="number">4e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXE = <span class="number">4e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> m, n, s, t, num, a[MAXN][MAXN], pt[MAXN][MAXN][<span class="number">2</span>];</span><br><span class="line">MCMF&lt;MAXV, MAXE&gt; nt[<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(m), <span class="built_in">read</span>(n);</span><br><span class="line">    s = ++num, t = ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; m + i; ++j) &#123;</span><br><span class="line">            <span class="built_in">read</span>(a[i][j]);</span><br><span class="line">            pt[i][j][<span class="number">0</span>] = ++num;</span><br><span class="line">            pt[i][j][<span class="number">1</span>] = ++num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">0</span>; w &lt; <span class="number">3</span>; ++w) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            nt[w].<span class="built_in">addedge</span>(s, pt[<span class="number">1</span>][i][<span class="number">0</span>], <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m + n; ++i)</span><br><span class="line">            nt[w].<span class="built_in">addedge</span>(pt[n][i][<span class="number">1</span>], t, INF, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; m + i; ++j)</span><br><span class="line">                nt[w].<span class="built_in">addedge</span>(pt[i][j][<span class="number">0</span>], pt[i][j][<span class="number">1</span>], <span class="number">1</span>, a[i][j]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; m + i; ++j) &#123;</span><br><span class="line">                nt[w].<span class="built_in">addedge</span>(pt[i][j][<span class="number">1</span>], pt[i + <span class="number">1</span>][j][<span class="number">0</span>], <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                nt[w].<span class="built_in">addedge</span>(pt[i][j][<span class="number">1</span>], pt[i + <span class="number">1</span>][j + <span class="number">1</span>][<span class="number">0</span>], <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">1</span>; w &lt; <span class="number">3</span>; ++w) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; m + i; ++j)</span><br><span class="line">                nt[w].<span class="built_in">addedge</span>(pt[i][j][<span class="number">0</span>], pt[i][j][<span class="number">1</span>], INF, a[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">2</span>; w &lt; <span class="number">3</span>; ++w) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; m + i; ++j) &#123;</span><br><span class="line">                nt[w].<span class="built_in">addedge</span>(pt[i][j][<span class="number">1</span>], pt[i + <span class="number">1</span>][j][<span class="number">0</span>], INF, <span class="number">0</span>);</span><br><span class="line">                nt[w].<span class="built_in">addedge</span>(pt[i][j][<span class="number">1</span>], pt[i + <span class="number">1</span>][j + <span class="number">1</span>][<span class="number">0</span>], INF, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">0</span>; w &lt; <span class="number">3</span>; ++w)</span><br><span class="line">        <span class="built_in">write</span>(nt[w].<span class="built_in">mcmf</span>(s, t).second), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4012 深海机器人问题</title>
    <url>/2021/12/30/sol-p4012/</url>
    <content><![CDATA[<h2 id="P4012-深海机器人问题"><a href="#P4012-深海机器人问题" class="headerlink" title="P4012 深海机器人问题"></a>P4012 深海机器人问题</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4012">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>图蛮好建的，跑MCMF。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4012.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4012</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">const</span> <span class="type">int</span> MAXV, <span class="type">const</span> <span class="type">int</span> MAXE&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MCMF</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, flow, cost;</span><br><span class="line">    &#125; edge[MAXE * <span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>, head[MAXV], nxt[MAXE];</span><br><span class="line">    <span class="type">int</span> flow, cost, cur[MAXV], dis[MAXV];</span><br><span class="line">    <span class="type">bool</span> vis[MAXV];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> flow, <span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, flow, cost&#125;;</span><br><span class="line">        nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, <span class="number">0</span>, -cost&#125;;</span><br><span class="line">        nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>(vis, vis + MAXV, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(dis, dis + MAXV, -INF);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line">        vis[s] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            vis[u] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[i].v;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; dis[v] &lt; dis[u] + edge[i].cost) &#123;</span><br><span class="line">                    dis[v] = dis[u] + edge[i].cost;</span><br><span class="line">                    <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                        que.<span class="built_in">push</span>(v);</span><br><span class="line">                        vis[v] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis[t] != -INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">augment</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (vis[v] || dis[v] != dis[u] + edge[i].cost)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">augment</span>(v, t, <span class="built_in">min</span>(mx, edge[i].flow));</span><br><span class="line">            cost += tmp * edge[i].cost;</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">mcmf</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">spfa</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">copy</span>(head, head + MAXV, cur);</span><br><span class="line">            flow += <span class="built_in">augment</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">make_pair</span>(flow, cost);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">50</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXV = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXE = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> a, b, p, q, s, t, num, pt[MAXN][MAXN];</span><br><span class="line">MCMF&lt;MAXV, MAXE&gt; network;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(a), <span class="built_in">read</span>(b);</span><br><span class="line">    <span class="built_in">read</span>(p), <span class="built_in">read</span>(q);</span><br><span class="line">    s = ++num, t = ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= p; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= q; ++j)</span><br><span class="line">            pt[i][j] = ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= p; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; q; ++j) &#123;</span><br><span class="line">            <span class="type">int</span> cost;</span><br><span class="line">            <span class="built_in">read</span>(cost);</span><br><span class="line">            network.<span class="built_in">addedge</span>(pt[i][j], pt[i][j + <span class="number">1</span>], <span class="number">1</span>, cost);</span><br><span class="line">            network.<span class="built_in">addedge</span>(pt[i][j], pt[i][j + <span class="number">1</span>], INF, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= q; ++j) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; p; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> cost;</span><br><span class="line">            <span class="built_in">read</span>(cost);</span><br><span class="line">            network.<span class="built_in">addedge</span>(pt[i][j], pt[i + <span class="number">1</span>][j], <span class="number">1</span>, cost);</span><br><span class="line">            network.<span class="built_in">addedge</span>(pt[i][j], pt[i + <span class="number">1</span>][j], INF, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> k, x, y;</span><br><span class="line">        <span class="built_in">read</span>(k), <span class="built_in">read</span>(x), <span class="built_in">read</span>(y);</span><br><span class="line">        network.<span class="built_in">addedge</span>(s, pt[x][y], k, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= b; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> k, x, y;</span><br><span class="line">        <span class="built_in">read</span>(k), <span class="built_in">read</span>(x), <span class="built_in">read</span>(y);</span><br><span class="line">        network.<span class="built_in">addedge</span>(pt[x][y], t, k, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">write</span>(network.<span class="built_in">mcmf</span>(s, t).second), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P3357 最长k可重线段集问题</title>
    <url>/2021/12/27/sol-p3357/</url>
    <content><![CDATA[<h2 id="P3357-最长k可重线段集问题"><a href="#P3357-最长k可重线段集问题" class="headerlink" title="P3357 最长k可重线段集问题"></a>P3357 最长k可重线段集问题</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P3357">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>在<a href="/2021/12/27/sol-p3358/" title="P3358">P3358</a>的基础上，多出来了线段与$x$轴垂直的问题，如果和刚刚一样连边就会导致$i \to i$自环的问题。所以进行拆点，如果$l=r$则连接$in(l)$和$out(r)$，否则连接$out(l)$和$in(r)$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P3357.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P3357</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">const</span> <span class="type">int</span> MAXV, <span class="type">const</span> <span class="type">int</span> MAXE&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MCMF</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, flow, cost;</span><br><span class="line">    &#125; edge[MAXE * <span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>, head[MAXV], nxt[MAXE];</span><br><span class="line">    <span class="type">int</span> flow, cost, cur[MAXV], dis[MAXV];</span><br><span class="line">    <span class="type">bool</span> vis[MAXV];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> flow, <span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, flow, cost&#125;;</span><br><span class="line">        nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, <span class="number">0</span>, -cost&#125;;</span><br><span class="line">        nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>(vis, vis + MAXV, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(dis, dis + MAXV, -INF);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line">        vis[s] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            vis[u] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[i].v;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; dis[v] &lt; dis[u] + edge[i].cost) &#123;</span><br><span class="line">                    dis[v] = dis[u] + edge[i].cost;</span><br><span class="line">                    <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                        que.<span class="built_in">push</span>(v);</span><br><span class="line">                        vis[v] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis[t] != -INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">augment</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (vis[v] || dis[v] != dis[u] + edge[i].cost)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">augment</span>(v, t, <span class="built_in">min</span>(mx, edge[i].flow));</span><br><span class="line">            cost += tmp * edge[i].cost;</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">mcmf</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">spfa</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">copy</span>(head, head + MAXV, cur);</span><br><span class="line">            flow += <span class="built_in">augment</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">make_pair</span>(flow, cost);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXV = <span class="number">2e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXE = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n, k, m, s, t, num, a[MAXN], l[MAXN], r[MAXN], p[MAXN], pt[MAXN][<span class="number">2</span>];</span><br><span class="line">MCMF&lt;MAXV, MAXE&gt; network;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> sx, sy, tx, ty;</span><br><span class="line">        <span class="built_in">read</span>(sx), <span class="built_in">read</span>(sy);</span><br><span class="line">        <span class="built_in">read</span>(tx), <span class="built_in">read</span>(ty);</span><br><span class="line">        <span class="keyword">if</span> (sx &gt; tx)</span><br><span class="line">            <span class="built_in">swap</span>(sx, tx);</span><br><span class="line">        l[i] = sx, r[i] = tx;</span><br><span class="line">        p[++m] = l[i], p[++m] = r[i];</span><br><span class="line">        a[i] = <span class="built_in">sqrt</span>((sx - tx) * (sx - tx) + (sy - ty) * (sy - ty));</span><br><span class="line">    &#125;</span><br><span class="line">    p[++m] = -INF, p[++m] = INF;</span><br><span class="line">    <span class="built_in">sort</span>(p + <span class="number">1</span>, p + m + <span class="number">1</span>);</span><br><span class="line">    m = <span class="built_in">unique</span>(p + <span class="number">1</span>, p + m + <span class="number">1</span>) - p - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        pt[i][<span class="number">0</span>] = ++num, pt[i][<span class="number">1</span>] = ++num;</span><br><span class="line">    s = pt[<span class="number">1</span>][<span class="number">0</span>], t = pt[m][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        l[i] = <span class="built_in">lower_bound</span>(p + <span class="number">1</span>, p + m + <span class="number">1</span>, l[i]) - p;</span><br><span class="line">        r[i] = <span class="built_in">lower_bound</span>(p + <span class="number">1</span>, p + m + <span class="number">1</span>, r[i]) - p;</span><br><span class="line">        <span class="keyword">if</span> (l[i] == r[i])</span><br><span class="line">            network.<span class="built_in">addedge</span>(pt[l[i]][<span class="number">0</span>], pt[r[i]][<span class="number">1</span>], <span class="number">1</span>, a[i]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            network.<span class="built_in">addedge</span>(pt[l[i]][<span class="number">1</span>], pt[r[i]][<span class="number">0</span>], <span class="number">1</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        network.<span class="built_in">addedge</span>(pt[i][<span class="number">0</span>], pt[i][<span class="number">1</span>], k, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; ++i)</span><br><span class="line">        network.<span class="built_in">addedge</span>(pt[i][<span class="number">1</span>], pt[i + <span class="number">1</span>][<span class="number">0</span>], k, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">write</span>(network.<span class="built_in">mcmf</span>(s, t).second), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P3358 最长k可重区间集问题</title>
    <url>/2021/12/27/sol-p3358/</url>
    <content><![CDATA[<h2 id="P3358-最长k可重区间集问题"><a href="#P3358-最长k可重区间集问题" class="headerlink" title="P3358 最长k可重区间集问题"></a>P3358 最长k可重区间集问题</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P3358">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>先离散化，然后在坐标上连接$l_i \to r_i$，花费为$r_i-l_i$，其他边$i \to i+1$流量为$k$，显然这样得到的最大费用最大流就是答案。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P3358.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P3358</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">const</span> <span class="type">int</span> MAXV, <span class="type">const</span> <span class="type">int</span> MAXE&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MCMF</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, flow, cost;</span><br><span class="line">    &#125; edge[MAXE * <span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>, head[MAXV], nxt[MAXE];</span><br><span class="line">    <span class="type">int</span> flow, cost, cur[MAXV], dis[MAXV];</span><br><span class="line">    <span class="type">bool</span> vis[MAXV];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> flow, <span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, flow, cost&#125;;</span><br><span class="line">        nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, <span class="number">0</span>, -cost&#125;;</span><br><span class="line">        nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>(vis, vis + MAXV, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(dis, dis + MAXV, -INF);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line">        vis[s] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            vis[u] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[i].v;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; dis[v] &lt; dis[u] + edge[i].cost) &#123;</span><br><span class="line">                    dis[v] = dis[u] + edge[i].cost;</span><br><span class="line">                    <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                        que.<span class="built_in">push</span>(v);</span><br><span class="line">                        vis[v] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis[t] != -INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">augment</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (vis[v] || dis[v] != dis[u] + edge[i].cost)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">augment</span>(v, t, <span class="built_in">min</span>(mx, edge[i].flow));</span><br><span class="line">            cost += tmp * edge[i].cost;</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">mcmf</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">spfa</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">copy</span>(head, head + MAXV, cur);</span><br><span class="line">            flow += <span class="built_in">augment</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">make_pair</span>(flow, cost);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n, k, m, a[MAXN], l[MAXN], r[MAXN], p[MAXN];</span><br><span class="line">MCMF&lt;MAXN, MAXM&gt; network;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(l[i]), <span class="built_in">read</span>(r[i]);</span><br><span class="line">        p[++m] = l[i], p[++m] = r[i];</span><br><span class="line">        a[i] = r[i] - l[i];</span><br><span class="line">    &#125;</span><br><span class="line">    p[++m] = -INF, p[++m] = INF;</span><br><span class="line">    <span class="built_in">sort</span>(p + <span class="number">1</span>, p + m + <span class="number">1</span>);</span><br><span class="line">    m = <span class="built_in">unique</span>(p + <span class="number">1</span>, p + m + <span class="number">1</span>) - p - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        l[i] = <span class="built_in">lower_bound</span>(p + <span class="number">1</span>, p + m + <span class="number">1</span>, l[i]) - p;</span><br><span class="line">        r[i] = <span class="built_in">lower_bound</span>(p + <span class="number">1</span>, p + m + <span class="number">1</span>, r[i]) - p;</span><br><span class="line">        network.<span class="built_in">addedge</span>(l[i], r[i], <span class="number">1</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; ++i)</span><br><span class="line">        network.<span class="built_in">addedge</span>(i, i + <span class="number">1</span>, k, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">write</span>(network.<span class="built_in">mcmf</span>(<span class="number">1</span>, m).second), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P3356 火星探险问题</title>
    <url>/2021/12/27/sol-p3356/</url>
    <content><![CDATA[<h2 id="P3356-火星探险问题"><a href="#P3356-火星探险问题" class="headerlink" title="P3356 火星探险问题"></a>P3356 火星探险问题</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P3356">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>问题很容易转化成最大费用最大流，拆点分别考虑即可。</p>
<p>如何输出路径呢？只需要跑一次$dfs$或$bfs$，从$S$到$T$走反边流量非零的边即可，记得每次走完将反边的流量$-1$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P3356.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P3356</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">const</span> <span class="type">int</span> MAXV, <span class="type">const</span> <span class="type">int</span> MAXE&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MCMF</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, flow, cost;</span><br><span class="line">    &#125; edge[MAXE * <span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>, head[MAXV], nxt[MAXE];</span><br><span class="line">    <span class="type">int</span> flow, cost, cur[MAXV], dis[MAXV];</span><br><span class="line">    <span class="type">bool</span> vis[MAXV];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> flow, <span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, flow, cost&#125;;</span><br><span class="line">        nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, <span class="number">0</span>, -cost&#125;;</span><br><span class="line">        nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>(vis, vis + MAXV, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(dis, dis + MAXV, -INF);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line">        vis[s] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            vis[u] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[i].v;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; dis[v] &lt; dis[u] + edge[i].cost) &#123;</span><br><span class="line">                    dis[v] = dis[u] + edge[i].cost;</span><br><span class="line">                    <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                        que.<span class="built_in">push</span>(v);</span><br><span class="line">                        vis[v] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis[t] != -INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">augment</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (vis[v] || dis[v] != dis[u] + edge[i].cost)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">augment</span>(v, t, <span class="built_in">min</span>(mx, edge[i].flow));</span><br><span class="line">            cost += tmp * edge[i].cost;</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">mcmf</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">spfa</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">copy</span>(head, head + MAXV, cur);</span><br><span class="line">            flow += <span class="built_in">augment</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">make_pair</span>(flow, cost);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">40</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXV = <span class="number">4e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXE = <span class="number">8e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n, p, q, s, t, num, mp[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> px[MAXV], py[MAXV], pt[MAXN][MAXN][<span class="number">2</span>];</span><br><span class="line">MCMF&lt;MAXV, MAXE&gt; network;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> cnt, <span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = network.head[u]; i; i = network.nxt[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = network.edge[i].v;</span><br><span class="line">        <span class="keyword">if</span> ((i &amp; <span class="number">1</span>) == <span class="number">0</span> &amp;&amp; network.edge[i ^ <span class="number">1</span>].flow) &#123;</span><br><span class="line">            <span class="keyword">if</span> (px[u] &amp;&amp; py[u] &amp;&amp; px[v] &amp;&amp; py[v] &amp;&amp; ((px[u] ^ px[v]) || (py[u] ^ py[v])))</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld\n&quot;</span>, cnt, py[v] - py[u]);</span><br><span class="line">            --network.edge[i ^ <span class="number">1</span>].flow;</span><br><span class="line">            <span class="built_in">print</span>(cnt, v);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(p), <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= p; ++j)</span><br><span class="line">            <span class="built_in">read</span>(mp[i][j]);</span><br><span class="line">    s = ++num, t = ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= p; ++j) &#123;</span><br><span class="line">            pt[i][j][<span class="number">0</span>] = ++num;</span><br><span class="line">            px[num] = i, py[num] = j;</span><br><span class="line">            pt[i][j][<span class="number">1</span>] = ++num;</span><br><span class="line">            px[num] = i, py[num] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    network.<span class="built_in">addedge</span>(s, pt[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>], n, <span class="number">0</span>);</span><br><span class="line">    network.<span class="built_in">addedge</span>(pt[q][p][<span class="number">1</span>], t, n, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= p; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mp[i][j] != <span class="number">1</span>)</span><br><span class="line">                network.<span class="built_in">addedge</span>(pt[i][j][<span class="number">0</span>], pt[i][j][<span class="number">1</span>], INF, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (mp[i][j] == <span class="number">2</span>)</span><br><span class="line">                network.<span class="built_in">addedge</span>(pt[i][j][<span class="number">0</span>], pt[i][j][<span class="number">1</span>], <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; q)</span><br><span class="line">                network.<span class="built_in">addedge</span>(pt[i][j][<span class="number">1</span>], pt[i + <span class="number">1</span>][j][<span class="number">0</span>], INF, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (j &lt; p)</span><br><span class="line">                network.<span class="built_in">addedge</span>(pt[i][j][<span class="number">1</span>], pt[i][j + <span class="number">1</span>][<span class="number">0</span>], INF, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    network.<span class="built_in">mcmf</span>(s, t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">print</span>(i, s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P3355 骑士共存问题</title>
    <url>/2021/12/25/sol-p3355/</url>
    <content><![CDATA[<h2 id="P3355-骑士共存问题"><a href="#P3355-骑士共存问题" class="headerlink" title="P3355 骑士共存问题"></a>P3355 骑士共存问题</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P3355">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>显然是一个二分图最小割问题。</p>
<p>如果不考虑障碍，可以直接源点到左边点、右边点到汇点连$1$的边，而左右点之间冲突的连$+\infty$。</p>
<p>现在考虑障碍物。思考之前建图的意义，一个点和源点/汇点之间的边被割掉代表不取这个点。于是这些障碍物显然不能取，所以干脆不将它们连边，最后答案在$n \times n - mincut$的基础上再减去$m$就可以了。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P3355.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P3355</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">const</span> <span class="type">int</span> MAXV, <span class="type">const</span> <span class="type">int</span> MAXE&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dinic</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, flow;</span><br><span class="line">    &#125; edge[MAXE * <span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>, flow = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> head[MAXV], lev[MAXV], cur[MAXV], nxt[MAXE * <span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> flow)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, flow&#125;;</span><br><span class="line">        nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, <span class="number">0</span>&#125;;</span><br><span class="line">        nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>(lev, lev + MAXV, <span class="number">-1</span>);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        lev[s] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[i].v;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; lev[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    lev[v] = lev[u] + <span class="number">1</span>;</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lev[t] != <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">augment</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (lev[v] != lev[u] + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">augment</span>(v, t, <span class="built_in">min</span>(mx, edge[i].flow));</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxflow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">copy</span>(head, head + MAXV, cur);</span><br><span class="line">            flow += <span class="built_in">augment</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">205</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXV = <span class="number">4e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXE = <span class="number">4e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> DX[<span class="number">8</span>] = &#123;<span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> DY[<span class="number">8</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">-2</span>, <span class="number">2</span>, <span class="number">-2</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> n, m, s, t, num, mp[MAXN][MAXN], pt[MAXN][MAXN];</span><br><span class="line">Dinic&lt;MAXV, MAXE&gt; network;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="built_in">read</span>(x), <span class="built_in">read</span>(y);</span><br><span class="line">        mp[x][y] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s = ++num, t = ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            pt[i][j] = ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mp[i][j])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> ((i ^ j) &amp; <span class="number">1</span>)</span><br><span class="line">                network.<span class="built_in">addedge</span>(s, pt[i][j], <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                network.<span class="built_in">addedge</span>(pt[i][j], t, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span>; ++k) &#123;</span><br><span class="line">                <span class="type">int</span> x = i + DX[k];</span><br><span class="line">                <span class="type">int</span> y = j + DY[k];</span><br><span class="line">                <span class="keyword">if</span> (x &lt; <span class="number">1</span> || y &lt; <span class="number">1</span> || x &gt; n || y &gt; n)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (mp[x][y])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> ((i ^ j) &amp; <span class="number">1</span>)</span><br><span class="line">                    network.<span class="built_in">addedge</span>(pt[i][j], pt[x][y], INF);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = n * n - m - network.<span class="built_in">maxflow</span>(s, t);</span><br><span class="line">    <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P3254 圆桌问题</title>
    <url>/2021/12/25/sol-p3254/</url>
    <content><![CDATA[<h2 id="P3254-圆桌问题"><a href="#P3254-圆桌问题" class="headerlink" title="P3254 圆桌问题"></a>P3254 圆桌问题</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P3254">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>较为显然的二分图网络流。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P3254.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P3254</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">550</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dinic</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, flow;</span><br><span class="line">    &#125; edge[MAXM];</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>, flow = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> head[MAXN], nxt[MAXM], lev[MAXN], cur[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> flow)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, flow&#125;;</span><br><span class="line">        nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, <span class="number">0</span>&#125;;</span><br><span class="line">        nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>(lev, lev + MAXN, <span class="number">-1</span>);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        lev[s] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[i].v;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; lev[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    lev[v] = lev[u] + <span class="number">1</span>;</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lev[t] != <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">augment</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (lev[v] != lev[u] + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">augment</span>(v, t, <span class="built_in">min</span>(mx, edge[i].flow));</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxflow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">copy</span>(head, head + MAXN, cur);</span><br><span class="line">            flow += <span class="built_in">augment</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, s, t, num, r[MAXN], c[MAXN], pt[MAXN][<span class="number">2</span>];</span><br><span class="line">Dinic network;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; answ[MAXN];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(m), <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">read</span>(r[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(c[i]);</span><br><span class="line">    s = ++num, t = ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        pt[i][<span class="number">0</span>] = ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        pt[i][<span class="number">1</span>] = ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        network.<span class="built_in">addedge</span>(s, pt[i][<span class="number">1</span>], r[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        network.<span class="built_in">addedge</span>(pt[i][<span class="number">0</span>], t, c[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">            network.<span class="built_in">addedge</span>(pt[j][<span class="number">1</span>], pt[i][<span class="number">0</span>], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        sum += r[i];</span><br><span class="line">    <span class="keyword">if</span> (network.<span class="built_in">maxflow</span>(s, t) != sum)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>), <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = network.head[pt[i][<span class="number">0</span>]]; j; j = network.nxt[j])</span><br><span class="line">            <span class="keyword">if</span> (network.edge[j].flow &amp;&amp; network.edge[j].v &gt; n + <span class="number">2</span>)</span><br><span class="line">                answ[network.edge[j].v - n - <span class="number">2</span>].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; answ[i].<span class="built_in">size</span>(); ++j)</span><br><span class="line">            <span class="built_in">write</span>(answ[i][j]), <span class="built_in">putchar</span>(<span class="string">&quot; \n&quot;</span>[j == answ[i].<span class="built_in">size</span>() - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P2774 方格取数问题</title>
    <url>/2021/12/25/sol-p2774/</url>
    <content><![CDATA[<h2 id="P2774-方格取数问题"><a href="#P2774-方格取数问题" class="headerlink" title="P2774 方格取数问题"></a>P2774 方格取数问题</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P2774">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>使用割模型来做。由于相邻的数不能同时取，于是很容易想到建立二分图，二分图两侧的点之间连$+\infty$的边，并且分别向源点和汇点连边，流量为对应权值。这样最小割一定只能割掉两侧与源点和汇点的连边，被割掉的边一定不取。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P2774.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P2774</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dinic</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, flow;</span><br><span class="line">    &#125; edge[MAXM];</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>, flow = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> head[MAXN], nxt[MAXM], lev[MAXN], cur[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> flow)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, flow&#125;;</span><br><span class="line">        nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, <span class="number">0</span>&#125;;</span><br><span class="line">        nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>(lev, lev + MAXN, <span class="number">-1</span>);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        lev[s] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[i].v;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; lev[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    lev[v] = lev[u] + <span class="number">1</span>;</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lev[t] != <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">augment</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (lev[v] != lev[u] + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">augment</span>(v, t, <span class="built_in">min</span>(mx, edge[i].flow));</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxflow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">copy</span>(head, head + MAXN, cur);</span><br><span class="line">            flow += <span class="built_in">augment</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, s, t, num, a[MAXN][MAXN], pt[MAXN][MAXN];</span><br><span class="line">Dinic network;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">            <span class="built_in">read</span>(a[i][j]);</span><br><span class="line">    s = ++num, t = ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">            pt[i][j] = ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((i ^ j) &amp; <span class="number">1</span>)</span><br><span class="line">                network.<span class="built_in">addedge</span>(s, pt[i][j], a[i][j]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                network.<span class="built_in">addedge</span>(pt[i][j], t, a[i][j]);</span><br><span class="line">            <span class="keyword">if</span> (((i ^ j) &amp; <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">1</span>)</span><br><span class="line">                network.<span class="built_in">addedge</span>(pt[i][j], pt[i - <span class="number">1</span>][j], INF);</span><br><span class="line">            <span class="keyword">if</span> (j &gt; <span class="number">1</span>)</span><br><span class="line">                network.<span class="built_in">addedge</span>(pt[i][j], pt[i][j - <span class="number">1</span>], INF);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; n)</span><br><span class="line">                network.<span class="built_in">addedge</span>(pt[i][j], pt[i + <span class="number">1</span>][j], INF);</span><br><span class="line">            <span class="keyword">if</span> (j &lt; m)</span><br><span class="line">                network.<span class="built_in">addedge</span>(pt[i][j], pt[i][j + <span class="number">1</span>], INF);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">            ans += a[i][j];</span><br><span class="line">    ans -= network.<span class="built_in">maxflow</span>(s, t);</span><br><span class="line">    <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4716 【模版】最小树形图</title>
    <url>/2021/12/25/sol-p4716/</url>
    <content><![CDATA[<h2 id="P4716-【模版】最小树形图"><a href="#P4716-【模版】最小树形图" class="headerlink" title="P4716 【模版】最小树形图"></a>P4716 【模版】最小树形图</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4716">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>模版题没啥好说的，用$zl$算法即可。</p>
<p>步骤如下：</p>
<ol>
<li>对于每个除了根节点之外的节点，令其边权最小的入边为$fa_u$，边权为$mn_u$。</li>
<li>判断是否有节点没有入边，若没有则无解，直接返回$-1$。否则答案加上$mn_u$。</li>
<li>将图中这些边形成的环全部缩点，并重新编号。</li>
<li>若图中无环，结束算法，返回当前答案。</li>
<li>将不在环中的点也重新编号。</li>
<li>对于每条边$(u,v,w)$，将$w$减去$mn_v$。</li>
<li>更新变量$n$和$rt$，清空最大编号，重复步骤$1$。</li>
</ol>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4716.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4716</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">150</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> u, v, w;</span><br><span class="line">&#125; e[MAXM];</span><br><span class="line"><span class="type">int</span> n, m, r;</span><br><span class="line"><span class="type">int</span> tot, head[MAXN], nxt[MAXM];</span><br><span class="line"><span class="type">int</span> mn[MAXN], fa[MAXN], tp[MAXN], lp[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">    e[++tot] = &#123;u, v, w&#125;;</span><br><span class="line">    nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mdst</span><span class="params">(<span class="type">int</span> rt)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>, tn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">fill</span>(fa, fa + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(tp, tp + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(lp, lp + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(mn, mn + n + <span class="number">1</span>, INF);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            <span class="keyword">if</span> (e[i].u != e[i].v &amp;&amp; e[i].w &lt; mn[e[i].v])</span><br><span class="line">                mn[e[i].v] = e[i].w, fa[e[i].v] = e[i].u;</span><br><span class="line">        mn[rt] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            ret += mn[i];</span><br><span class="line">            <span class="keyword">if</span> (mn[i] == INF)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">1</span>; u &lt;= n; ++u) &#123;</span><br><span class="line">            <span class="type">int</span> v = u;</span><br><span class="line">            <span class="keyword">while</span> (v != rt &amp;&amp; tp[v] != u &amp;&amp; !lp[v])</span><br><span class="line">                tp[v] = u, v = fa[v];</span><br><span class="line">            <span class="keyword">if</span> (v != rt &amp;&amp; !lp[v]) &#123;</span><br><span class="line">                lp[v] = ++tn;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = fa[v]; k != v; k = fa[k])</span><br><span class="line">                    lp[k] = tn;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!tn)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!lp[i])</span><br><span class="line">                lp[i] = ++tn;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            e[i].w -= mn[e[i].v], e[i].u = lp[e[i].u], e[i].v = lp[e[i].v];</span><br><span class="line">        n = tn, rt = lp[rt], tn = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m), <span class="built_in">read</span>(r);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v), <span class="built_in">read</span>(w);</span><br><span class="line">        <span class="built_in">addedge</span>(u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">write</span>(<span class="built_in">mdst</span>(r)), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P2770 航空路线问题</title>
    <url>/2021/12/24/sol-p2770/</url>
    <content><![CDATA[<h2 id="P2770-航空路线问题"><a href="#P2770-航空路线问题" class="headerlink" title="P2770 航空路线问题"></a>P2770 航空路线问题</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P2770">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>$O(n^3)$的$dp$显然<del>（bushi</del></p>
<p>考虑网络流的做法。首先每个点经过一次就想到拆点，然后按照原图连边，从$1$到$n$的最大流$\ge 2$就有解。</p>
<p>需要注意测试点$2$是$1$到$n$有连边且只有$1 \to n \to 1$这种走法的，但其实可以不用特判解决，输出路径时如果剩余流量$=+\infty-2$时多跑一次即可（具体见代码）。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P2770.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P2770</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">505</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">2e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXS = <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dinic</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, flow, cost;</span><br><span class="line">    &#125; edge[MAXM];</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>, flow = <span class="number">0</span>, cost = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> head[MAXN], nxt[MAXM], dis[MAXN], cur[MAXN];</span><br><span class="line">    <span class="type">bool</span> vis[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> flow, <span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, flow, cost&#125;;</span><br><span class="line">        nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, <span class="number">0</span>, -cost&#125;;</span><br><span class="line">        nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>(vis, vis + MAXN, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(dis, dis + MAXN, -INF);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        dis[s] = <span class="number">0</span>, vis[s] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>(), vis[u] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[i].v;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; dis[v] &lt; dis[u] + edge[i].cost) &#123;</span><br><span class="line">                    dis[v] = dis[u] + edge[i].cost;</span><br><span class="line">                    <span class="keyword">if</span> (!vis[v])</span><br><span class="line">                        que.<span class="built_in">push</span>(v), vis[v] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis[t] != -INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">augment</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (vis[v] || dis[v] != dis[u] + edge[i].cost)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">augment</span>(v, t, <span class="built_in">min</span>(mx, edge[i].flow));</span><br><span class="line">            cost += tmp * edge[i].cost;</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">mcmf</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">spfa</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">copy</span>(head, head + MAXN, cur);</span><br><span class="line">            flow += <span class="built_in">augment</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, s, t, num, pt[MAXN][<span class="number">2</span>];</span><br><span class="line"><span class="type">char</span> buf[MAXS], str[MAXN][MAXS];</span><br><span class="line">Dinic network;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (on == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str[u]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (on == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str[u]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = network.head[pt[u][<span class="number">1</span>]]; i; i = network.nxt[i])</span><br><span class="line">        <span class="keyword">if</span> (network.edge[i].flow == INF - <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">print</span>((network.edge[i].v - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, on);</span><br><span class="line">    <span class="keyword">if</span> (on == <span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    s = ++num, t = ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str[i]);</span><br><span class="line">        pt[i][<span class="number">0</span>] = ++num;</span><br><span class="line">        pt[i][<span class="number">1</span>] = ++num;</span><br><span class="line">    &#125;</span><br><span class="line">    network.<span class="built_in">addedge</span>(s, pt[<span class="number">1</span>][<span class="number">1</span>], <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    network.<span class="built_in">addedge</span>(pt[n][<span class="number">0</span>], t, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        network.<span class="built_in">addedge</span>(pt[i][<span class="number">0</span>], pt[i][<span class="number">1</span>], <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(buf, str[j]) == <span class="number">0</span>)</span><br><span class="line">                u = j;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(buf, str[j]) == <span class="number">0</span>)</span><br><span class="line">                v = j;</span><br><span class="line">        <span class="keyword">if</span> (u &gt; v)</span><br><span class="line">            <span class="built_in">swap</span>(u, v);</span><br><span class="line">        network.<span class="built_in">addedge</span>(pt[u][<span class="number">1</span>], pt[v][<span class="number">0</span>], INF, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (network.<span class="built_in">mcmf</span>(s, t) != <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;No Solution!&quot;</span>), <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">write</span>(network.cost), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = network.head[pt[<span class="number">1</span>][<span class="number">1</span>]], on = <span class="number">1</span>; i; i = network.nxt[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (network.edge[i].flow &lt; INF - <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = network.edge[i].flow; j &lt; INF; ++j, on = -on) &#123;</span><br><span class="line">            <span class="keyword">if</span> (on == <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str[<span class="number">1</span>]);</span><br><span class="line">            <span class="built_in">print</span>((network.edge[i].v - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, on);</span><br><span class="line">            <span class="keyword">if</span> (on == <span class="number">-1</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P2766 最长不下降子序列问题</title>
    <url>/2021/12/24/sol-p2766/</url>
    <content><![CDATA[<h2 id="P2766-最长不下降子序列问题"><a href="#P2766-最长不下降子序列问题" class="headerlink" title="P2766 最长不下降子序列问题"></a>P2766 最长不下降子序列问题</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P2766">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>第一问直接$O(n^2)$求。</p>
<p>第二问根据第一问$dp$的合法转移建立$DAG$图，拆点并求出最大流。即对于$\forall a_j \le a_i, dp_i = dp_j + 1$，连接$j_1 \to i_0$，流量为$1$，且连接每个$i_0 \to i_1$。如果$dp_i=1$则连接$S \to i_0$，$dp_i=ans_1$则连接$i_1 \to T$。这样就保证了每次增广都找到一个长度最长的子序列，并且每个点只能取一次。</p>
<p>第三问由于$1$和$n$无限制，所以将$S \to 1$和$n \to T$（如果有）的流量改为$+\infty$，并将$1_0 \to 1_1$和$n_0 \to n_1$也改为$+\infty$即可。注意要特判$n=1$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P2766.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P2766</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dinic</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, flow;</span><br><span class="line">    &#125; edge[MAXM];</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>, flow = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> head[MAXN], nxt[MAXM], lev[MAXN], cur[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> flow)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, flow&#125;;</span><br><span class="line">        nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, <span class="number">0</span>&#125;;</span><br><span class="line">        nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(lev, <span class="number">-1</span>, <span class="built_in">sizeof</span>(lev));</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        lev[s] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[i].v;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; lev[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    lev[v] = lev[u] + <span class="number">1</span>;</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lev[t] != <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">augment</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (lev[v] != lev[u] + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">augment</span>(v, t, <span class="built_in">min</span>(mx, edge[i].flow));</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxflow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(cur, head, <span class="built_in">sizeof</span>(cur));</span><br><span class="line">            flow += <span class="built_in">augment</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, s, t, num, a[MAXN], dp[MAXN], pt[MAXN][<span class="number">2</span>];</span><br><span class="line">Dinic network;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="type">int</span> ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>, ans3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; ++j)</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt;= a[i])</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ans1 = *<span class="built_in">max_element</span>(dp + <span class="number">1</span>, dp + n + <span class="number">1</span>);</span><br><span class="line">    s = ++num, t = ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        pt[i][<span class="number">0</span>] = ++num, pt[i][<span class="number">1</span>] = ++num;</span><br><span class="line">        network.<span class="built_in">addedge</span>(pt[i][<span class="number">0</span>], pt[i][<span class="number">1</span>], <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (dp[i] == <span class="number">1</span>)</span><br><span class="line">            network.<span class="built_in">addedge</span>(s, pt[i][<span class="number">0</span>], <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (dp[i] == ans1)</span><br><span class="line">            network.<span class="built_in">addedge</span>(pt[i][<span class="number">1</span>], t, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; ++j)</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt;= a[i] &amp;&amp; dp[j] + <span class="number">1</span> == dp[i])</span><br><span class="line">                network.<span class="built_in">addedge</span>(pt[j][<span class="number">1</span>], pt[i][<span class="number">0</span>], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ans2 = network.<span class="built_in">maxflow</span>(s, t);</span><br><span class="line">    <span class="keyword">if</span> (dp[<span class="number">1</span>] == <span class="number">1</span>)</span><br><span class="line">        network.<span class="built_in">addedge</span>(s, pt[<span class="number">1</span>][<span class="number">0</span>], INF - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (dp[n] == ans1)</span><br><span class="line">        network.<span class="built_in">addedge</span>(pt[n][<span class="number">1</span>], t, INF - <span class="number">1</span>);</span><br><span class="line">    network.<span class="built_in">addedge</span>(pt[<span class="number">1</span>][<span class="number">0</span>], pt[<span class="number">1</span>][<span class="number">1</span>], INF - <span class="number">1</span>);</span><br><span class="line">    network.<span class="built_in">addedge</span>(pt[n][<span class="number">0</span>], pt[n][<span class="number">1</span>], INF - <span class="number">1</span>);</span><br><span class="line">    ans3 = (n == <span class="number">1</span>) ? <span class="number">1</span> : network.<span class="built_in">maxflow</span>(s, t);</span><br><span class="line">    <span class="built_in">write</span>(ans1), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">write</span>(ans2), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">write</span>(ans3), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P2765 魔术球问题</title>
    <url>/2021/12/24/sol-p2765/</url>
    <content><![CDATA[<h2 id="P2765-魔术球问题"><a href="#P2765-魔术球问题" class="headerlink" title="P2765 魔术球问题"></a>P2765 魔术球问题</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P2765">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><a href="/2021/12/24/sol-p2764/" title="P2764">P2764</a>倒过来。

将和为完全平方数的数对$(a,b)$之间连有向边，大的连向小的，答案就是最长路径覆盖。

枚举答案判断即可。

### AC代码

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P2765.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P2765</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dinic</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, flow;</span><br><span class="line">    &#125; edge[MAXM];</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>, flow = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> head[MAXN], nxt[MAXM], lev[MAXN], cur[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> flow)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, flow&#125;;</span><br><span class="line">        nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, <span class="number">0</span>&#125;;</span><br><span class="line">        nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(lev, <span class="number">-1</span>, <span class="built_in">sizeof</span>(lev));</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        lev[s] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[i].v;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; lev[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    lev[v] = lev[u] + <span class="number">1</span>;</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lev[t] != <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">augment</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (lev[v] != lev[u] + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">augment</span>(v, t, <span class="built_in">min</span>(mx, edge[i].flow));</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxflow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(cur, head, <span class="built_in">sizeof</span>(cur));</span><br><span class="line">            flow += <span class="built_in">augment</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, s, t, num, cnt, pre[MAXN], col[MAXN], pt[MAXN][<span class="number">2</span>];</span><br><span class="line">Dinic maxflow;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; answ[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">issqrt</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="built_in">sqrt</span>(x);</span><br><span class="line">    <span class="keyword">return</span> t * t == x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    s = ++num, t = ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">1</span>; ; ++w) &#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fill</span>(col, col + w, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(pre, pre + w, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">1</span>; u &lt; w; ++u) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = maxflow.head[pt[u][<span class="number">0</span>]]; i; i = maxflow.nxt[i])</span><br><span class="line">                <span class="keyword">if</span> (maxflow.edge[i].flow == INF - <span class="number">1</span>)</span><br><span class="line">                    pre[(maxflow.edge[i].v - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>] = u;</span><br><span class="line">        &#125;</span><br><span class="line">        pt[w][<span class="number">0</span>] = ++num, pt[w][<span class="number">1</span>] = ++num;</span><br><span class="line">        maxflow.<span class="built_in">addedge</span>(s, pt[w][<span class="number">0</span>], <span class="number">1</span>);</span><br><span class="line">        maxflow.<span class="built_in">addedge</span>(pt[w][<span class="number">1</span>], t, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; w; ++i)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">issqrt</span>(i + w))</span><br><span class="line">                maxflow.<span class="built_in">addedge</span>(pt[w][<span class="number">0</span>], pt[i][<span class="number">1</span>], INF);</span><br><span class="line">        <span class="type">int</span> tmp = w - maxflow.<span class="built_in">maxflow</span>(s, t);</span><br><span class="line">        <span class="keyword">if</span> (tmp &gt; n) &#123;</span><br><span class="line">            <span class="built_in">write</span>(w - <span class="number">1</span>), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = w - <span class="number">1</span>; i; --i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!pre[i])</span><br><span class="line">                    col[i] = ++cnt;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    col[i] = col[pre[i]];</span><br><span class="line">                answ[col[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i) &#123;</span><br><span class="line">                <span class="built_in">reverse</span>(answ[i].<span class="built_in">begin</span>(), answ[i].<span class="built_in">end</span>());</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; answ[i].<span class="built_in">size</span>(); ++j)</span><br><span class="line">                    <span class="built_in">write</span>(answ[i][j]), <span class="built_in">putchar</span>(<span class="string">&quot; \n&quot;</span>[j == answ[i].<span class="built_in">size</span>() - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P2764 最小路径覆盖问题</title>
    <url>/2021/12/24/sol-p2764/</url>
    <content><![CDATA[<h2 id="P2764-最小路径覆盖问题"><a href="#P2764-最小路径覆盖问题" class="headerlink" title="P2764 最小路径覆盖问题"></a>P2764 最小路径覆盖问题</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P2764">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>不妨先假设每个点都单独被一条路径覆盖，我们想要让最多的路径相连接。</p>
<p>对于每个点只能有最多一条入边和最多一条出边，而原图中有边的可以相连，建图方式显然，类似二分图，源点连向左边的点，右边的点连向汇点，流量为$1$，原图中的边$(u,v)$在网络中为$v$右边的连向$u$左边的，为便于输出方案流量设为$+\infty$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P2764.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P2764</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">505</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">2e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dinic</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, flow;</span><br><span class="line">    &#125; edge[MAXM];</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>, flow = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> head[MAXN], nxt[MAXM], lev[MAXN], cur[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> flow)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, flow&#125;;</span><br><span class="line">        nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, <span class="number">0</span>&#125;;</span><br><span class="line">        nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(lev, <span class="number">-1</span>, <span class="built_in">sizeof</span>(lev));</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        lev[s] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[i].v;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; lev[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    lev[v] = lev[u] + <span class="number">1</span>;</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lev[t] != <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">augment</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (lev[v] != lev[u] + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">augment</span>(v, t, <span class="built_in">min</span>(mx, edge[i].flow));</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxflow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(cur, head, <span class="built_in">sizeof</span>(cur));</span><br><span class="line">            flow += <span class="built_in">augment</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, s, t, num, cnt, pre[MAXN], col[MAXN], pt[MAXN][<span class="number">2</span>];</span><br><span class="line">Dinic maxflow;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; answ[MAXN];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    s = ++num, t = ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        pt[i][<span class="number">0</span>] = ++num, pt[i][<span class="number">1</span>] = ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        maxflow.<span class="built_in">addedge</span>(s, pt[i][<span class="number">0</span>], <span class="number">1</span>);</span><br><span class="line">        maxflow.<span class="built_in">addedge</span>(pt[i][<span class="number">1</span>], t, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v);</span><br><span class="line">        maxflow.<span class="built_in">addedge</span>(pt[u][<span class="number">0</span>], pt[v][<span class="number">1</span>], INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = n - maxflow.<span class="built_in">maxflow</span>(s, t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">1</span>; u &lt;= n; ++u) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = maxflow.head[pt[u][<span class="number">0</span>]]; i; i = maxflow.nxt[i])</span><br><span class="line">            <span class="keyword">if</span> (maxflow.edge[i].flow == INF - <span class="number">1</span>)</span><br><span class="line">                pre[(maxflow.edge[i].v - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>] = u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!pre[i])</span><br><span class="line">            col[i] = ++cnt;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            col[i] = col[pre[i]];</span><br><span class="line">        answ[col[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; answ[i].<span class="built_in">size</span>(); ++j)</span><br><span class="line">            <span class="built_in">write</span>(answ[i][j]), <span class="built_in">putchar</span>(<span class="string">&quot; \n&quot;</span>[j == answ[i].<span class="built_in">size</span>() - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P2763 试题库问题</title>
    <url>/2021/12/23/sol-p2763/</url>
    <content><![CDATA[<h2 id="P2763-试题库问题"><a href="#P2763-试题库问题" class="headerlink" title="P2763 试题库问题"></a>P2763 试题库问题</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P2763">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>这道比较容易建图了。</p>
<p>源点连向每类试题，流量为要选出的题目数量。每类试题向题库中的试题连边，流量$+\infty$。最后每道题向汇点连边，流量为$1$即可。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P2763.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P2763</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dinic</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, flow;</span><br><span class="line">    &#125; edge[MAXM];</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>, flow = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> head[MAXN], nxt[MAXM], lev[MAXN], cur[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> flow)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, flow&#125;;</span><br><span class="line">        nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, <span class="number">0</span>&#125;;</span><br><span class="line">        nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(lev, <span class="number">-1</span>, <span class="built_in">sizeof</span>(lev));</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        lev[s] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[i].v;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; lev[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    lev[v] = lev[u] + <span class="number">1</span>;</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lev[t] != <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">augment</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (lev[v] != lev[u] + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">augment</span>(v, t, <span class="built_in">min</span>(mx, edge[i].flow));</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxflow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(cur, head, <span class="built_in">sizeof</span>(cur));</span><br><span class="line">            flow += <span class="built_in">augment</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> k, n, m, s, t, num, a[MAXN];</span><br><span class="line">Dinic maxflow;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(k), <span class="built_in">read</span>(n);</span><br><span class="line">    s = ++num, t = ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">        m += a[i];</span><br><span class="line">        maxflow.<span class="built_in">addedge</span>(s, ++num, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> p, x;</span><br><span class="line">        <span class="built_in">read</span>(p);</span><br><span class="line">        ++num;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= p; ++j) &#123;</span><br><span class="line">            <span class="built_in">read</span>(x);</span><br><span class="line">            maxflow.<span class="built_in">addedge</span>(x + <span class="number">2</span>, num, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        maxflow.<span class="built_in">addedge</span>(num, t, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (maxflow.<span class="built_in">maxflow</span>(s, t) != m)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;No Solution!&quot;</span>), <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld: &quot;</span>, i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = maxflow.head[i + <span class="number">2</span>], c = <span class="number">0</span>; j; j = maxflow.nxt[j])</span><br><span class="line">            <span class="keyword">if</span> (maxflow.edge[j].flow == INF - <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%lld%c&quot;</span>, maxflow.edge[j].v - k - <span class="number">2</span>, <span class="string">&quot; \n&quot;</span>[++c == a[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P2762 太空飞行计划问题</title>
    <url>/2021/12/22/sol-p2762/</url>
    <content><![CDATA[<h2 id="P2762-太空飞行计划问题"><a href="#P2762-太空飞行计划问题" class="headerlink" title="P2762 太空飞行计划问题"></a>P2762 太空飞行计划问题</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P2762">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>坑来坑去最后被读入给坑到了。</p>
<p>使用割模型，从源点连边到实验，流量为该实验可获得的钱$p_i$，再从仪器连边道汇点，流量为该仪器的价格$c_i$，最后将实验和仪器之间连边，流量为$+\infty$。</p>
<p>思考这种连边方式的含义。最小割后的残余网络中，与源点相连的点都是要取的，与汇点相连的点都是不取的，分别对应$S$集合和$T$集合。原网络所代表的状态是$m$个实验都做，但这显然是不合法的，所以跑一遍最小割后，就能保证不出现实验在$S$集合而对应仪器在$T$集合中的情况（因为无法割断实验和仪器之间的连边），需要注意的是，实验在$T$集合而对应仪器在$S$集合的方案是合法的。而所求的最小割就是使得方案合法的最小代价。</p>
<p>于是答案为$\sum\limits_{i=1}^{m}{p_i} - mincut$。</p>
<h4 id="恶心的读入"><a href="#恶心的读入" class="headerlink" title="恶心的读入"></a>恶心的读入</h4><p>因为不喜欢用<code>cin</code>所以研究如何用<code>scanf</code>优雅地读入整行，于是发现：</p>
<ul>
<li><code>scanf(&quot;%[^\n]&quot;, buf)</code>可以读入整行，其中<code>buf</code>是<code>char</code>数组。</li>
</ul>
<p>所以用<code>buf</code>进行手写快读，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从字符串`s`中读入数字到`x`，并返回`s`中当前数字下一位的指针</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">char</span>* <span class="title">sread</span><span class="params">(<span class="type">char</span> *s, _Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = *s++;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = *s++)</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = *s++)</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = *s++; <span class="built_in">isdigit</span>(ch); ch = *s++)</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (sign)</span><br><span class="line">        x = -x;</span><br><span class="line">    <span class="keyword">return</span> --s; <span class="comment">// 返回上一个位置的原因是快读会判断数字后一位并且将指针`s`移到数字后两位，这样无法判断字符串结束`&#x27;\0&#x27;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(m), <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(p[i]);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]%c&quot;</span>, buf, &amp;chr);</span><br><span class="line">        <span class="type">char</span> *pos = buf;</span><br><span class="line">        <span class="keyword">for</span> (k[i] = <span class="number">0</span>; (*pos) &amp;&amp; ++k[i];)</span><br><span class="line">            pos = <span class="built_in">sread</span>(pos, a[i][k[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(c[i]);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P2762.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P2762</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">char</span>* <span class="title">sread</span><span class="params">(<span class="type">char</span> *s, _Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = *s++;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = *s++)</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = *s++)</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = *s++; <span class="built_in">isdigit</span>(ch); ch = *s++)</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (sign)</span><br><span class="line">        x = -x;</span><br><span class="line">    <span class="keyword">return</span> --s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">150</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">3e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXS = <span class="number">1</span> &lt;&lt; <span class="number">15</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dinic</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, flow;</span><br><span class="line">    &#125; edge[MAXM];</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>, flow = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> head[MAXN], nxt[MAXM], lev[MAXN], cur[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> flow)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, flow&#125;;</span><br><span class="line">        nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, <span class="number">0</span>&#125;;</span><br><span class="line">        nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(lev, <span class="number">-1</span>, <span class="built_in">sizeof</span>(lev));</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        lev[s] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[i].v;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; lev[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    lev[v] = lev[u] + <span class="number">1</span>;</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lev[t] != <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">augment</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (lev[v] != lev[u] + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">augment</span>(v, t, <span class="built_in">min</span>(mx, edge[i].flow));</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxflow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(cur, head, <span class="built_in">sizeof</span>(cur));</span><br><span class="line">            flow += <span class="built_in">augment</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, p[MAXN], c[MAXN], k[MAXN], a[MAXN][MAXN];</span><br><span class="line"><span class="type">char</span> chr, buf[MAXS];</span><br><span class="line"><span class="type">bool</span> use1[MAXN], use2[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans1, ans2;</span><br><span class="line">Dinic mincut;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(m), <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(p[i]);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]%c&quot;</span>, buf, &amp;chr);</span><br><span class="line">        <span class="type">char</span> *pos = buf;</span><br><span class="line">        <span class="keyword">for</span> (k[i] = <span class="number">0</span>; (*pos) &amp;&amp; ++k[i];)</span><br><span class="line">            pos = <span class="built_in">sread</span>(pos, a[i][k[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(c[i]);</span><br><span class="line">    <span class="type">int</span> ss = <span class="number">1</span>, tt = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        mincut.<span class="built_in">addedge</span>(i + <span class="number">2</span>, tt, c[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        mincut.<span class="built_in">addedge</span>(ss, i + n + <span class="number">2</span>, p[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= k[i]; ++j)</span><br><span class="line">            mincut.<span class="built_in">addedge</span>(i + n + <span class="number">2</span>, a[i][j] + <span class="number">2</span>, INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        ans += p[i];</span><br><span class="line">    ans -= mincut.<span class="built_in">maxflow</span>(ss, tt);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="keyword">if</span> (mincut.lev[i + n + <span class="number">2</span>] != <span class="number">-1</span>)</span><br><span class="line">            ans1.<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (mincut.lev[i + <span class="number">2</span>] != <span class="number">-1</span>)</span><br><span class="line">            ans2.<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans1.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        <span class="built_in">write</span>(ans1[i]), <span class="built_in">putchar</span>(<span class="string">&quot; \n&quot;</span>[i == ans1.<span class="built_in">size</span>() - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans2.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        <span class="built_in">write</span>(ans2[i]), <span class="built_in">putchar</span>(<span class="string">&quot; \n&quot;</span>[i == ans2.<span class="built_in">size</span>() - <span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P2754 星际转移问题</title>
    <url>/2021/12/22/sol-p2754/</url>
    <content><![CDATA[<h2 id="P2754-星际转移问题"><a href="#P2754-星际转移问题" class="headerlink" title="P2754 星际转移问题"></a>P2754 星际转移问题</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P2754">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>套路地拆点。$pt_{u,t}$表示节点$u$在时间为$t$时的状态。按照太空船在$t$时的位置连边，跑最大流判断是否可行。</p>
<p>一种方法为二分答案，但是每次需要重新建图；另一种则是直接枚举答案，每次只连新加入的边，并且可以在残余网络上继续跑$maxflow$。据说二分反而跑的比枚举慢一些。</p>
<h4 id="G-V-E-中-V-和-E-的范围"><a href="#G-V-E-中-V-和-E-的范围" class="headerlink" title="$G(V,E)$中$|V|$和$|E|$的范围"></a>$G(V,E)$中$|V|$和$|E|$的范围</h4><p><strong>令$n=n+2$</strong>，先计算最长可能的时间$T$。最坏的可能性是只有一艘太空船且容量为$1$，并且这艘太空船在$n$个点之间周转。此时最长时间$T \le k \times n \le 750$（很多题解都说是$500$，其实是错的，洛谷讨论区里有$hack$）。</p>
<p>每次枚举新的时间，最多增加$n$个点，所以点集大小$|V| \le n \times T \le 11250$，开到$2 \times 10^4$即可。</p>
<p>而在每次添加路径时，$pt<em>{u,t-1}$连向$pt</em>{u,t}$，并且每艘太空船增加一条边，考虑<strong>网络流建反边需要$\times 2$</strong>，则每次最多添加$(n + m) \times 2 \le 80$条边，所以边集大小$|E| \le T \times 80 \le 60000$，开$10^5$管够。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P2754.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P2754</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXS = <span class="number">800</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXT = <span class="number">55</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dinic</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, flow;</span><br><span class="line">    &#125; edge[MAXM];</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>, flow = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> head[MAXN], nxt[MAXM], lev[MAXN], cur[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> flow)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, flow&#125;;</span><br><span class="line">        nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, <span class="number">0</span>&#125;;</span><br><span class="line">        nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(lev, <span class="number">-1</span>, <span class="built_in">sizeof</span>(lev));</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        lev[s] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[i].v;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; lev[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    lev[v] = lev[u] + <span class="number">1</span>;</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lev[t] != <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">augment</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (lev[v] != lev[u] + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">augment</span>(v, t, <span class="built_in">min</span>(mx, edge[i].flow));</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxflow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(cur, head, <span class="built_in">sizeof</span>(cur));</span><br><span class="line">            flow += <span class="built_in">augment</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, k, sx, tx, ss, tt, num;</span><br><span class="line"><span class="type">int</span> h[MAXT], r[MAXT], s[MAXT][MAXT], pt[MAXT][MAXS];</span><br><span class="line">Dinic maxflow;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m), <span class="built_in">read</span>(k);</span><br><span class="line">    sx = n + <span class="number">1</span>, tx = n + <span class="number">2</span>;</span><br><span class="line">    ss = ++num, tt = ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(h[i]), <span class="built_in">read</span>(r[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; r[i]; ++j) &#123;</span><br><span class="line">            <span class="built_in">read</span>(s[i][j]);</span><br><span class="line">            <span class="keyword">if</span> (s[i][j] == <span class="number">0</span>)</span><br><span class="line">                s[i][j] = sx;</span><br><span class="line">            <span class="keyword">if</span> (s[i][j] == <span class="number">-1</span>)</span><br><span class="line">                s[i][j] = tx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">0</span>; w &lt;= <span class="number">750</span>; ++w) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">2</span>; ++i)</span><br><span class="line">            pt[i][w] = ++num;</span><br><span class="line">        maxflow.<span class="built_in">addedge</span>(ss, pt[sx][w], INF);</span><br><span class="line">        maxflow.<span class="built_in">addedge</span>(pt[tx][w], tt, INF);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; w &amp;&amp; i &lt;= n + <span class="number">2</span>; ++i)</span><br><span class="line">            maxflow.<span class="built_in">addedge</span>(pt[i][w - <span class="number">1</span>], pt[i][w], INF);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; w &amp;&amp; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> u = s[i][(w - <span class="number">1</span>) % r[i]];</span><br><span class="line">            <span class="type">int</span> v = s[i][w % r[i]];</span><br><span class="line">            maxflow.<span class="built_in">addedge</span>(pt[u][w - <span class="number">1</span>], pt[v][w], h[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maxflow.<span class="built_in">maxflow</span>(ss, tt) &gt;= k)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">write</span>(w), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>), <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P1251 餐巾计划问题</title>
    <url>/2021/12/22/sol-p1251/</url>
    <content><![CDATA[<h2 id="P1251-餐巾计划问题"><a href="#P1251-餐巾计划问题" class="headerlink" title="P1251 餐巾计划问题"></a>P1251 餐巾计划问题</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P1251">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>题目中已经暗示了要用费用流。</p>
<p>使用流模型，流表示餐巾的数量。但是不易处理餐巾干净与否，所以拆点，将一天拆成两个点，分别表示这天拥有的干净餐巾数量和脏的餐巾数量。为方便表述，分别设为$used<em>{i,0}$和$used</em>{i,1}$。</p>
<p>由于每天需要使用$r<em>i$块餐巾，所以让$used</em>{i,0}$连向汇点$T$，费用为$0$，流量为$r<em>i$，表示这天至少需要拥有$r_i$块干净餐巾。同时让源点$S$连向$used</em>{i,1}$，费用为$0$，流量为$r_i$，表示这天过后会多出$r_i$块脏的餐巾。</p>
<p>接下来考虑购买餐巾，显然可以直接从$S$连向$used<em>{i,0}$，费用为$p$，流量为$+\infty$。而使用快洗部则从$used</em>{i,1}$连向$used<em>{i+m,0}$，费用为$f$，流量为$+\infty$。同理，慢洗部$used</em>{i,1}$连向$used<em>{i+n,0}$，费用为$s$，流量为$+\infty$。另一种保留餐巾则$used</em>{i,1}$连向$used_{i+1,1}$，费用为$0$，流量为$+\infty$。</p>
<p>形式化地，定义函数<code>addedge(u, v, cost, flow)</code>，则需要</p>
<ol>
<li><code>addedge(used[i][0], T, 0, r[i])</code></li>
<li><code>addedge(S, used[i][1], 0, r[i])</code></li>
<li><code>addedge(S, used[i][0], p, INF)</code></li>
<li><code>if (i + 1 &lt;= N) addedge(used[i][1], used[i + 1][1], 0, INF)</code></li>
<li><code>if (i + m &lt;= N) addedge(used[i][1], used[i + m][0], f, INF)</code></li>
<li><code>if (i + n &lt;= N) addedge(used[i][1], used[i + n][0], s, INF)</code></li>
</ol>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P1251.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P1251</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dinic</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, cost, flow;</span><br><span class="line">    &#125; edge[MAXM];</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>, cost = <span class="number">0</span>, flow = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> head[MAXN], nxt[MAXM], dis[MAXN], cur[MAXN];</span><br><span class="line">    <span class="type">bool</span> vis[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> cost, <span class="type">int</span> flow)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, cost, flow&#125;;</span><br><span class="line">        nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, -cost, <span class="number">0</span>&#125;;</span><br><span class="line">        nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        dis[s] = <span class="number">0</span>, vis[s] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>(), vis[u] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[i].v;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; dis[v] &gt; dis[u] + edge[i].cost) &#123;</span><br><span class="line">                    dis[v] = dis[u] + edge[i].cost;</span><br><span class="line">                    <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                        que.<span class="built_in">push</span>(v);</span><br><span class="line">                        vis[v] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis[t] != INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">augment</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (vis[v] || dis[u] + edge[i].cost != dis[v])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">augment</span>(v, t, <span class="built_in">min</span>(mx, edge[i].flow));</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">            cost += edge[i].cost * tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mcmf</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">spfa</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(cur, head, <span class="built_in">sizeof</span>(cur));</span><br><span class="line">            flow += <span class="built_in">augment</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, qp, qm, qf, qn, qs;</span><br><span class="line"><span class="type">int</span> a[MAXN], used[MAXN][<span class="number">2</span>];</span><br><span class="line">Dinic mcmf;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="built_in">read</span>(qp), <span class="built_in">read</span>(qm), <span class="built_in">read</span>(qf), <span class="built_in">read</span>(qn), <span class="built_in">read</span>(qs);</span><br><span class="line">    <span class="type">int</span> s = <span class="number">1</span>, t = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        used[i][<span class="number">0</span>] = i * <span class="number">2</span> + <span class="number">1</span>, used[i][<span class="number">1</span>] = i * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        mcmf.<span class="built_in">addedge</span>(used[i][<span class="number">0</span>], t, <span class="number">0</span>, a[i]);</span><br><span class="line">        mcmf.<span class="built_in">addedge</span>(s, used[i][<span class="number">1</span>], <span class="number">0</span>, a[i]);</span><br><span class="line">        mcmf.<span class="built_in">addedge</span>(s, used[i][<span class="number">0</span>], qp, INF);</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt;= n)</span><br><span class="line">            mcmf.<span class="built_in">addedge</span>(used[i][<span class="number">1</span>], used[i + <span class="number">1</span>][<span class="number">1</span>], <span class="number">0</span>, INF);</span><br><span class="line">        <span class="keyword">if</span> (i + qm &lt;= n)</span><br><span class="line">            mcmf.<span class="built_in">addedge</span>(used[i][<span class="number">1</span>], used[i + qm][<span class="number">0</span>], qf, INF);</span><br><span class="line">        <span class="keyword">if</span> (i + qn &lt;= n)</span><br><span class="line">            mcmf.<span class="built_in">addedge</span>(used[i][<span class="number">1</span>], used[i + qn][<span class="number">0</span>], qs, INF);</span><br><span class="line">    &#125;</span><br><span class="line">    mcmf.<span class="built_in">mcmf</span>(s, t);</span><br><span class="line">    <span class="built_in">write</span>(mcmf.cost), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4016 负载平衡问题</title>
    <url>/2021/12/21/sol-p4016/</url>
    <content><![CDATA[<h2 id="P4016-负载平衡问题"><a href="#P4016-负载平衡问题" class="headerlink" title="P4016 负载平衡问题"></a>P4016 负载平衡问题</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>显然有贪心解法，但为了练习费用流选择使用网络流解法。</p>
<p>第一次写$spfa$和费用流，没想到会出现这么多问题。。。</p>
<p>有几个要注意的点：</p>
<ol>
<li>费用流建反边的$cost$是原来的$cost$的<strong>相反数</strong>，即需要<code>add(u, v, c, f), add(v, u, -c, 0);</code></li>
<li>计算流量的方式和普通网络流相同，但是计算总$cost$是每次加上<code>edge.cost * flow</code>，<strong>不要忘记乘上$cost$</strong>，用全局变量存$cost$会好写一些。</li>
<li>由于费用流的边权可能$\le 0$，所以<strong>必须</strong>用$spfa$而无法使用$dijkstra$，并且$dfs$<strong>增广时必须开$vis$数组防止无限递归</strong>。</li>
<li>（这应该算是个小$tip$）网络流$tot$一开始清空成$1$可以不需要再调用<code>init</code>函数，也不需要再把$head$清空成$-1$。</li>
</ol>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4016.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4016</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">150</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dinic</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, flow, cost;</span><br><span class="line">    &#125; edge[MAXM];</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>, flow = <span class="number">0</span>, cost = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> head[MAXN], nxt[MAXM], dis[MAXN], cur[MAXN];</span><br><span class="line">    <span class="type">bool</span> vis[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> flow, <span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, flow, cost&#125;;</span><br><span class="line">        nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, <span class="number">0</span>, -cost&#125;;</span><br><span class="line">        nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>(vis, vis + MAXN, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(dis, dis + MAXN, INF);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        dis[s] = <span class="number">0</span>, vis[s] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>(), vis[u] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[i].v;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; dis[v] &gt; dis[u] + edge[i].cost) &#123;</span><br><span class="line">                    dis[v] = dis[u] + edge[i].cost;</span><br><span class="line">                    <span class="keyword">if</span> (!vis[v])</span><br><span class="line">                        que.<span class="built_in">push</span>(v), vis[v] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis[t] != INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">augment</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (vis[v] || dis[v] != dis[u] + edge[i].cost)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">augment</span>(v, t, <span class="built_in">min</span>(mx, edge[i].flow));</span><br><span class="line">            cost += tmp * edge[i].cost;</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">mcmf</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">spfa</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">copy</span>(head, head + MAXN, cur);</span><br><span class="line">            flow += <span class="built_in">augment</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, a[MAXN];</span><br><span class="line">Dinic nf;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(a[i]), num += a[i];</span><br><span class="line">    num /= n;</span><br><span class="line">    <span class="type">int</span> s = n + <span class="number">1</span>, t = n + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; num)</span><br><span class="line">            nf.<span class="built_in">addedge</span>(s, i, a[i] - num, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; num)</span><br><span class="line">            nf.<span class="built_in">addedge</span>(i, t, num - a[i], <span class="number">0</span>);</span><br><span class="line">        nf.<span class="built_in">addedge</span>(i, i % n + <span class="number">1</span>, INF, <span class="number">1</span>);</span><br><span class="line">        nf.<span class="built_in">addedge</span>(i % n + <span class="number">1</span>, i, INF, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    nf.<span class="built_in">mcmf</span>(s, t);</span><br><span class="line">    <span class="built_in">write</span>(nf.cost), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4011 孤岛营救问题</title>
    <url>/2021/12/21/sol-p4011/</url>
    <content><![CDATA[<h2 id="P4011-孤岛营救问题"><a href="#P4011-孤岛营救问题" class="headerlink" title="P4011 孤岛营救问题"></a>P4011 孤岛营救问题</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4011">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>显然的状压分层$BFS$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4011.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4011</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">15</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXK = <span class="number">1</span> &lt;&lt; <span class="number">11</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> DX[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> DY[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y, s;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, p, k, s, a[MAXN][MAXN], dis[MAXN][MAXN][MAXK], g[MAXN][MAXN][MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m), <span class="built_in">read</span>(p);</span><br><span class="line">    <span class="built_in">read</span>(k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> tx1, ty1, tx2, ty2, tg;</span><br><span class="line">        <span class="built_in">read</span>(tx1), <span class="built_in">read</span>(ty1), <span class="built_in">read</span>(tx2), <span class="built_in">read</span>(ty2), <span class="built_in">read</span>(tg);</span><br><span class="line">        g[tx1][ty1][tx2][ty2] |= <span class="number">1</span> &lt;&lt; tg;</span><br><span class="line">        g[tx2][ty2][tx1][ty1] |= <span class="number">1</span> &lt;&lt; tg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">read</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= s; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> tx, ty, tq;</span><br><span class="line">        <span class="built_in">read</span>(tx), <span class="built_in">read</span>(ty), <span class="built_in">read</span>(tq);</span><br><span class="line">        a[tx][ty] |= <span class="number">1</span> &lt;&lt; tq;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">-1</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    queue&lt;node&gt; que;</span><br><span class="line">    que.<span class="built_in">push</span>(&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    dis[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ans = INF;</span><br><span class="line">    <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        node t = que.<span class="built_in">front</span>();</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> x = t.x, y = t.y, s = t.s;</span><br><span class="line">        <span class="keyword">if</span> (x == n &amp;&amp; y == m)</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, dis[x][y][s]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> tx = x + DX[i];</span><br><span class="line">            <span class="type">int</span> ty = y + DY[i];</span><br><span class="line">            <span class="keyword">if</span> (tx &lt; <span class="number">1</span> || ty &lt; <span class="number">1</span> || tx &gt; n || ty &gt; m)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> ((g[x][y][tx][ty] &amp; s) != g[x][y][tx][ty])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> ts = s | a[tx][ty];</span><br><span class="line">            <span class="keyword">if</span> (dis[tx][ty][ts] != <span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            dis[tx][ty][ts] = dis[x][y][s] + <span class="number">1</span>;</span><br><span class="line">            que.<span class="built_in">push</span>(&#123;tx, ty, ts&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">write</span>(ans == INF ? <span class="number">-1</span> : ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P276 软件补丁问题</title>
    <url>/2021/12/20/sol-p2761/</url>
    <content><![CDATA[<h2 id="P276-软件补丁问题"><a href="#P276-软件补丁问题" class="headerlink" title="P276 软件补丁问题"></a>P276 软件补丁问题</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P2761">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>这题<strong>不是网络流！</strong></p>
<p>状压+最短路即可。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P2761.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P2761</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">200</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> u, dis;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dis &gt; o.dis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bugfix</span> &#123;</span><br><span class="line">    <span class="type">int</span> c, b1, b2, f1, f2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, dis[MAXM];</span><br><span class="line">bugfix g[MAXN];</span><br><span class="line"><span class="type">char</span> buf[MAXN];</span><br><span class="line">priority_queue&lt;node&gt; que;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(g[i].c);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (buf[j] == <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">                g[i].b1 |= (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">            <span class="keyword">if</span> (buf[j] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">                g[i].b2 |= (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (buf[j] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">                g[i].f1 |= (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">            <span class="keyword">if</span> (buf[j] == <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">                g[i].f2 |= (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    dis[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    que.<span class="built_in">push</span>(&#123;(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>, <span class="number">0ll</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        node t = que.<span class="built_in">top</span>();</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (dis[t.u] &lt; t.dis)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> u = t.u, d = t.dis;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            bugfix&amp; b = g[i];</span><br><span class="line">            <span class="keyword">if</span> ((u &amp; b.b1) == b.b1 &amp;&amp; (u &amp; b.b2) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span> v = (u &amp; (~b.f1)) | b.f2;</span><br><span class="line">                <span class="keyword">if</span> (dis[v] &gt; dis[u] + b.c) &#123;</span><br><span class="line">                    dis[v] = dis[u] + b.c;</span><br><span class="line">                    que.<span class="built_in">push</span>(&#123;v, dis[v]&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dis[<span class="number">0</span>] == INF)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">write</span>(dis[<span class="number">0</span>]), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P2756 飞行员配对方案问题</title>
    <url>/2021/12/20/sol-p2756/</url>
    <content><![CDATA[<h2 id="P2756-飞行员配对方案问题"><a href="#P2756-飞行员配对方案问题" class="headerlink" title="P2756 飞行员配对方案问题"></a>P2756 飞行员配对方案问题</h2><span id="more"></span>
<p>做了几道蓝色的水题</p>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P2756">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>二分图网络流板子，用来强迫自己敲一遍$dinic$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P2756.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P2756</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">350</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">dinic</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">edges</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, w, next;</span><br><span class="line">    &#125; edge[MAXM];</span><br><span class="line">    <span class="type">int</span> n, tot, head[MAXN];</span><br><span class="line">    <span class="type">int</span> cur[MAXN], lev[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n, tot = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fill</span>(head, head + n + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">        edge[tot] = &#123;v, w, head[u]&#125;;</span><br><span class="line">        head[u] = tot++;</span><br><span class="line">        edge[tot] = &#123;u, <span class="number">0</span>, head[v]&#125;;</span><br><span class="line">        head[v] = tot++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>(lev, lev + n + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s), lev[s] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; ~i; i = edge[i].next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].w &amp;&amp; lev[edge[i].v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    lev[edge[i].v] = lev[u] + <span class="number">1</span>;</span><br><span class="line">                    que.<span class="built_in">push</span>(edge[i].v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lev[t] != <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; ~i; i = edge[i].next) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v, w = edge[i].w;</span><br><span class="line">            <span class="keyword">if</span> (lev[v] != lev[u] + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">dfs</span>(v, t, <span class="built_in">min</span>(mx, w));</span><br><span class="line">            edge[i].w -= tmp, edge[i ^ <span class="number">1</span>].w += tmp;</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxflow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">copy</span>(head, head + n + <span class="number">1</span>, cur);</span><br><span class="line">            ret += <span class="built_in">dfs</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, s, t;</span><br><span class="line">dinic nf;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(m), <span class="built_in">read</span>(n);</span><br><span class="line">    s = n + <span class="number">1</span>, t = n + <span class="number">2</span>;</span><br><span class="line">    nf.<span class="built_in">init</span>(n + <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        nf.<span class="built_in">addedge</span>(s, i, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = m + <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        nf.<span class="built_in">addedge</span>(i, t, <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> u, v;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;u, &amp;v), u != <span class="number">-1</span> &amp;&amp; v != <span class="number">-1</span>)</span><br><span class="line">        nf.<span class="built_in">addedge</span>(u, v, INF);</span><br><span class="line">    <span class="built_in">write</span>(nf.<span class="built_in">maxflow</span>(s, t)), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nf.tot; i += <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> (nf.edge[i].w == INF - <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld\n&quot;</span>, nf.edge[i ^ <span class="number">1</span>].v, nf.edge[i].v);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P3181 [HAOI2016] 找相同字符串</title>
    <url>/2021/12/19/sol-p3181/</url>
    <content><![CDATA[<h2 id="P3181-HAOI2016-找相同字符串"><a href="#P3181-HAOI2016-找相同字符串" class="headerlink" title="P3181 [HAOI2016] 找相同字符串"></a>P3181 [HAOI2016] 找相同字符串</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P3181">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>假设我们已经知道如何计算单一串的答案，之后可以将两个串拼接，中间间隔字符<code>$</code>，算出新串的答案。但是这样会重复计算两个子串在同一个原串，所以还需减去两个原串的答案。即$ans=ans<em>s-ans</em>{s1}-ans_{s2}$。</p>
<p>现在只需考虑如何算出一个单一串的答案。根据后缀数组的性质，显然答案为</p>
<script type="math/tex; mode=display">
\begin{aligned}
ans_s &= \sum_{1 \le i \lt j \le n}{|lcp(suf_i, suf_j)|} \\
&= \sum_{1 \le i \lt j \le n}{\min_{i \lt sa_k \le j}{height(k)}}
\end{aligned}</script><p>算出每个$height$对$ans$的贡献$(i - pre_i) \times (nxt_i - i) \times height(i)$，其中$pre_i$表示前一个<strong>小于</strong>$height(i)$的位置，$nxt_i$表示后一个<strong>小于等于</strong>$height_i$的位置。单调栈维护。</p>
<p>时间复杂度$O(n \log n)$，但显然可以通过使用更高级的$SA$优化到$O(n)$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P3181.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P3181</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">4e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">suffix_array</span> &#123;</span><br><span class="line">    <span class="type">char</span> *str;</span><br><span class="line">    <span class="type">int</span> n, sa[MAXN], rk[MAXN], tp[MAXN], ht[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">radix_sort</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> buk[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            buk[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            buk[rk[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            buk[i] += buk[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">            sa[buk[rk[tp[i]]]--] = tp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">char</span> *s, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;str = s;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="type">int</span> m = <span class="number">128</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            rk[i] = s[i] + <span class="number">1</span>, tp[i] = i;</span><br><span class="line">        <span class="built_in">radix_sort</span>(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">0</span>, w = <span class="number">1</span>; p &lt; n; m = p, w &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= w; ++i)</span><br><span class="line">                tp[++p] = n - w + i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">if</span> (sa[i] &gt; w)</span><br><span class="line">                    tp[++p] = sa[i] - w;</span><br><span class="line">            <span class="built_in">radix_sort</span>(m);</span><br><span class="line">            <span class="built_in">copy</span>(rk + <span class="number">1</span>, rk + n + <span class="number">1</span>, tp + <span class="number">1</span>);</span><br><span class="line">            rk[sa[<span class="number">1</span>]] = p = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tp[sa[i - <span class="number">1</span>]] == tp[sa[i]] &amp;&amp; tp[sa[i - <span class="number">1</span>] + w] == tp[sa[i] + w])</span><br><span class="line">                    rk[sa[i]] = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    rk[sa[i]] = ++p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k)</span><br><span class="line">                k--;</span><br><span class="line">            <span class="keyword">while</span> (s[i + k] == s[sa[rk[i] - <span class="number">1</span>] + k])</span><br><span class="line">                k++;</span><br><span class="line">            ht[i] = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>, top;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> pre[MAXN], nxt[MAXN], sta[MAXN];</span><br><span class="line">        sta[top = <span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (top &amp;&amp; ht[sa[sta[top]]] &gt;= ht[sa[i]])</span><br><span class="line">                --top;</span><br><span class="line">            pre[i] = i - sta[top];</span><br><span class="line">            sta[++top] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        sta[top = <span class="number">0</span>] = n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (top &amp;&amp; ht[sa[sta[top]]] &gt; ht[sa[i]])</span><br><span class="line">                --top;</span><br><span class="line">            nxt[i] = sta[top] - i;</span><br><span class="line">            sta[++top] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            ret += pre[i] * nxt[i] * ht[sa[i]];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n0, n1, n2;</span><br><span class="line"><span class="type">char</span> s0[MAXN], s1[MAXN], s2[MAXN];</span><br><span class="line">suffix_array sa0, sa1, sa2;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>, s1 + <span class="number">1</span>, s2 + <span class="number">1</span>);</span><br><span class="line">    n1 = <span class="built_in">strlen</span>(s1 + <span class="number">1</span>);</span><br><span class="line">    n2 = <span class="built_in">strlen</span>(s2 + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">copy</span>(s1 + <span class="number">1</span>, s1 + n1 + <span class="number">1</span>, s0 + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">copy</span>(s2 + <span class="number">1</span>, s2 + n2 + <span class="number">1</span>, s0 + n1 + <span class="number">2</span>);</span><br><span class="line">    s0[n1 + <span class="number">1</span>] = <span class="string">&#x27;$&#x27;</span>, n0 = n1 + n2 + <span class="number">1</span>;</span><br><span class="line">    sa0.<span class="built_in">build</span>(s0, n0);</span><br><span class="line">    sa1.<span class="built_in">build</span>(s1, n1);</span><br><span class="line">    sa2.<span class="built_in">build</span>(s2, n2);</span><br><span class="line">    <span class="type">int</span> ans = sa0.<span class="built_in">calc</span>() - sa1.<span class="built_in">calc</span>() - sa2.<span class="built_in">calc</span>();</span><br><span class="line">    <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>[AHOI2013] 差异 题解</title>
    <url>/2021/12/17/sol-p4248/</url>
    <content><![CDATA[<h2 id="AHOI2013-差异-题解"><a href="#AHOI2013-差异-题解" class="headerlink" title="[AHOI2013] 差异 题解"></a>[AHOI2013] 差异 题解</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4248">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>使用后缀数组求出$height$数组（简写为$ht$），答案变成了</p>
<script type="math/tex; mode=display">ans = \sum\limits_{1 \le i \lt j \le n}{len(T_i) + len(T_j) - 2 \times \min\limits_{k=i+1}^{j}{ht_k}}</script><p>化简，得</p>
<script type="math/tex; mode=display">ans = \frac{n \times (n + 1) \times (n - 1)}{2} - 2\times\sum\limits_{1 \le i \lt j \le n}{\min\limits_{k=i+1}^{j}{ht_k}}</script><p>求和符号里的用单调栈维护。</p>
<p>时间复杂度$O(n \log n)$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4248.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4248</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> pii = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">suffix_array</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, sa[MAXN], rk[MAXN], tp[MAXN], ht[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">radix_sort</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> buk[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            buk[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            buk[rk[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            buk[i] += buk[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">            sa[buk[rk[tp[i]]]--] = tp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">char</span> *s, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="type">int</span> m = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            rk[i] = s[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>, tp[i] = i;</span><br><span class="line">        <span class="built_in">radix_sort</span>(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">0</span>, w = <span class="number">1</span>; p &lt; n; m = p, w &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= w; ++i)</span><br><span class="line">                tp[++p] = n - w + i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">if</span> (sa[i] &gt; w)</span><br><span class="line">                    tp[++p] = sa[i] - w;</span><br><span class="line">            <span class="built_in">radix_sort</span>(m);</span><br><span class="line">            <span class="built_in">copy</span>(rk + <span class="number">1</span>, rk + n + <span class="number">1</span>, tp + <span class="number">1</span>);</span><br><span class="line">            rk[sa[<span class="number">1</span>]] = p = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tp[sa[i - <span class="number">1</span>]] == tp[sa[i]] &amp;&amp; tp[sa[i - <span class="number">1</span>] + w] == tp[sa[i] + w])</span><br><span class="line">                    rk[sa[i]] = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    rk[sa[i]] = ++p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k)</span><br><span class="line">                k--;</span><br><span class="line">            <span class="keyword">while</span> (s[i + k] == s[sa[rk[i] - <span class="number">1</span>] + k])</span><br><span class="line">                k++;</span><br><span class="line">            ht[i] = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, top;</span><br><span class="line">pii sta[MAXN];</span><br><span class="line"><span class="type">char</span> s[MAXN];</span><br><span class="line">suffix_array sa;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">    sa.<span class="built_in">init</span>(s, n);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    sta[top = <span class="number">1</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> p = sa.sa[i];</span><br><span class="line">        <span class="keyword">while</span> (top &amp;&amp; sta[top].fi &gt;= sa.ht[p])</span><br><span class="line">            sum -= sta[top].fi * (sta[top].se - sta[top - <span class="number">1</span>].se), --top;</span><br><span class="line">        sta[++top] = &#123;sa.ht[p], i&#125;, sum += sta[top].fi * (sta[top].se - sta[top - <span class="number">1</span>].se);</span><br><span class="line">        ans += sum;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = (n * (n + <span class="number">1</span>) * (n - <span class="number">1</span>)) / <span class="number">2</span> - ans * <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4051 [JSOI2007] 字符加密 题解</title>
    <url>/2021/12/17/sol-p4051/</url>
    <content><![CDATA[<h2 id="P4051-JSOI2007-字符加密-题解"><a href="#P4051-JSOI2007-字符加密-题解" class="headerlink" title="P4051 [JSOI2007] 字符加密 题解"></a>P4051 [JSOI2007] 字符加密 题解</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4051">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>显然直接求后缀数组瞎搞。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4051.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4051</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">suffix_array</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, sa[MAXN], rk[MAXN], tp[MAXN], ht[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">radix_sort</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> buk[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            buk[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            buk[rk[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            buk[i] += buk[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">            sa[buk[rk[tp[i]]]--] = tp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">char</span> *s, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="type">int</span> m = <span class="number">128</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            rk[i] = s[i] + <span class="number">1</span>, tp[i] = i;</span><br><span class="line">        <span class="built_in">radix_sort</span>(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">0</span>, w = <span class="number">1</span>; p &lt; n; m = p, w &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= w; ++i)</span><br><span class="line">                tp[++p] = n - w + i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">if</span> (sa[i] &gt; w)</span><br><span class="line">                    tp[++p] = sa[i] - w;</span><br><span class="line">            <span class="built_in">radix_sort</span>(m);</span><br><span class="line">            <span class="built_in">copy</span>(rk + <span class="number">1</span>, rk + n + <span class="number">1</span>, tp + <span class="number">1</span>);</span><br><span class="line">            rk[sa[<span class="number">1</span>]] = p = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tp[sa[i - <span class="number">1</span>]] == tp[sa[i]] &amp;&amp; tp[sa[i - <span class="number">1</span>] + w] == tp[sa[i] + w])</span><br><span class="line">                    rk[sa[i]] = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    rk[sa[i]] = ++p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k)</span><br><span class="line">                k--;</span><br><span class="line">            <span class="keyword">while</span> (s[i + k] == s[sa[rk[i] - <span class="number">1</span>] + k])</span><br><span class="line">                k++;</span><br><span class="line">            ht[i] = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> s[MAXN];</span><br><span class="line">suffix_array sa;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        s[i + n] = s[i];</span><br><span class="line">    sa.<span class="built_in">init</span>(s, n + n);</span><br><span class="line">    <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n + n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (sa.sa[i] &lt;= n)</span><br><span class="line">            <span class="built_in">putchar</span>(s[sa.sa[i] + n - <span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P2408 不同子串个数 题解</title>
    <url>/2021/12/17/sol-p2408/</url>
    <content><![CDATA[<h2 id="P2408-不同子串个数-题解"><a href="#P2408-不同子串个数-题解" class="headerlink" title="P2408 不同子串个数 题解"></a>P2408 不同子串个数 题解</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P2408">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>根据<a href="/2021/12/17/top-suffixarray/" title="后缀数组">后缀数组</a>的定义，$ans = \frac{n \times (n + 1)}{2} - \sum\limits_{i=1}^{n}{ht_i}$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P2408.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P2408</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">suffix_array</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, sa[MAXN], rk[MAXN], tp[MAXN], ht[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">radix_sort</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> buk[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            buk[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            buk[rk[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            buk[i] += buk[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">            sa[buk[rk[tp[i]]]--] = tp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">char</span> *s, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="type">int</span> m = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            rk[i] = s[i] - <span class="string">&#x27;0&#x27;</span> + <span class="number">1</span>, tp[i] = i;</span><br><span class="line">        <span class="built_in">radix_sort</span>(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">0</span>, w = <span class="number">1</span>; p &lt; n; m = p, w &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= w; ++i)</span><br><span class="line">                tp[++p] = n - w + i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">if</span> (sa[i] &gt; w)</span><br><span class="line">                    tp[++p] = sa[i] - w;</span><br><span class="line">            <span class="built_in">radix_sort</span>(m);</span><br><span class="line">            <span class="built_in">copy</span>(rk + <span class="number">1</span>, rk + n + <span class="number">1</span>, tp + <span class="number">1</span>);</span><br><span class="line">            rk[sa[<span class="number">1</span>]] = p = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tp[sa[i - <span class="number">1</span>]] == tp[sa[i]] &amp;&amp; tp[sa[i - <span class="number">1</span>] + w] == tp[sa[i] + w])</span><br><span class="line">                    rk[sa[i]] = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    rk[sa[i]] = ++p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k)</span><br><span class="line">                k--;</span><br><span class="line">            <span class="keyword">while</span> (s[i + k] == s[sa[rk[i] - <span class="number">1</span>] + k])</span><br><span class="line">                k++;</span><br><span class="line">            ht[i] = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> s[MAXN];</span><br><span class="line">suffix_array sa;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">    sa.<span class="built_in">init</span>(s, n);</span><br><span class="line">    <span class="type">int</span> ans = n * (n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ans -= sa.ht[i];</span><br><span class="line">    <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>sol-loj6184</title>
    <url>/2021/12/17/sol-loj6184/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><span id="more"></span>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>【专题】多项式</title>
    <url>/2021/12/17/top-poly/</url>
    <content><![CDATA[<h2 id="【专题】多项式"><a href="#【专题】多项式" class="headerlink" title="【专题】多项式"></a>【专题】多项式</h2><p>主要为$FFT$，$NTT$，多项式求逆等变换，可以和生成函数结合起来考计数题。<a href="/2021/11/28/sol-p3803/" title="这篇题解">这篇题解</a>中有对多项式乘法的较详细证明过程。</p>
<p>对于使用生成函数判断方案是否合法（而不是统计方案的数量），使用单模数容易被卡，建议在$998244353$，$1004535809$和$469762049$中选取两个，其原根都为$3$。</p>
<p>若题目中要求对奇怪的数取模，一定记得计算模数的原根，有可能不是$3$！</p>
<span id="more"></span>
<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><a href="/2021/11/28/sol-p3803/" title="P3803 【模版】多项式乘法（FFT）">P3803 【模版】多项式乘法（FFT）</a> </br>

<a href="/2021/12/05/sol-p4245/" title="P4245 【模版】任意模数多项式乘法">P4245 【模版】任意模数多项式乘法</a> </br>

<a href="/2021/12/05/sol-p4721/" title="P4721 【模版】分治FFT 题解">P4721 【模版】分治FFT 题解</a> </br>

<a href="/2021/12/05/sol-p4238/" title="P4238 【模版】多项式求逆 题解">P4238 【模版】多项式求逆 题解</a> </br>

<a href="/2021/12/05/sol-cf632e/" title="CF632E Thief in a Shop 题解">CF632E Thief in a Shop 题解</a> </br>

<a href="/2022/01/02/sol-cf986d/" title="CF986D Perfect Encoding">CF986D Perfect Encoding</a> </br>

<a href="/2022/01/03/sol-cf1613f/" title="CF1613F Tree Coloring">CF1613F Tree Coloring</a> </br>

<a href="/2022/01/03/sol-cf755g/" title="CF755G PolandBall and Many Other Balls">CF755G PolandBall and Many Other Balls</a> </br>

<a href="/2022/01/05/sol-cf623e/" title="CF623E Transforming Sequence">CF623E Transforming Sequence</a> </br>

<a href="/2022/01/07/sol-cf773f/" title="CF773F Test Data Generation">CF773F Test Data Generation</a> </br>

<a href="/2022/01/09/sol-cf553e/" title="CF553E Kyoya and Train">CF553E Kyoya and Train</a> </br>

<a href="/2022/01/18/sol-p4725/" title="P4725 【模版】多项式对数函数（多项式ln）">P4725 【模版】多项式对数函数（多项式ln）</a> </br>

<a href="/2022/01/18/sol-p4726/" title="P4726 【模版】多项式指数函数（多项式exp）">P4726 【模版】多项式指数函数（多项式exp）</a> </br>

<a href="/2022/01/17/sol-p4002/" title="P4002 生成树计数">P4002 生成树计数</a> </br>

<a href="/2022/01/20/sol-p5850/" title="P5850 calc">P5850 calc</a> </br>

<a href="/2022/01/25/sol-p4491/" title="P4491 [HAOI] 染色">P4491 [HAOI] 染色</a>
<h3 id="模版代码"><a href="#模版代码" class="headerlink" title="模版代码"></a>模版代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">double</span> MPI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="comment">// const int MOD = 1004535809; // 备用</span></span><br><span class="line"><span class="comment">// const int MOD = 469762049; // 备用</span></span><br><span class="line"><span class="keyword">namespace</span> polynomial &#123;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">return</span> x &gt;= MOD ? x - MOD : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    x -= y;</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">0</span> ? x + MOD : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> p = MOD)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x % p)</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            ret = ret * x % p;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(_Tp* f, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> rev[MAXN] = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">            rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">            <span class="built_in">swap</span>(f[i], f[rev[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(<span class="type">int</span>* f, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">change</span>(f, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (MOD - <span class="number">1</span>) / h);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">            <span class="type">int</span> g = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; j + h / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                <span class="type">int</span> u = f[k], t = g * f[k + h / <span class="number">2</span>] % MOD;</span><br><span class="line">                f[k] = <span class="built_in">add</span>(u, t), f[k + h / <span class="number">2</span>] = <span class="built_in">sub</span>(u, t);</span><br><span class="line">                g = g * gn % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">reverse</span>(f + <span class="number">1</span>, f + len);</span><br><span class="line">        <span class="type">int</span> inv = <span class="built_in">qpow</span>(len, MOD - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            f[i] = f[i] * inv % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">polymul</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">const</span> <span class="type">int</span>* g, <span class="type">int</span> m, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> tf[MAXN] = &#123;&#125;, tg[MAXN] = &#123;&#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (len &lt; n + m - <span class="number">1</span>)</span><br><span class="line">        len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">copy</span>(f, f + n, tf);</span><br><span class="line">    <span class="built_in">fill</span>(tf + n, tf + len, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">copy</span>(g, g + m, tg);</span><br><span class="line">    <span class="built_in">fill</span>(tg + m, tg + len, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">ntt</span>(tf, len, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">ntt</span>(tg, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        tf[i] = tf[i] * tg[i] % MOD;</span><br><span class="line">    <span class="built_in">ntt</span>(tf, len, <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">copy</span>(tf, tf + n + m - <span class="number">1</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> n + m - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">polyinv</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> tmp[MAXN] = &#123;&#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (len &lt; n)</span><br><span class="line">        len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fill</span>(ans, ans + len + len, <span class="number">0</span>);</span><br><span class="line">    ans[<span class="number">0</span>] = <span class="built_in">qpow</span>(f[<span class="number">0</span>], MOD - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">copy</span>(f, f + h, tmp);</span><br><span class="line">        <span class="built_in">fill</span>(tmp + h, tmp + h + h, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">ntt</span>(tmp, h + h, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">ntt</span>(ans, h + h, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; h + h; ++i)</span><br><span class="line">            ans[i] = ans[i] * (<span class="number">2</span> - ans[i] * tmp[i] % MOD + MOD) % MOD;</span><br><span class="line">        <span class="built_in">ntt</span>(ans, h + h, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">fill</span>(ans + h, ans + h + h, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">derivation</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i)</span><br><span class="line">        ans[i] = f[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % MOD;</span><br><span class="line">    <span class="keyword">return</span> ans[n - <span class="number">1</span>] = <span class="number">0</span>, n - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">integral</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">        ans[i] = f[i - <span class="number">1</span>] * <span class="built_in">qpow</span>(i, MOD - <span class="number">2</span>) % MOD;</span><br><span class="line">    <span class="keyword">return</span> ans[<span class="number">0</span>] = <span class="number">0</span>, n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ln</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> tf[MAXN] = &#123;&#125;, tg[MAXN] = &#123;&#125;;</span><br><span class="line">    <span class="built_in">derivation</span>(f, n, tf);</span><br><span class="line">    <span class="built_in">polyinv</span>(f, n, tg);</span><br><span class="line">    <span class="built_in">polymul</span>(tf, n - <span class="number">1</span>, tg, n, ans);</span><br><span class="line">    <span class="built_in">integral</span>(ans, n - <span class="number">1</span>, ans);</span><br><span class="line">    <span class="built_in">fill</span>(ans + n, ans + n + n, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exp</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* f, <span class="type">int</span> n, <span class="type">int</span>* ans)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> tmp[MAXN] = &#123;&#125;;</span><br><span class="line">    ans[<span class="number">0</span>] = <span class="number">1</span>, ans[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= (n &lt;&lt; <span class="number">1</span>); h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">ln</span>(ans, h, tmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; h; ++i)</span><br><span class="line">            tmp[i] = <span class="built_in">add</span>(i == <span class="number">0</span>, <span class="built_in">sub</span>(f[i], tmp[i]));</span><br><span class="line">        <span class="built_in">polymul</span>(ans, h, tmp, h, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;  <span class="comment">// namespace polynomial</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>专题</category>
      </categories>
      <tags>
        <tag>topics</tag>
      </tags>
  </entry>
  <entry>
    <title>【专题】虚树</title>
    <url>/2021/12/17/top-virtualtree/</url>
    <content><![CDATA[<h2 id="【专题】虚树"><a href="#【专题】虚树" class="headerlink" title="【专题】虚树"></a>【专题】虚树</h2><p>这种东西想到要用很容易，关键是建完虚树后怎么做。</p>
<p>虚树题的特征为<strong>多次询问且出现$\sum M \le 10^5$一类的数据范围</strong>。</p>
<p>如果题目给出的是一张图而不是一棵树，可以思考是否能够结合圆方树等算法转化为虚树。</p>
<p>对于每次询问，将询问的节点和其在原树上的$LCA$单独建出来$dp$即可。</p>
<span id="more"></span>
<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><a href="/2021/11/27/sol-p2495/" title="P2495 消耗战 题解">P2495 消耗战 题解</a> </br>

<a href="/2021/11/29/sol-p4606/" title="P4606 战略游戏 题解">P4606 战略游戏 题解</a> </br>

<a href="/2021/11/27/sol-p3233/" title="P3233 世界树 题解">P3233 世界树 题解</a> </br>

<a href="/2021/12/01/sol-cf1320e/" title="CF1320E Treeland and Viruses 题解">CF1320E Treeland and Viruses 题解</a> </br>

<a href="/2021/12/03/sol-cf639f/" title="CF639F Bear and Chemistry 题解">CF639F Bear and Chemistry 题解</a> </br>

<a href="/2021/12/17/sol-loj6184/" title="sol-loj6184">sol-loj6184</a>
<h3 id="模版代码"><a href="#模版代码" class="headerlink" title="模版代码"></a>模版代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_vtr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(s + <span class="number">1</span>, s + k + <span class="number">1</span>, [](<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        <span class="keyword">return</span> id[x] &lt; id[y];</span><br><span class="line">    &#125;);</span><br><span class="line">    sta[top = <span class="number">1</span>] = <span class="number">1</span>, vtr.head[<span class="number">1</span>] = <span class="number">-1</span>, vtr.tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">lca</span>(sta[top], s[i]);</span><br><span class="line">        <span class="keyword">if</span> (l &lt; <span class="number">1</span> || l &gt; bcc)</span><br><span class="line">            <span class="built_in">lca</span>(sta[top], s[i]);</span><br><span class="line">        <span class="keyword">while</span> (id[l] &lt;= id[sta[top - <span class="number">1</span>]])</span><br><span class="line">            <span class="built_in">add_vedge</span>(sta[top - <span class="number">1</span>], sta[top]), --top;</span><br><span class="line">        <span class="keyword">if</span> (sta[top] != l)</span><br><span class="line">            vtr.head[l] = <span class="number">-1</span>, <span class="built_in">add_vedge</span>(l, sta[top]), sta[top] = l;</span><br><span class="line">        vtr.head[s[i]] = <span class="number">-1</span>, sta[++top] = s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; top; ++i)</span><br><span class="line">        <span class="built_in">add_vedge</span>(sta[i], sta[i + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>专题</category>
      </categories>
      <tags>
        <tag>topics</tag>
      </tags>
  </entry>
  <entry>
    <title>【专题】网络流</title>
    <url>/2021/12/17/top-networkflow/</url>
    <content><![CDATA[<h2 id="【专题】网络流"><a href="#【专题】网络流" class="headerlink" title="【专题】网络流"></a>【专题】网络流</h2><p>网络流的话，先口糊好怎么建图，然后<del>复制</del>默写一下板子就好了。</p>
<p>难点其实有两个，一个是如何建图，另一个是输出路径。</p>
<p>如果一道题有许多奇怪的限制，并且$n$和$m$很小，导致$O(n^2m)$可以通过，就可以往网络流方面去想。</p>
<p><del>其实网络流24题的全称叫网络流和线性规划24题？</del></p>
<span id="more"></span>
<h3 id="费用流需要注意的地方"><a href="#费用流需要注意的地方" class="headerlink" title="费用流需要注意的地方"></a>费用流需要注意的地方</h3><ol>
<li>费用流建反边的$cost$是原来的$cost$的<strong>相反数</strong>，即需要<code>add(u, v, c, f), add(v, u, -c, 0);</code></li>
<li>计算流量的方式和普通网络流相同，但是计算总$cost$是每次加上<code>edge.cost * flow</code>，<strong>不要忘记乘上$cost$</strong>，用全局变量存$cost$会好写一些。</li>
<li>由于费用流的边权可能$\le 0$，所以<strong>必须</strong>用$spfa$而无法使用$dijkstra$，并且$dfs$<strong>增广时必须开$vis$数组防止无限递归</strong>。</li>
<li>（这应该算是个小$tip$）网络流$tot$一开始清空成$1$可以不需要再调用<code>init</code>函数，也不需要再把$head$清空成$-1$。</li>
</ol>
<h3 id="流模型"><a href="#流模型" class="headerlink" title="流模型"></a>流模型</h3><a href="/2021/12/20/sol-p2756/" title="P2756 飞行员配对方案问题">P2756 飞行员配对方案问题</a> </br>

<a href="/2021/12/21/sol-p4016/" title="P4016 负载平衡问题">P4016 负载平衡问题</a> </br>

<a href="/2021/12/22/sol-p1251/" title="P1251 餐巾计划问题">P1251 餐巾计划问题</a> </br>

<a href="/2021/12/22/sol-p2754/" title="P2754 星际转移问题">P2754 星际转移问题</a> </br>

<a href="/2021/12/23/sol-p2763/" title="P2763 试题库问题">P2763 试题库问题</a> </br>

<a href="/2021/12/24/sol-p2764/" title="P2764 最小路径覆盖问题">P2764 最小路径覆盖问题</a> </br>

<a href="/2021/12/24/sol-p2765/" title="P2765 魔术球问题">P2765 魔术球问题</a> </br>

<a href="/2021/12/24/sol-p2766/" title="P2766 最长不下降子序列问题">P2766 最长不下降子序列问题</a> </br>

<a href="/2021/12/24/sol-p2770/" title="P2770 航空路线问题">P2770 航空路线问题</a> </br>

<a href="/2021/12/25/sol-p3254/" title="P3254 圆桌问题">P3254 圆桌问题</a> </br>

<a href="/2021/12/27/sol-p3356/" title="P3356 火星探险问题">P3356 火星探险问题</a> </br>

<a href="/2021/12/27/sol-p3357/" title="P3357 最长k可重线段集问题">P3357 最长k可重线段集问题</a> </br>

<a href="/2021/12/27/sol-p3358/" title="P3358 最长k可重区间集问题">P3358 最长k可重区间集问题</a> </br>

<a href="/2021/12/30/sol-p4012/" title="P4012 深海机器人问题">P4012 深海机器人问题</a> </br>

<a href="/2021/12/30/sol-p4013/" title="P4013 数字梯形问题">P4013 数字梯形问题</a> </br>

<a href="/2021/12/30/sol-p4014/" title="P4014 分配问题">P4014 分配问题</a> </br>

<a href="/2021/12/30/sol-p4015/" title="P4015 运输问题">P4015 运输问题</a>
<h3 id="割模型"><a href="#割模型" class="headerlink" title="割模型"></a>割模型</h3><a href="/2021/12/22/sol-p2762/" title="P2762 太空飞行计划问题">P2762 太空飞行计划问题</a> </br>

<a href="/2021/12/25/sol-p2774/" title="P2774 方格取数问题">P2774 方格取数问题</a> </br>

<a href="/2021/12/25/sol-p3355/" title="P3355 骑士共存问题">P3355 骑士共存问题</a>
<h3 id="非模型"><a href="#非模型" class="headerlink" title="非模型"></a>非模型</h3><a href="/2021/12/20/sol-p2761/" title="P276 软件补丁问题">P276 软件补丁问题</a> </br>

<a href="/2021/12/21/sol-p4011/" title="P4011 孤岛营救问题">P4011 孤岛营救问题</a> </br>

<a href="/2021/12/31/sol-p4009/" title="P4009 汽车加油行驶问题">P4009 汽车加油行驶问题</a>
<h3 id="模版代码"><a href="#模版代码" class="headerlink" title="模版代码"></a>模版代码</h3><h4 id="网络流-dinic"><a href="#网络流-dinic" class="headerlink" title="网络流(dinic)"></a>网络流(dinic)</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Dinic</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, flow;</span><br><span class="line">    &#125; edge[MAXM];</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>, flow = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> head[MAXN], nxt[MAXM], lev[MAXN], cur[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> flow)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, flow&#125;;</span><br><span class="line">        nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, <span class="number">0</span>&#125;;</span><br><span class="line">        nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>(lev, lev + MAXN, <span class="number">-1</span>);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        lev[s] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[i].v;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; lev[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    lev[v] = lev[u] + <span class="number">1</span>;</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lev[t] != <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">augment</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (lev[v] != lev[u] + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">augment</span>(v, t, <span class="built_in">min</span>(mx, edge[i].flow));</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxflow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">copy</span>(head, head + MAXN, cur);</span><br><span class="line">            flow += <span class="built_in">augment</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="网络流-HLPP"><a href="#网络流-HLPP" class="headerlink" title="网络流 (HLPP)"></a>网络流 (HLPP)</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">HLPP</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v; ll flow;</span><br><span class="line">    &#125; edge[MAXM * <span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> n, s, t, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> head[MAXN], nxt[MAXM * <span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> h[MAXN], gap[MAXN * <span class="number">2</span>], inq[MAXN];</span><br><span class="line">    ll e[MAXN];</span><br><span class="line">    priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; pq;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123; <span class="keyword">this</span>-&gt;n = n; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, ll f)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, f&#125;, nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, <span class="number">0</span>&#125;, nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> que[MAXN];</span><br><span class="line">        <span class="type">int</span> fr = <span class="number">0</span>, bk = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fill</span>(h + <span class="number">1</span>, h + n + <span class="number">1</span>, INF);</span><br><span class="line">        h[t] = <span class="number">0</span>, que[bk++] = t;</span><br><span class="line">        <span class="keyword">while</span> (fr &lt; bk) &#123;</span><br><span class="line">            <span class="type">int</span> u = que[fr++];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i])</span><br><span class="line">                <span class="keyword">if</span> (h[edge[i].v] &gt; h[u] + <span class="number">1</span> &amp;&amp; edge[i ^ <span class="number">1</span>].flow)</span><br><span class="line">                    h[edge[i].v] = h[u] + <span class="number">1</span>, que[bk++] = edge[i].v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h[s] != INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i])</span><br><span class="line">            <span class="keyword">if</span> (h[edge[i].v] + <span class="number">1</span> == h[u] &amp;&amp; edge[i].flow) &#123;</span><br><span class="line">                ll tmp = <span class="built_in">min</span>(e[u], edge[i].flow);</span><br><span class="line">                edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">                e[u] -= tmp, e[edge[i].v] += tmp;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].v != s &amp;&amp; edge[i].v != t &amp;&amp; !inq[edge[i].v])</span><br><span class="line">                    pq.<span class="built_in">push</span>(&#123;h[edge[i].v], edge[i].v&#125;), inq[edge[i].v] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (!e[u]) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">relabel</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        h[u] = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i])</span><br><span class="line">            <span class="keyword">if</span> (h[u] &gt; h[edge[i].v] + <span class="number">1</span> &amp;&amp; edge[i].flow)</span><br><span class="line">                h[u] = h[edge[i].v] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">maxflow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;s = s, <span class="keyword">this</span>-&gt;t = t;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">bfs</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        h[s] = n;</span><br><span class="line">        <span class="built_in">fill</span>(gap, gap + n + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (h[i] &lt; INF) ++gap[h[i]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[s]; i; i = nxt[i])</span><br><span class="line">            <span class="keyword">if</span> (ll d = edge[i].flow) &#123;</span><br><span class="line">                edge[i].flow -= d, edge[i ^ <span class="number">1</span>].flow += d;</span><br><span class="line">                e[s] -= d, e[edge[i].v] += d;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].v != s &amp;&amp; edge[i].v != t &amp;&amp; !inq[edge[i].v])</span><br><span class="line">                    pq.<span class="built_in">push</span>(&#123;h[edge[i].v], edge[i].v&#125;), inq[edge[i].v] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = pq.<span class="built_in">top</span>().second; pq.<span class="built_in">pop</span>();</span><br><span class="line">            inq[u] = <span class="number">0</span>, <span class="built_in">push</span>(u);</span><br><span class="line">            <span class="keyword">if</span> (e[u]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!--gap[h[u]]) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                        <span class="keyword">if</span> (i != s &amp;&amp; i != t &amp;&amp; h[u] &lt; h[i] &amp;&amp; h[i] &lt; n + <span class="number">1</span>)</span><br><span class="line">                            h[i] = n + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">relabel</span>(u), ++gap[h[u]];</span><br><span class="line">                pq.<span class="built_in">push</span>(&#123;h[u], u&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e[t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; network;</span><br></pre></td></tr></table></figure>
<h4 id="最小费用最大流-dinic"><a href="#最小费用最大流-dinic" class="headerlink" title="最小费用最大流(dinic)"></a>最小费用最大流(dinic)</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="type">const</span> <span class="type">int</span> MAXV, <span class="type">const</span> <span class="type">int</span> MAXE&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MCMF</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, flow, cost;</span><br><span class="line">    &#125; edge[MAXE * <span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>, head[MAXV], nxt[MAXE];</span><br><span class="line">    <span class="type">int</span> flow, cost, cur[MAXV], dis[MAXV];</span><br><span class="line">    <span class="type">bool</span> vis[MAXV];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> flow, <span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">        edge[++tot] = &#123;v, flow, cost&#125;;</span><br><span class="line">        nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">        edge[++tot] = &#123;u, <span class="number">0</span>, -cost&#125;;</span><br><span class="line">        nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>(vis, vis + MAXV, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(dis, dis + MAXV, INF);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line">        vis[s] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            vis[u] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[i].v;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].flow &amp;&amp; dis[v] &gt; dis[u] + edge[i].cost) &#123;</span><br><span class="line">                    dis[v] = dis[u] + edge[i].cost;</span><br><span class="line">                    <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                        que.<span class="built_in">push</span>(v);</span><br><span class="line">                        vis[v] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis[t] != INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">augment</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || mx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (vis[v] || dis[v] != dis[u] + edge[i].cost)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">augment</span>(v, t, <span class="built_in">min</span>(mx, edge[i].flow));</span><br><span class="line">            cost += tmp * edge[i].cost;</span><br><span class="line">            mx -= tmp, ret += tmp;</span><br><span class="line">            edge[i].flow -= tmp, edge[i ^ <span class="number">1</span>].flow += tmp;</span><br><span class="line">            <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">mcmf</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">spfa</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">copy</span>(head, head + MAXV, cur);</span><br><span class="line">            flow += <span class="built_in">augment</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">make_pair</span>(flow, cost);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>专题</category>
      </categories>
      <tags>
        <tag>topics</tag>
      </tags>
  </entry>
  <entry>
    <title>【专题】后缀数组 SA</title>
    <url>/2021/12/17/top-suffixarray/</url>
    <content><![CDATA[<h2 id="【专题】后缀数组-SA"><a href="#【专题】后缀数组-SA" class="headerlink" title="【专题】后缀数组 SA"></a>【专题】后缀数组 SA</h2><p><strong>警告：SA多次使用一定要清空，我也不知道为什么。</strong></p>
<p><del>虽然有不少此类题目可以用字符串hash瞎搞</del></p>
<p>记住代码中每个数组的含义：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">数组</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$sa_i$</td>
<td style="text-align:center">排名为$i$的后缀的起始位置</td>
</tr>
<tr>
<td style="text-align:center">$rk_i$</td>
<td style="text-align:center">后缀$s_{i \cdots n}$的排名</td>
</tr>
<tr>
<td style="text-align:center">$tp_i$</td>
<td style="text-align:center">临时数组，用来在基数排序中记录临时排名</td>
</tr>
<tr>
<td style="text-align:center">$ht_i$</td>
<td style="text-align:center">第$rk<em>i$个后缀和第$rk</em>{i-1}$个后缀的$LCP$</td>
</tr>
</tbody>
</table>
</div>
<span id="more"></span>
<h3 id="一些性质"><a href="#一些性质" class="headerlink" title="一些性质"></a>一些性质</h3><h4 id="可重叠最长重复子串"><a href="#可重叠最长重复子串" class="headerlink" title="可重叠最长重复子串"></a>可重叠最长重复子串</h4><p>即$ht$数组的最大值。</p>
<h4 id="不同子串个数"><a href="#不同子串个数" class="headerlink" title="不同子串个数"></a>不同子串个数</h4><p>即$\frac{n \times (n + 1)}{2} - \sum\limits_{i=1}^{n}{ht_i}$（易证）。</p>
<h4 id="任意两个后缀的-LCP"><a href="#任意两个后缀的-LCP" class="headerlink" title="任意两个后缀的$LCP$"></a>任意两个后缀的$LCP$</h4><p>设分别为后缀$s<em>{i \cdots n}$和$s</em>{j \cdots n}$，其中$i \lt j$，$LCP = \min\limits_{k=i+1}^{j}{ht_k}$，用$RMQ$解决。</p>
<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><a href="/2021/12/17/sol-p2408/" title="P2408 不同子串个数 题解">P2408 不同子串个数 题解</a> </br>

<a href="/2021/12/17/sol-p4051/" title="P4051 [JSOI2007] 字符加密 题解">P4051 [JSOI2007] 字符加密 题解</a> </br>

<a href="/2021/12/17/sol-p4248/" title="[AHOI2013] 差异 题解">[AHOI2013] 差异 题解</a> </br>

<a href="/2021/12/19/sol-p3181/" title="P3181 [HAOI2016] 找相同字符串">P3181 [HAOI2016] 找相同字符串</a> </br>

<a href="/2022/01/26/sol-uva11107/" title="UVA11107 Life Forms">UVA11107 Life Forms</a> </br>

<a href="/2022/02/02/sol-p2336/" title="P2336 [SCOI2012] 喵星球上的点名">P2336 [SCOI2012] 喵星球上的点名</a> </br>

<a href="/2022/02/03/sol-p4341/" title="P4341 [BJWC2010] 外星联络">P4341 [BJWC2010] 外星联络</a> </br>

<a href="/2022/02/03/sol-p4070/" title="P4070 [SDOI2016] 生成魔咒">P4070 [SDOI2016] 生成魔咒</a> </br>

<a href="/2022/02/03/sol-p5028/" title="P5028 Annihilate">P5028 Annihilate</a> </br>

<a href="/2022/02/03/sol-p4081/" title="P4081 [USACO17DEC] Standing Out from the Herd P">P4081 [USACO17DEC] Standing Out from the Herd P</a> </br>

<a href="/2022/02/04/sol-p4094/" title="P4094 [HEOI2016&#x2F;TJOI2016] 字符串">P4094 [HEOI2016&#x2F;TJOI2016] 字符串</a> </br>

<a href="/2022/02/04/sol-p1117/" title="P1117 [NOI2016] 优秀的拆分">P1117 [NOI2016] 优秀的拆分</a> </br>

<a href="/2022/02/05/sol-p3900/" title="P3900 [湖南集训] 图森">P3900 [湖南集训] 图森</a> </br>

<a href="/2022/02/05/sol-p4770/" title="P4770 [NOI2018] 你的名字">P4770 [NOI2018] 你的名字</a> </br>

<a href="/2022/02/05/sol-p6095/" title="P6095 [JSOI2015] 串分割">P6095 [JSOI2015] 串分割</a>
<h3 id="模版代码"><a href="#模版代码" class="headerlink" title="模版代码"></a>模版代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SuffixArray</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, sa[MAXN], rk[MAXN], tp[MAXN], ht[MAXN], he[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>(sa, sa + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(rk, rk + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(tp, tp + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(ht, ht + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(he, he + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">radix_sort</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> buc[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            buc[rk[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            buc[i] += buc[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">            sa[buc[rk[tp[i]]]--] = tp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="type">int</span> m = <span class="number">200</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            rk[i] = s[i] + <span class="number">1</span>, tp[i] = i;</span><br><span class="line">        <span class="built_in">radix_sort</span>(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">1</span>, p = <span class="number">0</span>; p &lt; n; m = p, w &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= w; ++i)</span><br><span class="line">                tp[++p] = n - w + i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">if</span> (sa[i] &gt; w)</span><br><span class="line">                    tp[++p] = sa[i] - w;</span><br><span class="line">            <span class="built_in">radix_sort</span>(m);</span><br><span class="line">            <span class="built_in">copy</span>(rk + <span class="number">1</span>, rk + n + <span class="number">1</span>, tp + <span class="number">1</span>);</span><br><span class="line">            rk[sa[<span class="number">1</span>]] = p = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tp[sa[i - <span class="number">1</span>]] == tp[sa[i]] &amp;&amp; tp[sa[i - <span class="number">1</span>] + w] == tp[sa[i] + w])</span><br><span class="line">                    rk[sa[i]] = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    rk[sa[i]] = ++p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k)</span><br><span class="line">                k--;</span><br><span class="line">            <span class="keyword">while</span> (s[i + k] == s[sa[rk[i] - <span class="number">1</span>] + k])</span><br><span class="line">                k++;</span><br><span class="line">            ht[i] = he[rk[i]] = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>专题</category>
      </categories>
      <tags>
        <tag>topics</tag>
      </tags>
  </entry>
  <entry>
    <title>P3809 【模版】后缀排序 题解</title>
    <url>/2021/12/16/sol-p3809/</url>
    <content><![CDATA[<h2 id="P3809-【模版】后缀排序-题解"><a href="#P3809-【模版】后缀排序-题解" class="headerlink" title="P3809 【模版】后缀排序 题解"></a>P3809 【模版】后缀排序 题解</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P3809">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>模版题不多说</p>
<p>记住代码中每个数组的含义：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">数组</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$sa_i$</td>
<td style="text-align:center">排名为$i$的后缀的起始位置</td>
</tr>
<tr>
<td style="text-align:center">$rk_i$</td>
<td style="text-align:center">后缀$s_{i \cdots n}$的排名</td>
</tr>
<tr>
<td style="text-align:center">$tp_i$</td>
<td style="text-align:center">临时数组，用来在基数排序中记录临时排名</td>
</tr>
<tr>
<td style="text-align:center">$ht_i$</td>
<td style="text-align:center">第$rk<em>i$个后缀和第$rk</em>{i-1}$个后缀的$LCP$</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">suffix_array</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, sa[MAXN], rk[MAXN], tp[MAXN], ht[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">radix_sort</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> buk[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            buk[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            buk[rk[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            buk[i] += buk[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">            sa[buk[rk[tp[i]]]--] = tp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">char</span> *s, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="type">int</span> m = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            rk[i] = s[i] - <span class="string">&#x27;0&#x27;</span> + <span class="number">1</span>, tp[i] = i;</span><br><span class="line">        <span class="built_in">radix_sort</span>(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">0</span>, w = <span class="number">1</span>; p &lt; n; m = p, w &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= w; ++i)</span><br><span class="line">                tp[++p] = n - w + i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">if</span> (sa[i] &gt; w)</span><br><span class="line">                    tp[++p] = sa[i] - w;</span><br><span class="line">            <span class="built_in">radix_sort</span>(m);</span><br><span class="line">            <span class="built_in">copy</span>(rk + <span class="number">1</span>, rk + n + <span class="number">1</span>, tp + <span class="number">1</span>);</span><br><span class="line">            rk[sa[<span class="number">1</span>]] = p = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tp[sa[i - <span class="number">1</span>]] == tp[sa[i]] &amp;&amp; tp[sa[i - <span class="number">1</span>] + w] == tp[sa[i] + w])</span><br><span class="line">                    rk[sa[i]] = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    rk[sa[i]] = ++p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k)</span><br><span class="line">                k--;</span><br><span class="line">            <span class="keyword">while</span> (s[i + k] == s[sa[rk[i] - <span class="number">1</span>] + k])</span><br><span class="line">                k++;</span><br><span class="line">            ht[i] = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P3809.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P3809</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">suffix_array</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, sa[MAXN], rk[MAXN], tp[MAXN], ht[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">radix_sort</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> buk[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            buk[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            buk[rk[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            buk[i] += buk[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">            sa[buk[rk[tp[i]]]--] = tp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">char</span> *s, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="type">int</span> m = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            rk[i] = s[i] - <span class="string">&#x27;0&#x27;</span> + <span class="number">1</span>, tp[i] = i;</span><br><span class="line">        <span class="built_in">radix_sort</span>(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">0</span>, w = <span class="number">1</span>; p &lt; n; m = p, w &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= w; ++i)</span><br><span class="line">                tp[++p] = n - w + i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">if</span> (sa[i] &gt; w)</span><br><span class="line">                    tp[++p] = sa[i] - w;</span><br><span class="line">            <span class="built_in">radix_sort</span>(m);</span><br><span class="line">            <span class="built_in">copy</span>(rk + <span class="number">1</span>, rk + n + <span class="number">1</span>, tp + <span class="number">1</span>);</span><br><span class="line">            rk[sa[<span class="number">1</span>]] = p = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tp[sa[i - <span class="number">1</span>]] == tp[sa[i]] &amp;&amp; tp[sa[i - <span class="number">1</span>] + w] == tp[sa[i] + w])</span><br><span class="line">                    rk[sa[i]] = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    rk[sa[i]] = ++p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k)</span><br><span class="line">                k--;</span><br><span class="line">            <span class="keyword">while</span> (s[i + k] == s[sa[rk[i] - <span class="number">1</span>] + k])</span><br><span class="line">                k++;</span><br><span class="line">            ht[i] = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> s[MAXN];</span><br><span class="line">suffix_array sa;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">    sa.<span class="built_in">init</span>(s, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">write</span>(sa.sa[i]), <span class="built_in">putchar</span>(<span class="string">&quot; \n&quot;</span>[i == n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P2056 [ZJOI2007] 捉迷藏 题解</title>
    <url>/2021/12/15/sol-p2056/</url>
    <content><![CDATA[<h2 id="P2056-ZJOI2007-捉迷藏-题解"><a href="#P2056-ZJOI2007-捉迷藏-题解" class="headerlink" title="P2056 [ZJOI2007] 捉迷藏 题解"></a>P2056 [ZJOI2007] 捉迷藏 题解</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P2056">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>想到是点分树就比较好做了。</p>
<p>看到树上路径想到$LCA$或点分树。先考虑单次查询的点分治做法，$dp1_u$表示$u$为重心的块中到$fa_u$的最长距离，$dp0_u$表示$u$为重心的块中经过$u$的最长路径，显然$dp0_u$为每个儿子$v$的$dp1_v$最大值与次大值之和。</p>
<p>将此方法拓展到点分树上，我们可以为每个节点维护两个可删堆，分别就表示$dp0_u$和$dp1_u$的值，最后统计到答案中。</p>
<p>空间复杂度$O(n \log n)$，时间复杂度$O(n \log^2 n)$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P2056.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;Ofast&quot;, &quot;inline&quot;, &quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">// #pragma GCC target (&quot;avx,sse2,sse3,sse4,mmx&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LOGN = <span class="number">18</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">heap</span> &#123;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>&gt; q, p;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        q.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        p.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (p.<span class="built_in">size</span>() &amp;&amp; q.<span class="built_in">size</span>() &amp;&amp; p.<span class="built_in">top</span>() == q.<span class="built_in">top</span>())</span><br><span class="line">            p.<span class="built_in">pop</span>(), q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> q.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (p.<span class="built_in">size</span>() &amp;&amp; q.<span class="built_in">size</span>() &amp;&amp; p.<span class="built_in">top</span>() == q.<span class="built_in">top</span>())</span><br><span class="line">            p.<span class="built_in">pop</span>(), q.<span class="built_in">pop</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q.<span class="built_in">size</span>() - p.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sectop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="built_in">top</span>();</span><br><span class="line">        <span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> r = <span class="built_in">top</span>();</span><br><span class="line">        <span class="built_in">push</span>(t);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, q, fa[MAXN], dep[MAXN], fq[MAXN][LOGN];</span><br><span class="line"><span class="type">int</span> scnt, siz[MAXN], mxsiz[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXN], opn[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[MAXN];</span><br><span class="line">heap shp, hp[MAXN][<span class="number">2</span>];</span><br><span class="line"><span class="type">char</span> buf[<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getroot</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f, <span class="type">int</span> sz)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    siz[u] = <span class="number">1</span>, mxsiz[u] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == f || vis[v])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> tmp = <span class="built_in">getroot</span>(v, u, sz);</span><br><span class="line">        <span class="keyword">if</span> (mxsiz[tmp] &lt; mxsiz[ret])</span><br><span class="line">            ret = tmp;</span><br><span class="line">        siz[u] += siz[v];</span><br><span class="line">        mxsiz[u] = <span class="built_in">max</span>(mxsiz[u], siz[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    mxsiz[u] = <span class="built_in">max</span>(mxsiz[u], sz - siz[u]);</span><br><span class="line">    <span class="keyword">if</span> (mxsiz[u] &lt; mxsiz[ret])</span><br><span class="line">        ret = u;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    fq[u][<span class="number">0</span>] = f, dep[u] = dep[f] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; LOGN; ++i)</span><br><span class="line">        fq[u][i] = fq[fq[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u])</span><br><span class="line">        <span class="keyword">if</span> (v != f)</span><br><span class="line">            <span class="built_in">build1</span>(v, u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f, <span class="type">int</span> sz)</span> </span>&#123;</span><br><span class="line">    vis[u] = <span class="literal">true</span>, fa[u] = f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == f || vis[v])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> ns = (siz[u] &gt; siz[v]) ? siz[v] : sz - siz[u];</span><br><span class="line">        <span class="type">int</span> rt = <span class="built_in">getroot</span>(v, u, ns);</span><br><span class="line">        <span class="built_in">build2</span>(rt, u, ns);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v])</span><br><span class="line">        <span class="built_in">swap</span>(u, v);</span><br><span class="line">    <span class="type">int</span> t = dep[u] - dep[v];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = LOGN - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> ((t &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">            u = fq[u][i];</span><br><span class="line">    <span class="keyword">if</span> (u == v)</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = LOGN - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> (fq[u][i] != fq[v][i])</span><br><span class="line">            u = fq[u][i], v = fq[v][i];</span><br><span class="line">    <span class="keyword">return</span> fq[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dist</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dep[u] + dep[v] - (dep[<span class="built_in">lca</span>(u, v)] &lt;&lt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hp[x][<span class="number">0</span>].<span class="built_in">size</span>() &gt;= <span class="number">2</span>)</span><br><span class="line">        shp.<span class="built_in">erase</span>(hp[x][<span class="number">0</span>].<span class="built_in">top</span>() + hp[x][<span class="number">0</span>].<span class="built_in">sectop</span>());</span><br><span class="line">    <span class="keyword">if</span> (opn[x])</span><br><span class="line">        hp[x][<span class="number">0</span>].<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        hp[x][<span class="number">0</span>].<span class="built_in">erase</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (hp[x][<span class="number">0</span>].<span class="built_in">size</span>() &gt;= <span class="number">2</span>)</span><br><span class="line">        shp.<span class="built_in">push</span>(hp[x][<span class="number">0</span>].<span class="built_in">top</span>() + hp[x][<span class="number">0</span>].<span class="built_in">sectop</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> u = x; fa[u]; u = fa[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hp[fa[u]][<span class="number">0</span>].<span class="built_in">size</span>() &gt;= <span class="number">2</span>)</span><br><span class="line">            shp.<span class="built_in">erase</span>(hp[fa[u]][<span class="number">0</span>].<span class="built_in">top</span>() + hp[fa[u]][<span class="number">0</span>].<span class="built_in">sectop</span>());</span><br><span class="line">        <span class="keyword">if</span> (hp[u][<span class="number">1</span>].<span class="built_in">size</span>())</span><br><span class="line">            hp[fa[u]][<span class="number">0</span>].<span class="built_in">erase</span>(hp[u][<span class="number">1</span>].<span class="built_in">top</span>());</span><br><span class="line">        <span class="keyword">if</span> (opn[x])</span><br><span class="line">            hp[u][<span class="number">1</span>].<span class="built_in">push</span>(<span class="built_in">dist</span>(fa[u], x));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            hp[u][<span class="number">1</span>].<span class="built_in">erase</span>(<span class="built_in">dist</span>(fa[u], x));</span><br><span class="line">        <span class="keyword">if</span> (hp[u][<span class="number">1</span>].<span class="built_in">size</span>())</span><br><span class="line">            hp[fa[u]][<span class="number">0</span>].<span class="built_in">push</span>(hp[u][<span class="number">1</span>].<span class="built_in">top</span>());</span><br><span class="line">        <span class="keyword">if</span> (hp[fa[u]][<span class="number">0</span>].<span class="built_in">size</span>() &gt;= <span class="number">2</span>)</span><br><span class="line">            shp.<span class="built_in">push</span>(hp[fa[u]][<span class="number">0</span>].<span class="built_in">top</span>() + hp[fa[u]][<span class="number">0</span>].<span class="built_in">sectop</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> shp.<span class="built_in">size</span>() ? shp.<span class="built_in">top</span>() : (scnt ? <span class="number">0</span> : <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v);</span><br><span class="line">        g[u].<span class="built_in">emplace_back</span>(v);</span><br><span class="line">        g[v].<span class="built_in">emplace_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    mxsiz[<span class="number">0</span>] = INF;</span><br><span class="line">    <span class="built_in">build1</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">build2</span>(<span class="built_in">getroot</span>(<span class="number">1</span>, <span class="number">0</span>, n), <span class="number">0</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        opn[i] = <span class="literal">true</span>, <span class="built_in">update</span>(i), ++scnt;</span><br><span class="line">    <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">        <span class="keyword">if</span> (buf[<span class="number">0</span>] == <span class="string">&#x27;G&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">write</span>(<span class="built_in">query</span>()), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            <span class="built_in">read</span>(x);</span><br><span class="line">            opn[x] ? --scnt : ++scnt;</span><br><span class="line">            opn[x] = !opn[x];</span><br><span class="line">            <span class="built_in">update</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>一些有趣的事情</title>
    <url>/2021/12/13/interesting/</url>
    <content><![CDATA[<h2 id="一些有趣的事情（可以让这个博客充满活跃的气氛）"><a href="#一些有趣的事情（可以让这个博客充满活跃的气氛）" class="headerlink" title="一些有趣的事情（可以让这个博客充满活跃的气氛）"></a>一些有趣的事情（可以让这个博客<del>充满</del>活跃<del>的气氛</del>）</h2><span id="more"></span>
<h3 id="2021-12-13"><a href="#2021-12-13" class="headerlink" title="2021.12.13"></a>2021.12.13</h3><p>上周六才喝过 $H_2CO_3$（指可乐）并且被某巨佬提醒 $H_2O+CO_2=H_2CO_3$ </p>
<p>于是化学考试<strong>猜</strong>出 $C$ 和 $CuO$ ，<strong>猜</strong>出 $H_2CO_3 $，<strong>猜</strong>出 $CO_2$ 和 $H_2O$ 的位置，<strong>猜</strong>出和 $Fe_2O_3$ 反应的是 $H_2$ 并且<strong>猜</strong>对了我独立做出来的第一道物质推断题（真就全是猜对的）</p>
<p>所以说周六集训一定要买可乐。<del>可以让你化学考试加分</del></p>
]]></content>
  </entry>
  <entry>
    <title>P6329 【模版】点分树｜震波</title>
    <url>/2021/12/10/sol-p6329/</url>
    <content><![CDATA[<h2 id="P6329-【模版】点分树｜震波"><a href="#P6329-【模版】点分树｜震波" class="headerlink" title="P6329 【模版】点分树｜震波"></a>P6329 【模版】点分树｜震波</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P6329">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p><del>题目里都说了是点分树</del></p>
<p>发现自己学过的点分树现在已经不会写了，<strong>改天</strong>来补个点分树的题解吧。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P6329.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P6329</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LOGN = <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">binary_indexed_tree</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; c;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ##sb-mistakes## 开`vector`当动态开点树状数组`resize`时没有$+1$</span></span><br><span class="line">        <span class="comment">// c.resize(n = m);</span></span><br><span class="line">        c.<span class="built_in">resize</span>((n = m) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt;= n; i += (i &amp; -i))</span><br><span class="line">            c[i] += v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">min</span>(x, n);</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x; i; i -= (i &amp; -i))</span><br><span class="line">            ret += c[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, q, a[MAXN], fa[MAXN], dep[MAXN], fq[MAXN][LOGN];</span><br><span class="line"><span class="type">int</span> cur[MAXN], siz[MAXN], mxsiz[MAXN];</span><br><span class="line">bitset&lt;MAXN&gt; vis;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[MAXN];</span><br><span class="line">binary_indexed_tree bit[MAXN][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getroot</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f, <span class="type">int</span> sz)</span> </span>&#123;</span><br><span class="line">    siz[u] = <span class="number">1</span>;</span><br><span class="line">    mxsiz[u] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == f || vis[v])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> tmp = <span class="built_in">getroot</span>(v, u, sz);</span><br><span class="line">        siz[u] += siz[v];</span><br><span class="line">        mxsiz[u] = <span class="built_in">max</span>(mxsiz[u], siz[v]);</span><br><span class="line">        <span class="keyword">if</span> (mxsiz[tmp] &lt; mxsiz[ret])</span><br><span class="line">            ret = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    mxsiz[u] = <span class="built_in">max</span>(mxsiz[u], sz - siz[u]);</span><br><span class="line">    <span class="keyword">if</span> (mxsiz[u] &lt; mxsiz[ret])</span><br><span class="line">        ret = u;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f, <span class="type">int</span> sz)</span> </span>&#123;</span><br><span class="line">    fa[u] = f, vis[u] = <span class="literal">true</span>;</span><br><span class="line">    bit[u][<span class="number">0</span>].<span class="built_in">init</span>(sz + <span class="number">2</span>);</span><br><span class="line">    bit[u][<span class="number">1</span>].<span class="built_in">init</span>(sz + <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[v])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> nsz = (siz[u] &gt; siz[v]) ? siz[v] : (sz - siz[u]);</span><br><span class="line">        <span class="type">int</span> nrt = <span class="built_in">getroot</span>(v, <span class="number">0</span>, nsz);</span><br><span class="line">        <span class="built_in">build1</span>(nrt, u, nsz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    fq[u][<span class="number">0</span>] = f, dep[u] = dep[f] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; LOGN; ++i)</span><br><span class="line">        fq[u][i] = fq[fq[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u])</span><br><span class="line">        <span class="keyword">if</span> (v != f)</span><br><span class="line">            <span class="built_in">build2</span>(v, u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v])</span><br><span class="line">        <span class="built_in">swap</span>(u, v);</span><br><span class="line">    <span class="type">int</span> t = dep[u] - dep[v];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = LOGN - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> ((t &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">            u = fq[u][i];</span><br><span class="line">    <span class="keyword">if</span> (u == v)</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = LOGN - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> (fq[u][i] != fq[v][i])</span><br><span class="line">            u = fq[u][i], v = fq[v][i];</span><br><span class="line">    <span class="keyword">return</span> fq[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getdis</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="built_in">lca</span>(x, y);</span><br><span class="line">    <span class="keyword">return</span> dep[x] + dep[y] - <span class="number">2</span> * dep[l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> u = x; u; u = fa[u]) &#123;</span><br><span class="line">        bit[u][<span class="number">0</span>].<span class="built_in">add</span>(<span class="built_in">getdis</span>(u, x) + <span class="number">1</span>, v - cur[x]);</span><br><span class="line">        <span class="keyword">if</span> (fa[u])</span><br><span class="line">            bit[u][<span class="number">1</span>].<span class="built_in">add</span>(<span class="built_in">getdis</span>(fa[u], x) + <span class="number">1</span>, v - cur[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    cur[x] = v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> u = x; u; u = fa[u]) &#123;</span><br><span class="line">        <span class="type">int</span> d = k - <span class="built_in">getdis</span>(u, x);</span><br><span class="line">        <span class="keyword">if</span> (d &gt;= <span class="number">0</span>)</span><br><span class="line">            ret += bit[u][<span class="number">0</span>].<span class="built_in">sum</span>(d + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (fa[u]) &#123;</span><br><span class="line">            d = k - <span class="built_in">getdis</span>(fa[u], x);</span><br><span class="line">            <span class="keyword">if</span> (d &gt;= <span class="number">0</span>)</span><br><span class="line">                ret -= bit[u][<span class="number">1</span>].<span class="built_in">sum</span>(d + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v);</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    mxsiz[<span class="number">0</span>] = INFL;</span><br><span class="line">    <span class="built_in">build1</span>(<span class="built_in">getroot</span>(<span class="number">1</span>, <span class="number">0</span>, n), <span class="number">0</span>, n);</span><br><span class="line">    <span class="built_in">build2</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> tt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">modify</span>(i, a[i]);</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">int</span> op, x, y;</span><br><span class="line">        <span class="built_in">read</span>(op), <span class="built_in">read</span>(x), <span class="built_in">read</span>(y);</span><br><span class="line">        x ^= tt, y ^= tt;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">write</span>(tt = <span class="built_in">query</span>(x, y));</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">modify</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P2664 树上游戏 题解</title>
    <url>/2021/12/10/sol-p2664/</url>
    <content><![CDATA[<h2 id="P2664-树上游戏-题解"><a href="#P2664-树上游戏-题解" class="headerlink" title="P2664 树上游戏 题解"></a>P2664 树上游戏 题解</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P2664">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>分别考虑每种颜色，对于颜色$col$，将所有$c_u=col$的$u$删去就得到若干连通块，颜色$col$对$sum_v$的贡献是$n-num_v$，$num_v$为$v$所在连通块大小。特别地，我们令$c_u=col$时$num_u=0$。</p>
<p>比较容易想到的是给每种颜色分别建立虚树计算贡献，时间复杂度为$O(n \log n)$。</p>
<p>但是这道题是有$O(n)$的做法滴。做法为两遍$dfs$，第一遍预处理出每个$col=c_{fa_u}$对应的$num_u$。$num_u$就是$siz_u$减去子树$u$中不经过其他颜色为$c_u$的节点直接与$u$连接的颜色为$c_u$的点的$siz$之和。$dfs$时顺便预处理出$col_i$表示根节点周围的颜色为$i$连通块大小。第二遍直接统计答案。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P2664.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P2664</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n, c[MAXN], son[MAXN], cnt[MAXN], col[MAXN], cur[MAXN];</span><br><span class="line"><span class="type">int</span> sum, len, siz[MAXN], num[MAXN], ans[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp = cur[c[u]];</span><br><span class="line">    siz[u] = <span class="number">1</span>;</span><br><span class="line">    cur[c[u]] = u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == f)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        son[u] = v;</span><br><span class="line">        <span class="built_in">dfs1</span>(v, u);</span><br><span class="line">        siz[u] += siz[v];</span><br><span class="line">    &#125;</span><br><span class="line">    cur[c[u]] = tmp;</span><br><span class="line">    num[u] += siz[u];</span><br><span class="line">    <span class="keyword">if</span> (son[cur[c[u]]])</span><br><span class="line">        num[son[cur[c[u]]]] -= siz[u];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        col[c[u]] -= siz[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (son[cur[c[u]]])</span><br><span class="line">        sum -= num[son[cur[c[u]]]];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        sum -= col[c[u]];</span><br><span class="line">    sum += num[u];</span><br><span class="line">    ans[u] = n * len - sum;</span><br><span class="line">    <span class="type">int</span> tmp = cur[c[u]];</span><br><span class="line">    cur[c[u]] = u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == f)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        son[u] = v;</span><br><span class="line">        <span class="built_in">dfs2</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    cur[c[u]] = tmp;</span><br><span class="line">    sum -= num[u];</span><br><span class="line">    <span class="keyword">if</span> (son[cur[c[u]]])</span><br><span class="line">        sum += num[son[cur[c[u]]]];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        sum += col[c[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(c[i]), ++cnt[c[i]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; MAXN; ++i)</span><br><span class="line">        <span class="keyword">if</span> (cnt[i])</span><br><span class="line">            ++len, col[i] = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v);</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; MAXN; ++i)</span><br><span class="line">        sum += col[i];</span><br><span class="line">    num[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">write</span>(ans[i]), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1096G Lucky Tickets 题解</title>
    <url>/2021/12/08/sol-cf1096g/</url>
    <content><![CDATA[<h2 id="CF1096G-Lucky-Tickets-题解"><a href="#CF1096G-Lucky-Tickets-题解" class="headerlink" title="CF1096G Lucky Tickets 题解"></a>CF1096G Lucky Tickets 题解</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/CF1096G">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p><del>第一次这么轻松地做计数题</del></p>
<p>有了<a href="/2021/12/05/sol-cf632e/" title="CF632E">CF632E</a>的经验，这题$10$秒以内就能切。</p>
<p>先构造生成函数$f(x) = \sum\limits_{i \in K}{x^i}$，取其中$\frac{n}{2}$个数字的和相当于$f^\frac{n}{2}(x)$。$NTT$计算即可，答案很好统计。</p>
<p>$5$分钟就做掉了。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           CF1096G.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/CF1096G</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1</span> &lt;&lt; <span class="number">21</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> G0 = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> n, k, f[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x % MOD)</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            ret = ret * x % MOD;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> *f, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> rev[MAXN];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = rev[<span class="number">0</span>] = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">            rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">            <span class="built_in">swap</span>(f[i], f[rev[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(<span class="type">int</span> *f, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">change</span>(f, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> gn = <span class="built_in">qpow</span>(G0, (MOD - <span class="number">1</span>) / h);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">            <span class="type">int</span> g = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; j + h / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                <span class="type">int</span> u = f[k], t = g * f[k + h / <span class="number">2</span>] % MOD;</span><br><span class="line">                f[k] = (u + t + MOD) % MOD;</span><br><span class="line">                f[k + h / <span class="number">2</span>] = (u - t + MOD) % MOD;</span><br><span class="line">                g = g * gn % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">reverse</span>(f + <span class="number">1</span>, f + len);</span><br><span class="line">        <span class="type">int</span> inv = <span class="built_in">qpow</span>(len, MOD - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            f[i] = f[i] * inv % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n) /= <span class="number">2</span>, <span class="built_in">read</span>(k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= k; ++i)</span><br><span class="line">        <span class="built_in">read</span>(x), f[x] = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (len &lt;= n * <span class="number">9</span>)</span><br><span class="line">        len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">ntt</span>(f, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        f[i] = <span class="built_in">qpow</span>(f[i], n);</span><br><span class="line">    <span class="built_in">ntt</span>(f, len, <span class="number">-1</span>);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        (ans += f[i] * f[i]) %= MOD;</span><br><span class="line">    <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>AT2064 Many Easy Problems 题解</title>
    <url>/2021/12/06/sol-at2064/</url>
    <content><![CDATA[<h2 id="AT2064-Many-Easy-Problems-题解"><a href="#AT2064-Many-Easy-Problems-题解" class="headerlink" title="AT2064 Many Easy Problems 题解"></a>AT2064 Many Easy Problems 题解</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/AT2064">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>对于每个节点$u$，考虑其对$f(i)$的贡献。</p>
<p>正面的贡献不好计算，考虑用总方案数减去不经过$u$的数量，则</p>
<script type="math/tex; mode=display">
\begin{aligned}
f(i) &= \sum\limits_{u=1}^{n}{\left(\binom{n}{i} - \binom{n-siz_u}{i} - \sum\limits_{v \in son_u}{\binom{siz_v}{i}}\right)} \\
&= n\binom{n}{i} - \sum\limits_{u=1}^{n}{\left(\binom{n-siz_u}{i} + \sum\limits_{v \in son_u}{\binom{siz_v}{i}}\right)}
\end{aligned}</script><p>设$cnt_i$表示子树大小为$i$的节点数量。为了便于之后的计算，我们将不在节点$u$子树中的节点定义为一棵新的子树并加入$son_u$。形式化地，即对于每个节点$u\neq 1$，将$n-siz_u$加入$cnt$数组中。式子简化如下：</p>
<script type="math/tex; mode=display">
\begin{aligned}
f(i) &= n\binom{n}{i} - \sum\limits_{u=1}^{n}{\sum\limits_{v \in son_u}{\binom{siz_v}{i}}} \\
&= n\binom{n}{i} - \sum\limits_{j=i}^{n}{cnt_j \cdot \binom{j}{i}}
\end{aligned}</script><p>展开组合数得到</p>
<script type="math/tex; mode=display">
\begin{aligned}
f(i) &= n\binom{n}{i} - \sum\limits_{j=i}^{n}{cnt_j \cdot \binom{j}{i}} \\
&= n\binom{n}{i} - \sum\limits_{j=i}^{n}{\frac{cnt_j \cdot j!}{i! (j - i)!}} \\
&= n\binom{n}{i} - \frac{1}{i!}\sum\limits_{j=i}^{n}{\frac{cnt_j \cdot j!}{(j - i)!}}
\end{aligned}</script><p>由于后面的求和符号中既有$j$又有$i-j$，想办法将其化为卷积的形式。</p>
<script type="math/tex; mode=display">
\begin{aligned}
f(i) &= n\binom{n}{i} - \frac{1}{i!}\sum\limits_{j=i}^{n}{\frac{cnt_j \cdot j!}{(j - i)!}} \\
&= n\binom{n}{i} - \frac{1}{i!}\sum\limits_{j=0}^{n-i}{\frac{cnt_{n - j} \cdot (n - j)!}{(n - i - j)!}}
\end{aligned}</script><p>所以令$F<em>j = cnt</em>{n - j} \cdot (n - j)!$，$G_j = \frac{1}{j!}$，最终式子成了</p>
<script type="math/tex; mode=display">
f(i) = n\binom{n}{i} - \frac{1}{i!}\sum\limits_{j=0}^{n-i}{F_j \cdot G_{n - i - j}}</script><p>使用$NTT$优化即可。注意$924844033$的原根是$5$而不是$3$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           AT2064.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/AT2064</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">924844033</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> G0 = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">namespace</span> maths &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x % MOD)</span><br><span class="line">            <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">                ret = ret * x % MOD;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> *f, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> rev[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = rev[<span class="number">0</span>] = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">                rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">                <span class="built_in">swap</span>(f[i], f[rev[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(<span class="type">int</span> *f, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">change</span>(f, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> gn = <span class="built_in">qpow</span>(G0, (MOD - <span class="number">1</span>) / h);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">                <span class="type">int</span> g = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; j + h / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                    <span class="type">int</span> u = f[k], t = g * f[k + h / <span class="number">2</span>] % MOD;</span><br><span class="line">                    f[k] = (u + t + MOD) % MOD;</span><br><span class="line">                    f[k + h / <span class="number">2</span>] = (u - t + MOD) % MOD;</span><br><span class="line">                    g = g * gn % MOD;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">reverse</span>(f + <span class="number">1</span>, f + len);</span><br><span class="line">            <span class="type">int</span> inv = <span class="built_in">qpow</span>(len, MOD - <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">                f[i] = f[i] * inv % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n, fa[MAXN], siz[MAXN], cnt[MAXN], ans[MAXN];</span><br><span class="line"><span class="type">int</span> fac[MAXN], inv[MAXN], f[MAXN], g[MAXN], res[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; tr[MAXN];</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> maths;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    fa[u] = f, siz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : tr[u])</span><br><span class="line">        <span class="keyword">if</span> (v != f)</span><br><span class="line">            <span class="built_in">build</span>(v, u), siz[u] += siz[v];</span><br><span class="line">    ++cnt[siz[u]], ++cnt[n - siz[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = fac[<span class="number">0</span>] = <span class="number">1</span>; i &lt; MAXN; ++i)</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * i % MOD;</span><br><span class="line">    inv[MAXN - <span class="number">1</span>] = <span class="built_in">qpow</span>(fac[MAXN - <span class="number">1</span>], MOD - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = MAXN - <span class="number">2</span>; ~i; --i)</span><br><span class="line">        inv[i] = inv[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binom</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fac[x] * inv[y] % MOD * inv[x - y] % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v);</span><br><span class="line">        tr[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        tr[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>), cnt[<span class="number">0</span>] = cnt[n] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// ##sb-mistakes## 这个故事告诉我们FFT/NTT做卷积一定要开两倍长度</span></span><br><span class="line">    <span class="comment">// while (len &lt;= n)</span></span><br><span class="line">    <span class="keyword">while</span> (len &lt;= n + n)</span><br><span class="line">        len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">        f[i] = cnt[n - i] * fac[n - i] % MOD;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">        g[i] = inv[i];</span><br><span class="line">    <span class="built_in">ntt</span>(f, len, <span class="number">1</span>), <span class="built_in">ntt</span>(g, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        res[i] = f[i] * g[i] % MOD;</span><br><span class="line">    <span class="built_in">ntt</span>(res, len, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ans[i] = (n * <span class="built_in">binom</span>(n, i) % MOD - inv[i] * res[n - i] % MOD + MOD) % MOD;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">write</span>(ans[i]), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4245 【模版】任意模数多项式乘法</title>
    <url>/2021/12/05/sol-p4245/</url>
    <content><![CDATA[<h2 id="P4245-【模版】任意模数多项式乘法"><a href="#P4245-【模版】任意模数多项式乘法" class="headerlink" title="P4245 【模版】任意模数多项式乘法"></a>P4245 【模版】任意模数多项式乘法</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4245">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>对于任意模数的多项式乘法显然无法直接套用$NTT$。而由于数量级过大，采用<code>std::complex&lt;long double&gt;</code>的$FFT$也会产生比较多的精度丢失。</p>
<h4 id="方法1-NTT-合并"><a href="#方法1-NTT-合并" class="headerlink" title="方法1: $NTT$合并"></a>方法1: $NTT$合并</h4><p>由于$a_i,b_i \le 10^9$且$n \le 10^5$，所以答案的数量级不超过$10^9 \times 10^9 \times 10^5 = 10^{23}$，这样就可以找$3$个$10^8$左右的模数分别用$NTT$算出对其取模的答案，用中国剩余定理合并。</p>
<p>这里比较常用的$3$个模数分别是</p>
<script type="math/tex; mode=display">
\begin{aligned}
p_1 &= 998244353 = 7 \times 17 \times 2^{23} + 1, &g &= 3 \\
p_2 &= 1004535809 = 479 \times 2^{21} + 1, &g &= 3 \\
p_3 &= 469762049 = 7 \times 2^{26} + 1, &g &= 3
\end{aligned}</script><p>下面假设我们求出了对这$3$个模数的答案分别为$x_1,x_2,x_3$，得到同余方程如下：</p>
<script type="math/tex; mode=display">
\begin{cases}
x \equiv x_1 \pmod{p_1} \\
x \equiv x_2 \pmod{p_2} \\
x \equiv x_3 \pmod{p_3} \\
\end{cases}</script><p>由于乘积过大无法用<code>long long</code>储存，所以正常的$CRT$不能在此使用（当然如果你写高精度就当我没说），于是考虑手动合并。先把前两个合并：</p>
<script type="math/tex; mode=display">
\begin{aligned}
x_1 + k_1 p_1 &= x_2 + k_2 p_2 \\
x_1 + k_1 p_1 &\equiv x_2 &\pmod{p_2} \\
k_1 &\equiv \frac{x_2 - x_1}{p_1} &\pmod{p_2} \\
\end{aligned}</script><p>这样便求出了$k_1$，同时得到新的方程$x \equiv x_1 + k_1 p_1 \pmod{p_1 p_2}$。记$x_4  = x_1 + k_1 p_1$。</p>
<script type="math/tex; mode=display">
\begin{aligned}
x_4 + k_4 p_1 p_2 &= x_3 + k_3 p_3 \\
x_4 + k_4 p_1 p_2 &\equiv x_3 &\pmod{p_3} \\
k_4 &\equiv \frac{x_3 - x_4}{p_1 p_2} &\pmod{p_3} \\
\end{aligned}</script><p>求出$k_4$后，得到$x \equiv x_4 + k_4 p_1 p_2 \pmod{p_3}$。由于$x \lt p_1 p_2 p_3$，所以$x = x_4 + k_4 p_1 p_2$。</p>
<p>共需要跑$3 \times 3 = 9$次$NTT$，常数较大。</p>
<h4 id="方法2-拆系数-FFT"><a href="#方法2-拆系数-FFT" class="headerlink" title="方法2: 拆系数$FFT$"></a>方法2: 拆系数$FFT$</h4><p>把一个数拆分成$a \times 2^{15} + b$的形式，则$a, b \lt 2^{15}$</p>
<p>将$a$和$b$分别做多项式，相乘的值域是$2^{15} \times 2^{15} \times 10^5 \approx 10^{14}$，可以接受。于是</p>
<script type="math/tex; mode=display">
\begin{aligned}
c_1 \times c_2 &= (a_1 \times 2^{15} + b_1) \times (a_2 \times 2^{15} + b_2) \\
&= a_1 a_2 \times 2^{30} + (a_1 b_2 + a_2 b_1) \times 2^{15} + b_1 b_2
\end{aligned}</script><p>乍一看好像需要算$4$次乘法，共$12$次$FFT$，那岂不是比方法1更劣？</p>
<p>开始推式子吧。假设有$4$个多项式$A_1,A_2,B_1,B_2$，如何求他们的两两乘积。</p>
<p>由于$(a+bi) \times (c+di) = (ac-bd) + (ad+bc)i$，所以我们设复多项式$P = A_1 + iB_1$，$Q = A_2 + iB_2$（这是哪位神仙想出来的啊），而$FFT$本身就是使用复数计算所以直接传入复数也没关系。</p>
<p>设$T_1 = P \times Q = A_1 A_2 - B_1 B_2 + (A_1 B_2 + A_2 B_1)i$，</p>
<p>又设$P’ = A_1 - iB_1$，</p>
<p>那$T_2 = P’ \times Q = A_1 A_2 + B_1 B_2 + (A_1 B_2 - A_2 B_1)i$，</p>
<p>两者$T_1$和$T_2$进行和差就得到了多项式的两两乘积（妙啊）。</p>
<p>总的$FFT$次数为$3$次DFT$+2$次IDFT$=5$次。</p>
<p>突然发现值域其实应该是$10^{19}$而不是$10^{14}$，因为$IDFT$之前还得除以$n$……</p>
<p>看数据强度跑吧，代码倒是挺好写的。</p>
<p><strong>计算$\pi$不要用常量<code>M_PI</code>而是要用<code>acos(-1)</code>!!!!不然这题丢失精度只能过前$10$个点!!!!</strong></p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4245.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4245</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> comp = complex&lt;<span class="type">long</span> <span class="type">double</span>&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">double</span> MPI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="comment">// 对应方法1</span></span><br><span class="line"><span class="keyword">namespace</span> solve1 &#123;</span><br><span class="line">    <span class="type">int</span> mod;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> mod)</span> </span>&#123;</span><br><span class="line">        solve1::mod = mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">qmul</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> p = mod)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = (x + x) % p)</span><br><span class="line">            <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">                ret = (ret + x) % p;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> p = mod)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">qmul</span>(x, x, p))</span><br><span class="line">            <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">                ret = <span class="built_in">qmul</span>(ret, x, p);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> *f, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> rev[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = rev[<span class="number">0</span>] = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">                rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">                <span class="built_in">swap</span>(f[i], f[rev[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(<span class="type">int</span> *f, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">change</span>(f, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (mod - <span class="number">1</span>) / h);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">                <span class="type">int</span> g = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; j + h / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                    <span class="type">int</span> u = f[k], t = g * f[k + h / <span class="number">2</span>] % mod;</span><br><span class="line">                    f[k] = (u + t + mod) % mod;</span><br><span class="line">                    f[k + h / <span class="number">2</span>] = (u - t + mod) % mod;</span><br><span class="line">                    g = g * gn % mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">reverse</span>(f + <span class="number">1</span>, f + len);</span><br><span class="line">            <span class="type">int</span> inv = <span class="built_in">qpow</span>(len, mod - <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">                f[i] = f[i] * inv % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> MODS[<span class="number">3</span>] = &#123;<span class="number">998244353</span>, <span class="number">1004535809</span>, <span class="number">469762049</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> INV1 = <span class="built_in">qpow</span>(MODS[<span class="number">0</span>], MODS[<span class="number">1</span>] - <span class="number">2</span>, MODS[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> INV2 = <span class="built_in">qpow</span>(MODS[<span class="number">0</span>] * MODS[<span class="number">1</span>] % MODS[<span class="number">2</span>], MODS[<span class="number">2</span>] - <span class="number">2</span>, MODS[<span class="number">2</span>]);</span><br><span class="line">    <span class="type">int</span> n, m, p, a[<span class="number">3</span>][MAXN], b[<span class="number">3</span>][MAXN], ans[<span class="number">3</span>][MAXN];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">crt</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> t = (a2 - a1 + MODS[<span class="number">1</span>]) % MODS[<span class="number">1</span>] * INV1 % MODS[<span class="number">1</span>] * MODS[<span class="number">0</span>] + a1;</span><br><span class="line">        <span class="keyword">return</span> ((a3 - t % MODS[<span class="number">2</span>] + MODS[<span class="number">2</span>]) % MODS[<span class="number">2</span>] * INV2 % MODS[<span class="number">2</span>] * (MODS[<span class="number">0</span>] * MODS[<span class="number">1</span>] % p) % p + t) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">read</span>(n), <span class="built_in">read</span>(m), <span class="built_in">read</span>(p);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, x; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">read</span>(x) %= p, a[<span class="number">0</span>][i] = a[<span class="number">1</span>][i] = a[<span class="number">2</span>][i] = x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, x; i &lt;= m; ++i)</span><br><span class="line">            <span class="built_in">read</span>(x) %= p, b[<span class="number">0</span>][i] = b[<span class="number">1</span>][i] = b[<span class="number">2</span>][i] = x;</span><br><span class="line">        <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (len &lt; n + m + <span class="number">1</span>)</span><br><span class="line">            len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>; ++k) &#123;</span><br><span class="line">            <span class="built_in">init</span>(MODS[k]);</span><br><span class="line">            <span class="built_in">ntt</span>(a[k], len, <span class="number">1</span>), <span class="built_in">ntt</span>(b[k], len, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">                ans[k][i] = a[k][i] * b[k][i] % mod;</span><br><span class="line">            <span class="built_in">ntt</span>(ans[k], len, <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + m; ++i)</span><br><span class="line">            <span class="built_in">write</span>(<span class="built_in">crt</span>(ans[<span class="number">0</span>][i], ans[<span class="number">1</span>][i], ans[<span class="number">2</span>][i])), <span class="built_in">putchar</span>(<span class="string">&quot; \n&quot;</span>[i == n + m]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对应方法2</span></span><br><span class="line"><span class="keyword">namespace</span> solve2 &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(comp *f, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> rev[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = rev[<span class="number">0</span>] = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">                rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">                <span class="built_in">swap</span>(f[i], f[rev[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fft</span><span class="params">(comp *f, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">change</span>(f, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="function">comp <span class="title">wn</span><span class="params">(cos(<span class="number">2</span> * MPI / h), sin(<span class="number">2</span> * MPI / h))</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">                <span class="function">comp <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; j + h / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                    comp u = f[k], t = w * f[k + h / <span class="number">2</span>];</span><br><span class="line">                    f[k] = u + t;</span><br><span class="line">                    f[k + h / <span class="number">2</span>] = u - t;</span><br><span class="line">                    w *= wn;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">reverse</span>(f + <span class="number">1</span>, f + len);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">                f[i] /= len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> BLOC = <span class="number">1</span> &lt;&lt; <span class="number">15</span>;</span><br><span class="line">    <span class="type">int</span> n, m, p, a[MAXN], b[MAXN], ans[MAXN];</span><br><span class="line">    comp p1[MAXN], p2[MAXN], q[MAXN], t1[MAXN], t2[MAXN];</span><br><span class="line">    <span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">read</span>(n), <span class="built_in">read</span>(m), <span class="built_in">read</span>(p);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">read</span>(a[i]) %= p;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            <span class="built_in">read</span>(b[i]) %= p;</span><br><span class="line">        <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (len &lt; n + m + <span class="number">1</span>)</span><br><span class="line">            len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            p1[i] = <span class="built_in">comp</span>(a[i] / BLOC, a[i] % BLOC);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            p2[i] = <span class="built_in">comp</span>(a[i] / BLOC, -a[i] % BLOC);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            q[i] = <span class="built_in">comp</span>(b[i] / BLOC, b[i] % BLOC);</span><br><span class="line">        <span class="built_in">fft</span>(p1, len, <span class="number">1</span>), <span class="built_in">fft</span>(p2, len, <span class="number">1</span>), <span class="built_in">fft</span>(q, len, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            t1[i] = p1[i] * q[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            t2[i] = p2[i] * q[i];</span><br><span class="line">        <span class="built_in">fft</span>(t1, len, <span class="number">-1</span>), <span class="built_in">fft</span>(t2, len, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> a1a2 = ((<span class="type">int</span>)((t1[i].<span class="built_in">real</span>() + t2[i].<span class="built_in">real</span>()) / <span class="number">2</span> + <span class="number">0.5</span>)) % p;</span><br><span class="line">            <span class="type">int</span> a1b2 = ((<span class="type">int</span>)((t2[i].<span class="built_in">imag</span>() + t1[i].<span class="built_in">imag</span>()) / <span class="number">2</span> + <span class="number">0.5</span>)) % p;</span><br><span class="line">            <span class="type">int</span> a2b1 = ((<span class="type">int</span>)((t1[i].<span class="built_in">imag</span>() - t2[i].<span class="built_in">imag</span>()) / <span class="number">2</span> + <span class="number">0.5</span>)) % p;</span><br><span class="line">            <span class="type">int</span> b1b2 = ((<span class="type">int</span>)((t2[i].<span class="built_in">real</span>() - t1[i].<span class="built_in">real</span>()) / <span class="number">2</span> + <span class="number">0.5</span>)) % p;</span><br><span class="line">            ans[i] = (a1a2 * (<span class="number">1ll</span> &lt;&lt; <span class="number">30</span>) % p + (a1b2 + a2b1) * (<span class="number">1ll</span> &lt;&lt; <span class="number">15</span>) % p + b1b2) % p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + m; ++i)</span><br><span class="line">            <span class="built_in">write</span>(ans[i]), <span class="built_in">putchar</span>(<span class="string">&quot; \n&quot;</span>[i == n + m]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// return solve1::main();</span></span><br><span class="line">    <span class="keyword">return</span> solve2::<span class="built_in">main</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>CF632E Thief in a Shop 题解</title>
    <url>/2021/12/05/sol-cf632e/</url>
    <content><![CDATA[<h2 id="CF632E-Thief-in-a-Shop-题解"><a href="#CF632E-Thief-in-a-Shop-题解" class="headerlink" title="CF632E Thief in a Shop 题解"></a>CF632E Thief in a Shop 题解</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/CF632E">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p><del>其实这题可以直接暴力做的</del></p>
<p>还是学习一下<a href="https://oi-wiki.org/math/gen-func/ogf/">生成函数</a>吧。</p>
<p>对于所有物品构造生成函数$f(x) = \sum\limits_{i\in S}{x^i}$</p>
<p>取出$k$个物品相当于$f^k(x)$。</p>
<p>但是题解里说模数$998244353$和$1004535809$都被卡了，所以可以选择使用双模数防止被$hack$。</p>
<p>时间复杂度$O(N \log N)$，其中$N$是$10^6$级别的。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           CF632E.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/CF632E</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">namespace</span> maths &#123;</span><br><span class="line">    <span class="type">int</span> mod;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> mod)</span> </span>&#123;</span><br><span class="line">        maths::mod = mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x % mod)</span><br><span class="line">            <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">                ret = ret * x % mod;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> *f, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> rev[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = rev[<span class="number">0</span>] = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">                rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">                <span class="built_in">swap</span>(f[i], f[rev[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(<span class="type">int</span> *f, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">change</span>(f, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (mod - <span class="number">1</span>) / h);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">                <span class="type">int</span> g = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; j + h / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                    <span class="type">int</span> u = f[k], t = g * f[k + h / <span class="number">2</span>] % mod;</span><br><span class="line">                    f[k] = (u + t + mod) % mod;</span><br><span class="line">                    f[k + h / <span class="number">2</span>] = (u - t + mod) % mod;</span><br><span class="line">                    g = g * gn % mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">reverse</span>(f + <span class="number">1</span>, f + len);</span><br><span class="line">            <span class="type">int</span> inv = <span class="built_in">qpow</span>(len, mod - <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">                f[i] = f[i] * inv % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n, k, cnt, a[MAXN], b[MAXN], answ[MAXN];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">read</span>(x);</span><br><span class="line">        a[x] = b[x] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line">    maths::<span class="built_in">init</span>(<span class="number">998244353</span>);</span><br><span class="line">    maths::<span class="built_in">ntt</span>(a, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        a[i] = maths::<span class="built_in">qpow</span>(a[i], k);</span><br><span class="line">    maths::<span class="built_in">ntt</span>(a, len, <span class="number">-1</span>);</span><br><span class="line">    maths::<span class="built_in">init</span>(<span class="number">1004535809</span>);</span><br><span class="line">    maths::<span class="built_in">ntt</span>(b, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        b[i] = maths::<span class="built_in">qpow</span>(b[i], k);</span><br><span class="line">    maths::<span class="built_in">ntt</span>(b, len, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">        <span class="keyword">if</span> (a[i] || b[i])</span><br><span class="line">            answ[++cnt] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line">        <span class="built_in">write</span>(answ[i]), <span class="built_in">putchar</span>(<span class="string">&quot; \n&quot;</span>[i == cnt]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4721 【模版】分治FFT 题解</title>
    <url>/2021/12/05/sol-p4721/</url>
    <content><![CDATA[<h2 id="P4721-【模版】分治FFT-题解"><a href="#P4721-【模版】分治FFT-题解" class="headerlink" title="P4721 【模版】分治FFT 题解"></a>P4721 【模版】分治FFT 题解</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4721">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>由于$f_i$依赖于$f_j(1\le j\lt i)$，所以考虑分治计算，每次先计算左半段，将贡献加到右半段后继续递归计算右半段。</p>
<p>思考如何计算贡献。发现题目中$f<em>i=\sum\limits</em>{j=1}^{i}{f_{i-j}g_j}$的方式很像多项式乘法，区间$[l,mid]$对$f_i(mid \lt i \le r)$的贡献就是$F(x) = f(x) \times g(x)$的$F(i)$，用$NTT$进行计算即可。</p>
<p>时间复杂度$O(n \log^2 n)$（似乎比多项式求逆要慢不少）。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4721.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4721</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1</span> &lt;&lt; <span class="number">18</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> G0 = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">namespace</span> maths &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x % MOD)</span><br><span class="line">            <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">                ret = ret * x % MOD;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> *f, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> rev[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = rev[<span class="number">0</span>] = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">                rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">                <span class="built_in">swap</span>(f[i], f[rev[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(<span class="type">int</span> *f, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">change</span>(f, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> gn = <span class="built_in">qpow</span>(G0, (MOD - <span class="number">1</span>) / h);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">                <span class="type">int</span> g = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; j + h / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                    <span class="type">int</span> u = f[k], t = g * f[k + h / <span class="number">2</span>] % MOD;</span><br><span class="line">                    f[k] = (u + t + MOD) % MOD;</span><br><span class="line">                    f[k + h / <span class="number">2</span>] = (u - t + MOD) % MOD;</span><br><span class="line">                    g = g * gn % MOD;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">reverse</span>(f + <span class="number">1</span>, f + len);</span><br><span class="line">            <span class="type">int</span> inv = <span class="built_in">qpow</span>(len, MOD - <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">                f[i] = f[i] * inv % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> maths::ntt;</span><br><span class="line"><span class="type">int</span> n, a[MAXN], b[MAXN], f[MAXN], g[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> len = r - l + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">solve</span>(l, mid);</span><br><span class="line">    <span class="built_in">copy</span>(f + l, f + mid + <span class="number">1</span>, a);</span><br><span class="line">    <span class="built_in">copy</span>(g, g + len, b);</span><br><span class="line">    <span class="built_in">fill</span>(a + len / <span class="number">2</span>, a + len, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">ntt</span>(a, len, <span class="number">1</span>), <span class="built_in">ntt</span>(b, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        a[i] = a[i] * b[i] % MOD;</span><br><span class="line">    <span class="built_in">ntt</span>(a, len, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = mid + <span class="number">1</span>; i &lt;= r; ++i)</span><br><span class="line">        f[i] = (f[i] + a[i - l]) % MOD;</span><br><span class="line">    <span class="built_in">solve</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(g[i]);</span><br><span class="line">    <span class="type">int</span> len = f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (len &lt; n)</span><br><span class="line">        len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">solve</span>(<span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">write</span>(f[i]), <span class="built_in">putchar</span>(<span class="string">&quot; \n&quot;</span>[i == n - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4238 【模版】多项式求逆 题解</title>
    <url>/2021/12/05/sol-p4238/</url>
    <content><![CDATA[<h2 id="P4238-【模版】多项式求逆-题解"><a href="#P4238-【模版】多项式求逆-题解" class="headerlink" title="P4238 【模版】多项式求逆 题解"></a>P4238 【模版】多项式求逆 题解</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4238">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>假设我们要求</p>
<script type="math/tex; mode=display">f(x) \cdot g(x) \equiv 1 \pmod{x^n}</script><p>如果已经知道</p>
<script type="math/tex; mode=display">f(x) \cdot h(x) \equiv 1 \pmod{x^\frac{n}{2}}</script><p>那么相减可得</p>
<script type="math/tex; mode=display">f(x) \cdot (g(x) - h(x)) \equiv 0 \pmod{x^\frac{n}{2}}</script><script type="math/tex; mode=display">g(x) - h(x) \equiv 0 \pmod{x^\frac{n}{2}}</script><p>两边同时平方得到</p>
<script type="math/tex; mode=display">g^2(x) - 2 \cdot g(x) \cdot h(x) + h^2(x) \equiv 0 \pmod{x^n}</script><p>乘上$f(x)$得到</p>
<script type="math/tex; mode=display">g(x) - 2 \cdot h(x) + f(x) \cdot h^2(x) \equiv 0 \pmod{x^n}</script><p>移项得到</p>
<script type="math/tex; mode=display">g(x) \equiv h(x) \cdot (2 - f(x) \cdot h(x)) \pmod{x^n}</script><p>递归计算即可。</p>
<p>时间复杂度</p>
<script type="math/tex; mode=display">T(n) = T\left(\frac{n}{2}\right) + O(n \log n) = O(n \log n)</script><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4238.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4238</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1</span> &lt;&lt; <span class="number">18</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">namespace</span> maths &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x % MOD)</span><br><span class="line">            <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">                ret = ret * x % MOD;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> *f, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> rev[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = rev[<span class="number">0</span>] = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">                rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">                <span class="built_in">swap</span>(f[i], f[rev[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(<span class="type">int</span> *f, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">change</span>(f, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (MOD - <span class="number">1</span>) / h);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">                <span class="type">int</span> g = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; j + h / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                    <span class="type">int</span> u = f[k], t = g * f[k + h / <span class="number">2</span>] % MOD;</span><br><span class="line">                    f[k] = (u + t + MOD) % MOD;</span><br><span class="line">                    f[k + h / <span class="number">2</span>] = (u - t + MOD) % MOD;</span><br><span class="line">                    g = g * gn % MOD;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">reverse</span>(f + <span class="number">1</span>, f + len);</span><br><span class="line">            <span class="type">int</span> inv = <span class="built_in">qpow</span>(len, MOD - <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">                f[i] = f[i] * inv % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">polyinv</span><span class="params">(<span class="type">int</span> *f, <span class="type">int</span> len, <span class="type">int</span> *g)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> tmp[MAXN];</span><br><span class="line">        <span class="built_in">fill</span>(tmp, tmp + len + len, <span class="number">0</span>);</span><br><span class="line">        g[<span class="number">0</span>] = <span class="built_in">qpow</span>(f[<span class="number">0</span>], MOD - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">2</span>; t &lt;= len; t &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">copy</span>(f, f + t, tmp);</span><br><span class="line">            <span class="built_in">fill</span>(tmp + t, tmp + t + t, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">ntt</span>(g, t + t, <span class="number">1</span>), <span class="built_in">ntt</span>(tmp, t + t, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; t + t; ++i)</span><br><span class="line">                g[i] = g[i] * (<span class="number">2</span> - tmp[i] * g[i] % MOD + MOD) % MOD;</span><br><span class="line">            <span class="built_in">ntt</span>(g, t + t, <span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">fill</span>(g + t, g + t + t, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> maths;</span><br><span class="line"><span class="type">int</span> n, f[MAXN], g[MAXN];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(f[i]);</span><br><span class="line">    <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (len &lt; n)</span><br><span class="line">        len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">polyinv</span>(f, len, g);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">write</span>(g[i]), <span class="built_in">putchar</span>(<span class="string">&quot; \n&quot;</span>[i == n - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>CF526G Spiders Evil Plan 题解</title>
    <url>/2021/12/04/sol-cf526g/</url>
    <content><![CDATA[<h2 id="CF526G-Spiders-Evil-Plan-题解"><a href="#CF526G-Spiders-Evil-Plan-题解" class="headerlink" title="CF526G Spiders Evil Plan 题解"></a>CF526G Spiders Evil Plan 题解</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/CF526G">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>有意思，很有意思。</p>
<p>首先我们暂时忽略路径必须经过$x$的限制进行思考。容易想到最长的一条路径是树的直径，且其他路径都是一个叶子到另一个叶子的类型，接着发现如果路径必须经过$x$也需要保证最长路径经过直径的其中一个端点（显然最优）。于是想到以直径两个端点为根分别建一棵树，分别求根经过$x$到一个叶子结点的最长路径后$\max$，可通过$y=1$。</p>
<p>将每条路径拆分为$2$个叶子结点的路径。如果无需经过节点$x$，那么除去到根的路径之外还需要取出$2y-1$个叶子结点路径。然后需要用到一个<strong>长链剖分</strong>小$trick$（也是这题最妙的地方），对于每条长链，定义其带权长度为<strong>链头的父节点到链尾的距离</strong>，即<code>sdep[u] - sdep[fa[top[u]]]</code>，可以证明<strong>更长的链一定会比更短的链先被取到，且贡献即为链的带权长度</strong>。于是取出树上的所有长链并从大到小排序，取得前$2y-1$个带权长度之和即为不经过$x$的$y$个最长路径长度之和。</p>
<p><img src="sol-cf526g-tree1.png" alt=""></p>
<p>如图所示的一棵树，黑色边为其直径，将其<strong>按边权</strong>长链剖分后得到几条链，显然要先取黑色链，再按顺序取蓝色、粉色和橙色链，而每加入一条链后对答案的贡献就是链的带权长度。</p>
<p>现在考虑必须经过$x$的取法。分为两种情况，若前$2y-1$条链经过$x$直接取前缀和计算（至于如何判断可使用树上$dp$维护子树内叶子节点所在链的最靠前排名）。否则我们要找到第$1$到$2y-1$中的一条链（假定为$k$），将其移除并加入经过$x$的最长链。</p>
<p>查找并删除一条链时，仍可以分两种情况。若第$k$条链的$top_k$不是$x$的祖先，则其删除的代价为$len_k$，显然$k=2y-1$时最优。另一种$top_k$为$x$的祖先，从$u$往上倍增找到第一条$k\le 2y-1$的链，其叶子结点与$x$的$lca$为$s$，删除的代价为$sdep_k - dep_s$，二者取$\min$即可。</p>
<p>时间复杂度$O((n+q)\log n)$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           CF526G.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/CF526G</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LOGN = <span class="number">18</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">edges</span> &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">    &#125; edge[MAXM];</span><br><span class="line">    <span class="type">int</span> n, rt, head[MAXN], nxt[MAXM], tot;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(<span class="type">int</span> _n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = _n;</span><br><span class="line">        rt = tot = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="built_in">sizeof</span>(head));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">        edge[tot] = &#123;u, v, w&#125;;</span><br><span class="line">        nxt[tot] = head[u];</span><br><span class="line">        head[u] = tot++; </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="type">int</span> dis[MAXN], pre[MAXN];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxdis</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">        dis[u] = d, pre[u] = u;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; ~i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v, w = edge[i].w;</span><br><span class="line">            <span class="keyword">if</span> (v != f &amp;&amp; dis[<span class="built_in">maxdis</span>(v, u, d + w)] &gt; dis[pre[u]])</span><br><span class="line">                pre[u] = pre[v];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre[u];</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="type">int</span> dfc, sfa[MAXN], dfn[MAXN], len[MAXN], wson[MAXN];</span><br><span class="line">    <span class="type">int</span> dep[MAXN], sdep[MAXN], fa[MAXN][LOGN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">        len[u] = wson[u] = <span class="number">0</span>, fa[u][<span class="number">0</span>] = f;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; LOGN; ++i)</span><br><span class="line">            fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; ~i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v, w = edge[i].w;</span><br><span class="line">            <span class="keyword">if</span> (v != f) &#123;</span><br><span class="line">                dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">                sdep[v] = sdep[u] + w;</span><br><span class="line">                <span class="built_in">build1</span>(v, u);</span><br><span class="line">                <span class="keyword">if</span> (len[v] + w &gt; len[u])</span><br><span class="line">                    len[u] = len[v] + w, wson[u] = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> sf)</span> </span>&#123;</span><br><span class="line">        sfa[u] = sf, dfn[u] = ++dfc;</span><br><span class="line">        <span class="keyword">if</span> (wson[u])</span><br><span class="line">            <span class="built_in">build2</span>(wson[u], sf);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; ~i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (v != fa[u][<span class="number">0</span>] &amp;&amp; v != wson[u])</span><br><span class="line">                <span class="built_in">build2</span>(v, v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="type">int</span> dp[MAXN], rnk[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">        dp[u] = rnk[u] ? rnk[u] : INFL;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; ~i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span> (v != f) &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(v, u);</span><br><span class="line">                dp[u] = <span class="built_in">min</span>(dp[u], dp[v]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getlca</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = LOGN - <span class="number">1</span>; ~i; --i)</span><br><span class="line">            <span class="keyword">if</span> (dp[fa[u][i]] &gt; k)</span><br><span class="line">                u = fa[u][i];</span><br><span class="line">        <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="type">int</span> lef, id[MAXN], sum[MAXN * <span class="number">2</span>];</span><br><span class="line">    pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; leaf[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> _rt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;rt = _rt, lef = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">build1</span>(rt, <span class="number">0</span>), <span class="built_in">build2</span>(rt, rt);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!wson[i])</span><br><span class="line">                leaf[++lef] = &#123;sdep[i] - sdep[fa[sfa[i]][<span class="number">0</span>]], i&#125;;</span><br><span class="line">        <span class="built_in">sort</span>(leaf + <span class="number">1</span>, leaf + lef + <span class="number">1</span>, greater&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lef; ++i)</span><br><span class="line">            rnk[leaf[i].second] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lef; ++i)</span><br><span class="line">            id[i] = leaf[i].second;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            sum[i] = sum[i - <span class="number">1</span>] + leaf[i].first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            sum[i + n] = sum[i + n - <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">dfs</span>(rt, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">2</span> * y - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (dp[x] &lt;= k)</span><br><span class="line">            <span class="keyword">return</span> sum[k];</span><br><span class="line">        <span class="type">int</span> s = <span class="built_in">getlca</span>(x, k);</span><br><span class="line">        <span class="keyword">return</span> sum[k] + sdep[id[dp[x]]] - sdep[s] - <span class="built_in">min</span>(leaf[k].first, sdep[id[dp[s]]] - sdep[s]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; tr1, tr2;</span><br><span class="line"><span class="type">int</span> n, q;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(q);</span><br><span class="line">    tr1.<span class="built_in">clear</span>(n), tr2.<span class="built_in">clear</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v), <span class="built_in">read</span>(w);</span><br><span class="line">        tr1.<span class="built_in">addedge</span>(u, v, w);</span><br><span class="line">        tr1.<span class="built_in">addedge</span>(v, u, w);</span><br><span class="line">        tr2.<span class="built_in">addedge</span>(u, v, w);</span><br><span class="line">        tr2.<span class="built_in">addedge</span>(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> rt1 = tr1.<span class="built_in">maxdis</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> rt2 = tr1.<span class="built_in">maxdis</span>(rt1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    tr1.<span class="built_in">init</span>(rt1), tr2.<span class="built_in">init</span>(rt2);</span><br><span class="line">    <span class="type">int</span> lastans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="built_in">read</span>(x), <span class="built_in">read</span>(y);</span><br><span class="line">        x = (x + lastans - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">        y = (y + lastans - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">        lastans = <span class="built_in">max</span>(tr1.<span class="built_in">solve</span>(x, y), tr2.<span class="built_in">solve</span>(x, y));</span><br><span class="line">        <span class="built_in">write</span>(lastans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>CF639F Bear and Chemistry 题解</title>
    <url>/2021/12/03/sol-cf639f/</url>
    <content><![CDATA[<h2 id="CF639F-Bear-and-Chemistry-题解"><a href="#CF639F-Bear-and-Chemistry-题解" class="headerlink" title="CF639F Bear and Chemistry 题解"></a>CF639F Bear and Chemistry 题解</h2><span id="more"></span>
<p>又一道黑</p>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/CF639F">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>思路很好想，预处理一遍边双缩点得到一棵树，询问建完虚树再一遍边双缩点跑出来$V$集合中的点是否全在一个边双中。</p>
<p>时间复杂度$O(n \log n)$，常数巨大。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><p>调了两天后发现是因为<del>tarjan退栈的时候把<code>ins</code>标记改成了<code>true</code></del></p>
<p><del>写题不注意，对拍两小时（关键还$^{TM}$没拍出错误？）</del></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           CF639F.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/CF639F</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LOGN = <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFL = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">bool</span> m_be;</span><br><span class="line"><span class="type">int</span> n, m, q, k, h, cnt, len, is[MAXN], iu[MAXN], iv[MAXN], s[MAXN], nd[MAXN];</span><br><span class="line"><span class="type">int</span> idn, top, rt[MAXN], id[MAXN], dep[MAXN], fa[MAXN][LOGN], sta[MAXN];</span><br><span class="line"><span class="type">int</span> dfc1, bcc1, top1, sta1[MAXN], sfa1[MAXN], dfn1[MAXN], low1[MAXN], col1[MAXN];</span><br><span class="line"><span class="type">int</span> dfc2, bcc2, top2, sta2[MAXN], sfa2[MAXN], dfn2[MAXN], low2[MAXN], col2[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[MAXN], tr[MAXN], vtr[MAXN];</span><br><span class="line"><span class="type">bool</span> ins1[MAXN], ins2[MAXN];</span><br><span class="line"><span class="type">bool</span> m_ed;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    sfa1[u] = f;</span><br><span class="line">    dfn1[u] = low1[u] = ++dfc1;</span><br><span class="line">    sta1[++top1] = u, ins1[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> cntf = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == f) &#123;</span><br><span class="line">            ++cntf;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!dfn1[v]) &#123;</span><br><span class="line">            <span class="built_in">tarjan1</span>(v, u);</span><br><span class="line">            low1[u] = <span class="built_in">min</span>(low1[u], low1[v]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ins1[v]) &#123;</span><br><span class="line">            low1[u] = <span class="built_in">min</span>(low1[u], dfn1[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (f &amp;&amp; cntf &gt; <span class="number">1</span>)</span><br><span class="line">        low1[u] = <span class="built_in">min</span>(low1[u], dfn1[f]);</span><br><span class="line">    <span class="keyword">if</span> (dfn1[u] == low1[u]) &#123;</span><br><span class="line">        ++bcc1;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">int</span> v = sta1[top1--];</span><br><span class="line">            ins1[v] = <span class="literal">false</span>;</span><br><span class="line">            col1[v] = bcc1;</span><br><span class="line">            <span class="keyword">if</span> (u == v)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    sfa2[u] = f;</span><br><span class="line">    dfn2[u] = low2[u] = ++dfc2;</span><br><span class="line">    sta2[++top2] = u, ins2[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> cntf = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : vtr[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == f) &#123;</span><br><span class="line">            ++cntf;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!dfn2[v]) &#123;</span><br><span class="line">            <span class="built_in">tarjan2</span>(v, u);</span><br><span class="line">            low2[u] = <span class="built_in">min</span>(low2[u], low2[v]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ins2[v]) &#123;</span><br><span class="line">            low2[u] = <span class="built_in">min</span>(low2[u], dfn2[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (f &amp;&amp; cntf &gt; <span class="number">1</span>)</span><br><span class="line">        low2[u] = <span class="built_in">min</span>(low2[u], dfn2[f]);</span><br><span class="line">    <span class="keyword">if</span> (dfn2[u] == low2[u]) &#123;</span><br><span class="line">        ++bcc2;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">int</span> v = sta2[top2--];</span><br><span class="line">            ins2[v] = <span class="literal">false</span>;</span><br><span class="line">            col2[v] = bcc2;</span><br><span class="line">            <span class="keyword">if</span> (u == v)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addvedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    vtr[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">    vtr[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    id[u] = ++idn, rt[u] = (f ? rt[f] : u);</span><br><span class="line">    dep[u] = dep[f] + <span class="number">1</span>, fa[u][<span class="number">0</span>] = f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; LOGN; ++i)</span><br><span class="line">        fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : tr[u])</span><br><span class="line">        <span class="keyword">if</span> (v != f)</span><br><span class="line">            <span class="built_in">build1</span>(v, u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v])</span><br><span class="line">        <span class="built_in">swap</span>(u, v);</span><br><span class="line">    <span class="type">int</span> t = dep[u] - dep[v];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = LOGN - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> ((t &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">            u = fa[u][i];</span><br><span class="line">    <span class="keyword">if</span> (u == v)</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = LOGN - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> (fa[u][i] != fa[v][i])</span><br><span class="line">            u = fa[u][i], v = fa[v][i];</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build2</span><span class="params">(<span class="type">int</span> rtx, <span class="type">int</span> cl)</span> </span>&#123;</span><br><span class="line">    sta[top = <span class="number">1</span>] = rtx, vtr[rtx].<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = cl; i &lt;= cnt &amp;&amp; rt[s[i]] == rtx; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == rtx)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">lca</span>(s[i], sta[top]);</span><br><span class="line">        <span class="keyword">while</span> (id[l] &lt;= id[sta[top - <span class="number">1</span>]])</span><br><span class="line">            <span class="built_in">addvedge</span>(sta[top - <span class="number">1</span>], sta[top]), --top;</span><br><span class="line">        <span class="keyword">if</span> (l != sta[top])</span><br><span class="line">            vtr[l].<span class="built_in">clear</span>(), <span class="built_in">addvedge</span>(l, sta[top]), sta[top] = nd[++len] = l;</span><br><span class="line">        vtr[s[i]].<span class="built_in">clear</span>(), sta[++top] = s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; top; ++i)</span><br><span class="line">        <span class="built_in">addvedge</span>(sta[i], sta[i + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m), <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v);</span><br><span class="line">        <span class="keyword">if</span> (u == v)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (!dfn1[i])</span><br><span class="line">            <span class="built_in">tarjan1</span>(i, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sfa1[i] &amp;&amp; col1[i] != col1[sfa1[i]]) &#123;</span><br><span class="line">            tr[col1[sfa1[i]]].<span class="built_in">push_back</span>(col1[i]);</span><br><span class="line">            tr[col1[i]].<span class="built_in">push_back</span>(col1[sfa1[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= bcc1; ++i)</span><br><span class="line">        <span class="keyword">if</span> (!id[i])</span><br><span class="line">            <span class="built_in">build1</span>(i, <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> rnd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> tt = <span class="number">1</span>; tt &lt;= q; ++tt) &#123;</span><br><span class="line">        <span class="type">bool</span> answ = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">read</span>(k), <span class="built_in">read</span>(h), cnt = bcc2 = dfc2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">            <span class="built_in">read</span>(is[i]), is[i] = (is[i] + rnd - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= h; ++i) &#123;</span><br><span class="line">            <span class="built_in">read</span>(iu[i]), iu[i] = (iu[i] + rnd - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">read</span>(iv[i]), iv[i] = (iv[i] + rnd - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">            s[++cnt] = col1[is[i]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= h; ++i)</span><br><span class="line">            s[++cnt] = col1[iu[i]], s[++cnt] = col1[iv[i]];</span><br><span class="line">        <span class="built_in">sort</span>(s + <span class="number">1</span>, s + cnt + <span class="number">1</span>, [](<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">            <span class="keyword">return</span> id[x] &lt; id[y];</span><br><span class="line">        &#125;);</span><br><span class="line">        len = cnt = <span class="built_in">unique</span>(s + <span class="number">1</span>, s + cnt + <span class="number">1</span>) - s - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">copy</span>(s + <span class="number">1</span>, s + cnt + <span class="number">1</span>, nd + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line">            <span class="keyword">if</span> (rt[s[i]] != rt[s[i - <span class="number">1</span>]])</span><br><span class="line">                <span class="built_in">build2</span>(rt[s[i]], i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= h; ++i)</span><br><span class="line">            <span class="keyword">if</span> (col1[iu[i]] != col1[iv[i]])</span><br><span class="line">                <span class="built_in">addvedge</span>(col1[iu[i]], col1[iv[i]]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">            dfn2[nd[i]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!dfn2[nd[i]])</span><br><span class="line">                <span class="built_in">tarjan2</span>(nd[i], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">            <span class="keyword">if</span> (col2[col1[is[i]]] != col2[col1[is[<span class="number">1</span>]]])</span><br><span class="line">                answ = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">puts</span>(answ ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>), (rnd += answ ? tt : <span class="number">0</span>) %= n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1320E Treeland and Viruses 题解</title>
    <url>/2021/12/01/sol-cf1320e/</url>
    <content><![CDATA[<h2 id="CF1320E-Treeland-and-Viruses-题解"><a href="#CF1320E-Treeland-and-Viruses-题解" class="headerlink" title="CF1320E Treeland and Viruses 题解"></a>CF1320E Treeland and Viruses 题解</h2><span id="more"></span>
<p><del>水黑</del></p>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/CF1320E">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>建虚树，跑$dijkstra$。</p>
<p><del>所以这题为什么能评黑</del></p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><p><strong><code>nd</code>数组别开小了，要开$4 \times 10^5$</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           CF1320E.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/CF1320E</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">4e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LOGN = <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFI = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">graph</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">edges</span> &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">    &#125; edge[MAXM];</span><br><span class="line">    <span class="type">int</span> head[MAXN], nxt[MAXM], tot;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="built_in">sizeof</span>(head));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        edge[tot] = &#123;u, v, w&#125;;</span><br><span class="line">        nxt[tot] = head[u];</span><br><span class="line">        head[u] = tot++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">distant</span> &#123;</span><br><span class="line">    <span class="type">int</span> id, fr, ve, dis; <span class="comment">// from, velocity, distance</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ##sb-mistakes## `(0 - 1) / x + 1 == 1`，要特判或者写成`(? + x - 1) / x`</span></span><br><span class="line">        <span class="keyword">return</span> (dis + ve - <span class="number">1</span>) / ve;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> distant &amp;o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="type">int</span> cx = <span class="built_in">calc</span>(), cy = o.<span class="built_in">calc</span>();</span><br><span class="line">        <span class="keyword">return</span> cx == cy ? id &lt; o.id : cx &lt; cy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> distant &amp;o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="type">int</span> cx = <span class="built_in">calc</span>(), cy = o.<span class="built_in">calc</span>();</span><br><span class="line">        <span class="keyword">return</span> cx == cy ? id &lt; o.id : cx &lt; cy;</span><br><span class="line">    &#125;</span><br><span class="line">    distant <span class="keyword">operator</span>+(<span class="type">int</span> x) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> distant&#123;id, fr, ve, dis + x&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, q, k, m, cnt, idn, id[MAXN], nd[MAXM];</span><br><span class="line"><span class="type">int</span> top, sta[MAXN], dep[MAXN], fa[MAXN][LOGN];</span><br><span class="line"><span class="type">int</span> iv[MAXN], iu[MAXN], is[MAXN];</span><br><span class="line"><span class="comment">// ##sb-mistakes## `std::priority_queue`默认是`std::less&lt;_Tp&gt;`，自定义类型要么按照`\gt`的逻辑重载`operator&lt;()`，要么按照`\gt`的逻辑重载`operator&gt;()`并且修改默认参数</span></span><br><span class="line">priority_queue&lt;pair&lt;distant, <span class="type">int</span>&gt;, vector&lt;pair&lt;distant, <span class="type">int</span>&gt;&gt;, greater&lt;pair&lt;distant, <span class="type">int</span>&gt;&gt;&gt; que;</span><br><span class="line">distant dis[MAXN];</span><br><span class="line">graph tr, vtr;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    id[u] = ++idn, fa[u][<span class="number">0</span>] = f, dep[u] = dep[f] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; LOGN; ++i)</span><br><span class="line">        fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = tr.head[u]; ~i; i = tr.nxt[i])</span><br><span class="line">        <span class="keyword">if</span> (tr.edge[i].v != f)</span><br><span class="line">            <span class="built_in">build</span>(tr.edge[i].v, u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v])</span><br><span class="line">        <span class="built_in">swap</span>(u, v);</span><br><span class="line">    <span class="type">int</span> t = dep[u] - dep[v];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = LOGN - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> ((t &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">            u = fa[u][i];</span><br><span class="line">    <span class="keyword">if</span> (u == v)</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = LOGN - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> (fa[u][i] != fa[v][i])</span><br><span class="line">            u = fa[u][i], v = fa[v][i];</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_vedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> w = dep[v] - dep[u];</span><br><span class="line">    vtr.<span class="built_in">addedge</span>(u, v, w);</span><br><span class="line">    vtr.<span class="built_in">addedge</span>(v, u, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_vtr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(nd + <span class="number">1</span>, nd + cnt + <span class="number">1</span>, [](<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        <span class="keyword">return</span> id[x] &lt; id[y];</span><br><span class="line">    &#125;);</span><br><span class="line">    cnt = <span class="built_in">unique</span>(nd + <span class="number">1</span>, nd + cnt + <span class="number">1</span>) - nd - <span class="number">1</span>;</span><br><span class="line">    sta[top = <span class="number">1</span>] = <span class="number">1</span>, vtr.head[<span class="number">1</span>] = <span class="number">-1</span>, vtr.tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nd[i] == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">lca</span>(sta[top], nd[i]);</span><br><span class="line">        <span class="keyword">while</span> (id[l] &lt;= id[sta[top - <span class="number">1</span>]])</span><br><span class="line">            <span class="built_in">add_vedge</span>(sta[top - <span class="number">1</span>], sta[top]), --top;</span><br><span class="line">        <span class="keyword">if</span> (sta[top] != l)</span><br><span class="line">            vtr.head[l] = <span class="number">-1</span>, <span class="built_in">add_vedge</span>(l, sta[top]), sta[top] = l;</span><br><span class="line">        vtr.head[nd[i]] = <span class="number">-1</span>, sta[++top] = nd[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; top; ++i)</span><br><span class="line">        <span class="built_in">add_vedge</span>(sta[i], sta[i + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear_dis</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    dis[u] = &#123;INFI, INFI, <span class="number">1</span>, INFI&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = vtr.head[u]; ~i; i = vtr.nxt[i])</span><br><span class="line">        <span class="keyword">if</span> (vtr.edge[i].v != f)</span><br><span class="line">            <span class="built_in">clear_dis</span>(vtr.edge[i].v, u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    tr.<span class="built_in">clear</span>(), vtr.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v);</span><br><span class="line">        tr.<span class="built_in">addedge</span>(u, v);</span><br><span class="line">        tr.<span class="built_in">addedge</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="built_in">read</span>(k), <span class="built_in">read</span>(m), cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">            <span class="built_in">read</span>(iv[i]), <span class="built_in">read</span>(is[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            <span class="built_in">read</span>(iu[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">            nd[++cnt] = iv[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            nd[++cnt] = iu[i];</span><br><span class="line">        <span class="built_in">build_vtr</span>(), <span class="built_in">clear_dis</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>())</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">            dis[iv[i]] = &#123;i, iv[i], is[i], <span class="number">0</span>&#125;;</span><br><span class="line">            que.<span class="built_in">push</span>(&#123;dis[iv[i]], iv[i]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            distant d = que.<span class="built_in">top</span>().first;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">top</span>().second;</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (dis[u] &lt; d)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = vtr.head[u]; ~i; i = vtr.nxt[i]) &#123;</span><br><span class="line">                <span class="type">int</span> v = vtr.edge[i].v, w = vtr.edge[i].w;</span><br><span class="line">                <span class="keyword">if</span> (d + w &lt; dis[v]) &#123;</span><br><span class="line">                    dis[v] = d + w;</span><br><span class="line">                    que.<span class="built_in">push</span>(&#123;dis[v], v&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            <span class="built_in">write</span>(dis[iu[i]].id), <span class="built_in">putchar</span>(<span class="string">&quot; \n&quot;</span>[i == m]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4606 战略游戏 题解</title>
    <url>/2021/11/29/sol-p4606/</url>
    <content><![CDATA[<h2 id="P4606-战略游戏-题解"><a href="#P4606-战略游戏-题解" class="headerlink" title="P4606 战略游戏 题解"></a>P4606 战略游戏 题解</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4606">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><blockquote>
<p>圆方树上圆方果</p>
<p>圆方树下你和我</p>
<p>圆方树前建虚树</p>
<p>欢乐多又多 <del>/kk</del></p>
</blockquote>
<p>看到$\sum|S|$于是开始套路地想到虚树。</p>
<p>但是给定的是一个无向图不是一棵树啊……</p>
<p>所以要想办法把图转化成一棵树，这样的数据结构叫做<a href="https://oi-wiki.org/graph/block-forest/">圆方树</a>。</p>
<p><del><strong>这里假设你已经学会圆方树了</strong></del></p>
<p>考虑圆方树的性质。显然对于一对节点$(u, v)$，它们在圆方树上的路径中的圆点（不包括自身）就是删掉后能使得$u$和$v$不连通的点。因为根据圆方树的性质，所有和同一个方点连边的圆点都在同一个双联通分量里，去掉一个方点不会改变图的连通性。而那些和多个方点连边的圆点都可以成为这些方点的割点，去掉后图的连通性就改变了。</p>
<p>于是答案就是所有特殊节点之间的路径并上圆点数量减去$|S|$。</p>
<p>思路还是很简单的，主要是代码中的<del>亿点点</del>细节。比如说<code>MAXN</code>要开两倍大小（因为有圆方树）、统计答案不要把虚树的所有边权都加上（因为虚树要建立节点$1$而有时节点$1$并不出现在路径并中）<del>以及多测要清空<code>dfn</code>数组</del>等等。</p>
<p>时间复杂度$O(n \log n)$（感觉常数巨大无比）。调了两天。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4606.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4606</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">4e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">8e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LOGN = <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, w;</span><br><span class="line">    &#125; edge[MAXM];</span><br><span class="line">    <span class="type">int</span> head[MAXN], nxt[MAXM], tot;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        edge[tot] = &#123;v, w&#125;;</span><br><span class="line">        nxt[tot] = head[u];</span><br><span class="line">        head[u] = tot++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, q, k, dfc, top, bcc, idn;</span><br><span class="line"><span class="type">int</span> s[MAXN], dfn[MAXN], low[MAXN], sta[MAXN];</span><br><span class="line"><span class="type">int</span> id[MAXN], dep[MAXN], fa[MAXN][LOGN];</span><br><span class="line"><span class="type">bool</span> tag[MAXN];</span><br><span class="line">Graph g, tr, vtr;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    g.tot = tr.tot = vtr.tot = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// ##sb-mistakes## 多测不清空，爆零两行泪/kk 多测`dfn`数组记得清空啊</span></span><br><span class="line">    <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="built_in">sizeof</span>(dfn));</span><br><span class="line">    <span class="built_in">memset</span>(g.head, <span class="number">-1</span>, <span class="built_in">sizeof</span>(g.head));</span><br><span class="line">    <span class="built_in">memset</span>(tr.head, <span class="number">-1</span>, <span class="built_in">sizeof</span>(tr.head));</span><br><span class="line">    <span class="built_in">memset</span>(vtr.head, <span class="number">-1</span>, <span class="built_in">sizeof</span>(vtr.head));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    dfn[u] = low[u] = ++dfc;</span><br><span class="line">    sta[++top] = u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g.head[u]; ~i; i = g.nxt[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = g.edge[i].v;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v]) &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(v);</span><br><span class="line">            low[u] = <span class="built_in">min</span>(low[u], low[v]);</span><br><span class="line">            <span class="keyword">if</span> (dfn[u] == low[v]) &#123;</span><br><span class="line">                ++bcc;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x != v; --top) &#123;</span><br><span class="line">                    x = sta[top];</span><br><span class="line">                    tr.<span class="built_in">addedge</span>(bcc, x);</span><br><span class="line">                    tr.<span class="built_in">addedge</span>(x, bcc);</span><br><span class="line">                &#125;</span><br><span class="line">                tr.<span class="built_in">addedge</span>(bcc, u);</span><br><span class="line">                tr.<span class="built_in">addedge</span>(u, bcc);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            low[u] = <span class="built_in">min</span>(low[u], dfn[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    id[u] = ++idn;</span><br><span class="line">    fa[u][<span class="number">0</span>] = f;</span><br><span class="line">    dep[u] = dep[f] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; LOGN; ++i)</span><br><span class="line">        fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = tr.head[u]; ~i; i = tr.nxt[i])</span><br><span class="line">        <span class="keyword">if</span> (tr.edge[i].v != f)</span><br><span class="line">            <span class="built_in">build</span>(tr.edge[i].v, u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v])</span><br><span class="line">        <span class="built_in">swap</span>(u, v);</span><br><span class="line">    <span class="type">int</span> t = dep[u] - dep[v];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = LOGN - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> ((t &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">            u = fa[u][i];</span><br><span class="line">    <span class="keyword">if</span> (u == v)</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = LOGN - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> (fa[u][i] != fa[v][i])</span><br><span class="line">            u = fa[u][i], v = fa[v][i];</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_vedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> w = ((dep[v] - dep[u]) &amp; <span class="number">1</span>) ? ((dep[v] - dep[u]) / <span class="number">2</span>) : ((dep[v] - dep[u]) / <span class="number">2</span> - (v &lt;= n));</span><br><span class="line">    vtr.<span class="built_in">addedge</span>(u, v, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_vtr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(s + <span class="number">1</span>, s + k + <span class="number">1</span>, [](<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        <span class="keyword">return</span> id[x] &lt; id[y];</span><br><span class="line">    &#125;);</span><br><span class="line">    sta[top = <span class="number">1</span>] = <span class="number">1</span>, vtr.head[<span class="number">1</span>] = <span class="number">-1</span>, vtr.tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">lca</span>(sta[top], s[i]);</span><br><span class="line">        <span class="keyword">if</span> (l &lt; <span class="number">1</span> || l &gt; bcc)</span><br><span class="line">            <span class="built_in">lca</span>(sta[top], s[i]);</span><br><span class="line">        <span class="keyword">while</span> (id[l] &lt;= id[sta[top - <span class="number">1</span>]])</span><br><span class="line">            <span class="built_in">add_vedge</span>(sta[top - <span class="number">1</span>], sta[top]), --top;</span><br><span class="line">        <span class="keyword">if</span> (sta[top] != l)</span><br><span class="line">            vtr.head[l] = <span class="number">-1</span>, <span class="built_in">add_vedge</span>(l, sta[top]), sta[top] = l;</span><br><span class="line">        vtr.head[s[i]] = <span class="number">-1</span>, sta[++top] = s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; top; ++i)</span><br><span class="line">        <span class="built_in">add_vedge</span>(sta[i], sta[i + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> u, <span class="type">bool</span> tg)</span> </span>&#123;</span><br><span class="line">    tg |= tag[u];</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>, sum = (u &lt;= n), chd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = vtr.head[u]; ~i; i = vtr.nxt[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = vtr.edge[i].v, w = vtr.edge[i].w;</span><br><span class="line">        sum += w, ret += <span class="built_in">calc</span>(v, tg), chd++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret + ((tg || chd &gt; <span class="number">1</span>) ? sum : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    bcc = n, dfc = idn = <span class="number">0</span>, <span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v);</span><br><span class="line">        g.<span class="built_in">addedge</span>(u, v);</span><br><span class="line">        g.<span class="built_in">addedge</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    top = <span class="number">0</span>, <span class="built_in">tarjan</span>(<span class="number">1</span>), <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="built_in">read</span>(k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">            <span class="built_in">read</span>(s[i]), tag[s[i]] = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">build_vtr</span>();</span><br><span class="line">        <span class="built_in">write</span>(<span class="built_in">calc</span>(<span class="number">1</span>, <span class="literal">false</span>) - k), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">            tag[s[i]] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">read</span>(t);</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P3803 【模版】多项式乘法（FFT）</title>
    <url>/2021/11/28/sol-p3803/</url>
    <content><![CDATA[<h2 id="P3803-【模版】多项式乘法（FFT）"><a href="#P3803-【模版】多项式乘法（FFT）" class="headerlink" title="P3803 【模版】多项式乘法（FFT）"></a>P3803 【模版】多项式乘法（FFT）</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P3803">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>FFT 模版题</p>
<p>为了防止自己忘记就写一下证明吧。顺便把 NTT 也写一下。</p>
<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="多项式表示方法"><a href="#多项式表示方法" class="headerlink" title="多项式表示方法"></a>多项式表示方法</h4><h5 id="系数表示法"><a href="#系数表示法" class="headerlink" title="系数表示法"></a>系数表示法</h5><p>即</p>
<script type="math/tex; mode=display">f(x) = \sum_{i=0}^{n-1}{a_ix^i}</script><h5 id="点值表示法"><a href="#点值表示法" class="headerlink" title="点值表示法"></a>点值表示法</h5><p>不妨将多项式看成一个$n-1$次函数，从上面取$n$个点来唯一地表示这个函数。</p>
<p>设想一下高斯消元法，就能知道为什么$n$个不同的点就能唯一确定这个函数了。</p>
<script type="math/tex; mode=display">f(x) = \{(x_0,y_0),(x_1,y_1),\cdots,(x_{n-1},y_{n-1})\}</script><p>这样的表示法有一个好处，就是如果要计算多项式乘法，设</p>
<script type="math/tex; mode=display">g(x) = \{(x_0,g(x_0)),(x_1,g(x_1)),\cdots,(x_{n-1},g(x_{n-1}))\}</script><script type="math/tex; mode=display">h(x) = \{(x_0,h(x_0)),(x_1,h(x_1)),\cdots,(x_{n-1},h(x_{n-1}))\}</script><p>那么</p>
<script type="math/tex; mode=display">
\begin{aligned}
f(x) &= g(x) \times h(x) \\
&= \{(x_0,g(x_0)h(x_0)),(x_1,g(x_1)h(x_1)),\cdots,(x_{n-1},g(x_{n-1})h(x_{n-1}))\}
\end{aligned}</script><p>就可以$O(n)$地求出多项式乘法。</p>
<p>所以FFT要做的事就是将系数表示法和点值表示法进行转换。</p>
<h4 id="复数（这个大家都会）"><a href="#复数（这个大家都会）" class="headerlink" title="复数（这个大家都会）"></a>复数（这个大家都会）</h4><p>令$i^2 = -1$，复数可被表示为$a + bi$的形式</p>
<p>考虑在复平面上的两个向量$(a,b)$和$(c,d)$，将其表示的复数相乘得到$(a + bi) \times (c + di) = ac - bd + (ad + bc)i$，即向量$(ac - bd, ad + bc)$。</p>
<p>我们计算几个向量的模，分别为$\sqrt{a^2 + b^2}$，$\sqrt{c^2 + d^2}$和$\sqrt{a^2c^2 + b^2d^2 + a^2d^2 + b^2c^2} = \sqrt{(a^2 + b^2) \times (c^2 + d^2)}$，即两个向量模长的乘积。</p>
<p>所以如果两个原向量模长都为$1$，乘积的向量也为$1$。</p>
<p>假设我们有两个复平面上单位圆上的向量，设其辐角分别为$\alpha$和$\beta$，则这两个向量表示为$(\cos\alpha,\sin\alpha)$和$(\cos\beta,\sin\beta)$，其乘积为$(\cos\alpha\cos\beta-\sin\alpha\sin\beta,\cos\alpha\sin\beta+\sin\alpha\cos\beta)$。根据二角和差公式</p>
<script type="math/tex; mode=display">\cos(\alpha + \beta) = \cos\alpha\cos\beta-\sin\alpha\sin\beta</script><script type="math/tex; mode=display">\sin(\alpha + \beta) = \sin\alpha\cos\beta+\cos\alpha\sin\beta</script><p>可以发现这个新的向量的辐角就等于两个原向量的辐角相加。于是将得到结论：两个模长为$1$的向量相乘，得到的仍是模长为$1$的向量，辐角为两个向量辐角的和。</p>
<h4 id="单位复根"><a href="#单位复根" class="headerlink" title="单位复根"></a>单位复根</h4><p>由于我们要去计算若干个$x_i$对应的$f(x_i)$，最好的办法便是找一些特殊的数值带进去计算。这里引入单位复根的概念。</p>
<p>我们称$x^n = 1$在复数意义下的解是$n$次复根。显然这样的解有$n$个。设$\omega_n = e^{\frac{2\pi i}{n}}$，则$x^n = 1$的解集表示为${\omega^k_n \mid k=0,1,\cdots,n-1}$，称$w_n$为$n$次单位复根。根据复平面的知识，$n$次单位复根是复平面把单位圆$n$等分的第一个角所对应的向量，其他复根均可以用单位复根的幂表示。</p>
<p>所以显然还能得到$\omega_n = e^{\frac{2\pi i}{n}} = \cos(\frac{2\pi}{n}) + i \sin(\frac{2\pi}{n})$。</p>
<p>举个例子，$n=4$时，$w_n = i$，如图所示（图来自<a href="https://oi-wiki.org/math/poly/fft/">oi-wiki</a>）</p>
<p><img src="fft-1.png" alt="fft-1"></p>
<p>并且单位复根还有三个重要的性质如下：</p>
<script type="math/tex; mode=display">
\begin{aligned}
w^n_n &= 1 \\
w^k_n &= w^{2k}_{2n} \\
w^{k+n}_{2n} &= -w^k_{2n}
\end{aligned}</script><h4 id="终于开始讲FFT了"><a href="#终于开始讲FFT了" class="headerlink" title="终于开始讲FFT了"></a>终于开始讲FFT了</h4><p>FFT其本质为分治算法。比方说对于</p>
<script type="math/tex; mode=display">f(x) = a_0 + a_1x + a_2x^2 + a_3x^3 + a_4x^4 + a_5x^5 + a_6x^6 + a_7x^7</script><p>按照次数的奇偶来分组得到</p>
<script type="math/tex; mode=display">f(x) = (a_0 + a_2x^2 + a_4x^4 + a_6x^6) + (a_1x^1 + a_3x^3 + a_5x^5 + a_7x^7)</script><p>右边提取$x$得到</p>
<script type="math/tex; mode=display">f(x) = (a_0 + a_2x^2 + a_4x^4 + a_6x^6) + x(a_1 + a_3x^2 + a_5x^4 + a_7x^6)</script><p>按照奇偶次项建立新的函数</p>
<script type="math/tex; mode=display">g(x) = a_0 + a_2x^1 + a_4x^2 + a_6x^3</script><script type="math/tex; mode=display">h(x) = a_1 + a_3x^1 + a_5x^2 + a_7x^3</script><p>原来的$f(x)$可以被表示成</p>
<script type="math/tex; mode=display">f(x) = g(x^2) + x \times h(x^2)</script><p>利用单位复根的性质得到</p>
<script type="math/tex; mode=display">\begin{aligned}
FFT(f(\omega^k_n)) &= FFT(g((\omega^k_n)^2)) + \omega^k_n \times FFT(h((\omega^k_n)^2)) \\
&= FFT(g(\omega^{2k}_n)) + \omega^k_n \times FFT(h(\omega^{2k}_n)) \\
&= FFT(g(\omega^k_{n/2})) + \omega^k_n \times FFT(h(\omega^k_{n/2}))
\end{aligned}</script><p>同理可得</p>
<script type="math/tex; mode=display">\begin{aligned}
FFT(f(\omega^{k+n/2}_n)) &= FFT(g(\omega^{2k+n}_n)) + \omega^{k+n/2}_n \times FFT(h(\omega^{2k+n}_n)) \\
&= FFT(g(\omega^{2k}_n)) - \omega^k_n \times FFT(h(\omega^{2k}_n)) \\
&= FFT(g(\omega^k_{n/2})) - \omega^k_n \times FFT(h(\omega^k_{n/2}))
\end{aligned}</script><p>而由于$n/2$需要一直为整数，所以$n$需要是$2^m$，不妨在一开始将多项式的次数补到长度为长度为$2^m$，次数为$2^m-1$的多项式即可。</p>
<p>代码实现方面，STL提供了复数的模版（我也是第一次知道有这种好事），可以使用<code>std::complex&lt;double&gt;</code>。</p>
<h4 id="NTT"><a href="#NTT" class="headerlink" title="NTT"></a>NTT</h4><p>模版和FFT基本相同，用<a href="https://oi-wiki.org/math/number-theory/primitive-root/">原根</a>代替单位复根（性质基本相同）。</p>
<script type="math/tex; mode=display">p = 998244353 = 7 \times 17 \times 2^{23} + 1, g = 3</script><script type="math/tex; mode=display">p = 1004535809 = 479 \times 2^{21} + 1, g = 3</script><script type="math/tex; mode=display">p = 469762049 = 7 \times 2^{26} + 1, g = 3</script><p>时间复杂度$O(n \log n)$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P3803.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P3803</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> comp = complex&lt;<span class="type">double</span>&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1</span> &lt;&lt; <span class="number">21</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">namespace</span> fft &#123;</span><br><span class="line">    <span class="type">int</span> rev[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(comp *f, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">                rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">                <span class="built_in">swap</span>(f[i], f[rev[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fft</span><span class="params">(comp *f, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">change</span>(f, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="function">comp <span class="title">wn</span><span class="params">(cos(<span class="number">2</span> * M_PI / h), sin(<span class="number">2</span> * M_PI / h))</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">                <span class="function">comp <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; j + h / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                    comp u = f[k], t = w * f[k + h / <span class="number">2</span>];</span><br><span class="line">                    f[k] = u + t;</span><br><span class="line">                    f[k + h / <span class="number">2</span>] = u - t;</span><br><span class="line">                    w = w * wn;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">reverse</span>(f + <span class="number">1</span>, f + len);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">                f[i].<span class="built_in">real</span>(f[i].<span class="built_in">real</span>() / len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n, m, len;</span><br><span class="line">    comp a[MAXN], b[MAXN], ans[MAXN];</span><br><span class="line">    <span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            <span class="built_in">read</span>(x);</span><br><span class="line">            a[i].<span class="built_in">real</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            <span class="built_in">read</span>(x);</span><br><span class="line">            b[i].<span class="built_in">real</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (len &lt;= n + m)</span><br><span class="line">            len *= <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">fft</span>(a, len, <span class="number">1</span>), <span class="built_in">fft</span>(b, len, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            ans[i] = a[i] * b[i];</span><br><span class="line">        <span class="built_in">fft</span>(ans, len, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + m; ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld%c&quot;</span>, (<span class="type">int</span>)(ans[i].<span class="built_in">real</span>() + <span class="number">0.5</span>), <span class="string">&quot; \n&quot;</span>[i == n + m]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> ntt &#123;</span><br><span class="line">    <span class="type">int</span> rev[MAXN];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x % MOD)</span><br><span class="line">            <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">                ret = ret * x % MOD;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> *f, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">                rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">                <span class="built_in">swap</span>(f[i], f[rev[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(<span class="type">int</span> *f, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">change</span>(f, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (MOD - <span class="number">1</span>) / h);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">                <span class="type">int</span> g = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; j + h / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                    <span class="type">int</span> u = f[k], t = g * f[k + h / <span class="number">2</span>] % MOD;</span><br><span class="line">                    f[k] = (u + t + MOD) % MOD;</span><br><span class="line">                    f[k + h / <span class="number">2</span>] = (u - t + MOD) % MOD;</span><br><span class="line">                    g = g * gn % MOD;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">reverse</span>(f + <span class="number">1</span>, f + len);</span><br><span class="line">            <span class="type">int</span> inv = <span class="built_in">qpow</span>(len, MOD - <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">                f[i] = f[i] * inv % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n, m, len;</span><br><span class="line">    <span class="type">int</span> a[MAXN], b[MAXN], ans[MAXN];</span><br><span class="line">    <span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">read</span>(a[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            <span class="built_in">read</span>(b[i]);</span><br><span class="line">        len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (len &lt;= n + m)</span><br><span class="line">            len *= <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">ntt</span>(a, len, <span class="number">1</span>), <span class="built_in">ntt</span>(b, len, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            ans[i] = a[i] * b[i] % MOD;</span><br><span class="line">        <span class="built_in">ntt</span>(ans, len, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + m; ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld%c&quot;</span>, ans[i], <span class="string">&quot; \n&quot;</span>[i == n + m]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// return fft::main();</span></span><br><span class="line">    <span class="keyword">return</span> ntt::<span class="built_in">main</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P3233 世界树 题解</title>
    <url>/2021/11/27/sol-p3233/</url>
    <content><![CDATA[<h2 id="P3233-世界树-题解"><a href="#P3233-世界树-题解" class="headerlink" title="P3233 世界树 题解"></a>P3233 世界树 题解</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P3233">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p><strong>以下所有的“关键点”都表示题目中的议事处</strong></p>
<p>看完这题题解后去学习了虚树<del>（然后day2上午模拟赛考了道类似虚树但不用建$lca$的题目）</del></p>
<p>于是看到$\sum m \le 3 \times 10^5$ 直接建立虚树（然而如果没学过虚树就看不出来了）。</p>
<p>用<code>pair&lt;int, int&gt;</code>储存树上节点到达最近关键点的距离和关键点编号以便于比较。先对虚树上的节点做一遍换根$dp$，方程显然是$dp<em>u = \min\limits</em>{v,w}{dp_v + w}$其中$v, w$分别为子节点和到子节点的距离。之后为了方便表述设<strong>$f_u$表示<code>dp[u].first</code>，$g_u$表示<code>dp[u].second</code></strong>。</p>
<p>接下来考虑不在虚树上的节点。首先如果虚树上某节点的一个原树上子节点的子树中都没有虚树上的节点，那么该子树中的的所有节点的最近关键点都应当与该虚树节点相同。形式化地，若对于虚树上的节点$u$有节点$u \to v<em>{real}$使得不存在$v</em>{real} \to \cdots \to x$在虚树上，那么$g<em>x = g_u$，即$cnt</em>{g<em>u} += siz</em>{v_{real}}$。如在下图中的节点中$v=6,v=7,v=10$都满足该种情况（加粗节点表示虚树节点）。</p>
<p><img src="sol-p3233-1.png" alt="虚树"></p>
<p>其次是在虚树的链上的点。不妨将例如上图中的节点$9$计算到节点$4$中（因为$g<em>4$一定等于$g_9$），考虑一条链$fa \to u$，若$g</em>{fa} = g<em>u$则链上节点全部加到$g_u$中（同样设$v</em>{real}$表示$fa$在原树中的$u$方向的子节点，相当于$cnt<em>{g_u} += siz</em>{v<em>{real}} - siz_u$），否则倍增找到深度最小的满足取$g_u$更优的点$cur$，显然$cnt</em>{g<em>u} += siz</em>{cur} - siz<em>u$，$cnt</em>{g<em>{fa}} += siz</em>{v<em>{real}} - siz</em>{cur}$。</p>
<p>于是本题就结束了。只是有太多太多细节要注意了，<del>写错一个调一整年啊/kk</del></p>
<p>时间复杂度$O(n \log n)$稳过。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P3233.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P3233</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> pii = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">6e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXK = <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">graph</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">    &#125; e[MAXM];</span><br><span class="line">    <span class="type">int</span> head[MAXN], nxt[MAXM], tot;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        e[++tot] = &#123;u, v, w&#125;;</span><br><span class="line">        nxt[tot] = head[u];</span><br><span class="line">        head[u] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, q, top, inde, h[MAXN], dfn[MAXN], dep[MAXN];</span><br><span class="line"><span class="type">int</span> fa[MAXN][MAXK], siz[MAXN], sta[MAXN], cnt[MAXN], ori[MAXN];</span><br><span class="line">pii dis[MAXN][<span class="number">2</span>], tmp[MAXN], pre[MAXN], nxt[MAXN];</span><br><span class="line"><span class="type">bool</span> tag[MAXN];</span><br><span class="line">graph tr, vtr;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_tr</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    siz[u] = <span class="number">1</span>, dfn[u] = ++inde, dep[u] = dep[f] + <span class="number">1</span>, fa[u][<span class="number">0</span>] = f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; MAXK; ++i)</span><br><span class="line">        fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = tr.head[u]; i; i = tr.nxt[i])</span><br><span class="line">        <span class="keyword">if</span> (tr.e[i].v != f)</span><br><span class="line">            <span class="built_in">build_tr</span>(tr.e[i].v, u), siz[u] += siz[tr.e[i].v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v])</span><br><span class="line">        <span class="built_in">swap</span>(u, v);</span><br><span class="line">    <span class="type">int</span> t = dep[u] - dep[v];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = MAXK - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> ((t &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">            u = fa[u][i];</span><br><span class="line">    <span class="keyword">if</span> (u == v)</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = MAXK - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> (fa[u][i] != fa[v][i])</span><br><span class="line">            u = fa[u][i], v = fa[v][i];</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">jump</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = MAXK - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> ((d &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">            u = fa[u][i];</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_vedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// debug(&quot;virtual tree: %lld -&gt; %lld, w = %lld&quot;, u, v, dep[v] - dep[u]);</span></span><br><span class="line">    vtr.<span class="built_in">addedge</span>(u, v, dep[v] - dep[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_vtr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(h + <span class="number">1</span>, h + m + <span class="number">1</span>, [](<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        <span class="keyword">return</span> dfn[x] &lt; dfn[y];</span><br><span class="line">    &#125;);</span><br><span class="line">    sta[top = <span class="number">1</span>] = <span class="number">1</span>, vtr.head[<span class="number">1</span>] = <span class="number">0</span>, vtr.tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (h[i] == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">lca</span>(sta[top], h[i]);</span><br><span class="line">        <span class="keyword">while</span> (dfn[l] &lt;= dfn[sta[top - <span class="number">1</span>]])</span><br><span class="line">            <span class="built_in">add_vedge</span>(sta[top - <span class="number">1</span>], sta[top]), --top;</span><br><span class="line">        <span class="keyword">if</span> (sta[top] != l)</span><br><span class="line">            vtr.head[l] = <span class="number">0</span>, <span class="built_in">add_vedge</span>(l, sta[top]), sta[top] = l;</span><br><span class="line">        vtr.head[h[i]] = <span class="number">0</span>, sta[++top] = h[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; top; ++i)</span><br><span class="line">        <span class="built_in">add_vedge</span>(sta[i], sta[i + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs0</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    dis[u][<span class="number">0</span>] = tag[u] ? pii&#123;<span class="number">0</span>, u&#125; : pii&#123;INFL, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = vtr.head[u]; i; i = vtr.nxt[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = vtr.e[i].v, w = vtr.e[i].w;</span><br><span class="line">        <span class="built_in">dfs0</span>(v), dis[u][<span class="number">0</span>] = <span class="built_in">min</span>(dis[u][<span class="number">0</span>], &#123;dis[v][<span class="number">0</span>].fi + w, dis[v][<span class="number">0</span>].se&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// debug(&quot;dis of dfs0(%lld) = &#123;%lld, %lld&#125;&quot;, u, dis[u][0].fi, dis[u][0].se);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = vtr.head[u]; i; i = vtr.nxt[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = vtr.e[i].v, w = vtr.e[i].w;</span><br><span class="line">        tmp[++len] = &#123;dis[v][<span class="number">0</span>].fi + w, dis[v][<span class="number">0</span>].se&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tag[u])</span><br><span class="line">        dis[u][<span class="number">1</span>] = &#123;<span class="number">0</span>, u&#125;;</span><br><span class="line">    pre[<span class="number">0</span>] = nxt[len + <span class="number">1</span>] = dis[u][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">        pre[i] = <span class="built_in">min</span>(pre[i - <span class="number">1</span>], tmp[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">        nxt[i] = <span class="built_in">min</span>(nxt[i + <span class="number">1</span>], tmp[i]);</span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = vtr.head[u]; i; i = vtr.nxt[i]) &#123;</span><br><span class="line">        ++len;</span><br><span class="line">        pii t = <span class="built_in">min</span>(pre[len - <span class="number">1</span>], nxt[len + <span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// ##sb-mistakes## 换根$dp$不要在统计$pre$和$nxt$数组时就写$dfs$!!!数组整个改变!!!不然会死得很惨（指对着n=1000,m=100的大样例调1h）</span></span><br><span class="line">        dis[vtr.e[i].v][<span class="number">1</span>] = &#123;t.fi + vtr.e[i].w, t.se&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = vtr.head[u]; i; i = vtr.nxt[i])</span><br><span class="line">        <span class="built_in">dfs1</span>(vtr.e[i].v);</span><br><span class="line">    <span class="comment">// debug(&quot;dis of dfs1(%lld) = &#123;%lld, %lld&#125;&quot;, u, dis[u][1].fi, dis[u][1].se);</span></span><br><span class="line">    dis[u][<span class="number">1</span>] = <span class="built_in">min</span>(dis[u][<span class="number">0</span>], dis[u][<span class="number">1</span>]);</span><br><span class="line">    ++cnt[dis[u][<span class="number">1</span>].se];</span><br><span class="line">    <span class="comment">// debug(&quot;dis of dfs1(%lld) = &#123;%lld, %lld&#125;&quot;, u, dis[u][1].fi, dis[u][1].se);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = vtr.head[u]; i; i = vtr.nxt[i])</span><br><span class="line">        <span class="built_in">dfs2</span>(vtr.e[i].v, u);</span><br><span class="line">    <span class="keyword">if</span> (f) &#123;</span><br><span class="line">        <span class="comment">// debug(&quot;calculate chain %lld -&gt; %lld&quot;, f, u);</span></span><br><span class="line">        <span class="keyword">if</span> (dis[f][<span class="number">1</span>].se == dis[u][<span class="number">1</span>].se) &#123;</span><br><span class="line">            <span class="type">int</span> cx = siz[<span class="built_in">jump</span>(u, dep[u] - dep[f] - <span class="number">1</span>)] - siz[u];</span><br><span class="line">            <span class="comment">// debug(&quot;same color, add %lld to cnt[%lld]&quot;, cx, dis[u][1].se);</span></span><br><span class="line">            cnt[dis[u][<span class="number">1</span>].se] += cx;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> cur = u;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = MAXK - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dep[fa[cur][i]] &lt;= dep[f])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                pii up&#123;dep[fa[cur][i]] - dep[f] + dis[f][<span class="number">1</span>].fi, dis[f][<span class="number">1</span>].se&#125;;</span><br><span class="line">                pii dn&#123;dep[u] - dep[fa[cur][i]] + dis[u][<span class="number">1</span>].fi, dis[u][<span class="number">1</span>].se&#125;;</span><br><span class="line">                <span class="keyword">if</span> (dn &lt; up)</span><br><span class="line">                    cur = fa[cur][i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// debug(&quot;vertex is %lld&quot;, cur);</span></span><br><span class="line">            <span class="type">int</span> c1 = siz[cur] - siz[u];</span><br><span class="line">            <span class="type">int</span> c2 = siz[<span class="built_in">jump</span>(u, dep[u] - dep[f] - <span class="number">1</span>)] - siz[cur];</span><br><span class="line">            <span class="comment">// debug(&quot;%lld&quot;, siz[jump(u, dep[u] - dep[f] - 1)]);</span></span><br><span class="line">            <span class="comment">// debug(&quot;diff color, add %lld to cnt[%lld]&quot;, c1, dis[u][1].se);</span></span><br><span class="line">            <span class="comment">// debug(&quot;diff color, add %lld to cnt[%lld]&quot;, c2, dis[f][1].se);</span></span><br><span class="line">            cnt[dis[u][<span class="number">1</span>].se] += c1;</span><br><span class="line">            cnt[dis[f][<span class="number">1</span>].se] += c2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// debug(&quot;calculate subtree of %lld&quot;, u);</span></span><br><span class="line">    <span class="type">int</span> rem = siz[u] - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = vtr.head[u]; i; i = vtr.nxt[i])</span><br><span class="line">        rem -= siz[<span class="built_in">jump</span>(vtr.e[i].v, dep[vtr.e[i].v] - dep[u] - <span class="number">1</span>)];</span><br><span class="line">    <span class="comment">// debug(&quot;add %lld to cnt[%lld]&quot;, rem, dis[u][1].se);</span></span><br><span class="line">    cnt[dis[u][<span class="number">1</span>].se] += rem;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v);</span><br><span class="line">        tr.<span class="built_in">addedge</span>(u, v);</span><br><span class="line">        tr.<span class="built_in">addedge</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build_tr</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="built_in">read</span>(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            ori[i] = <span class="built_in">read</span>(h[i]), tag[h[i]] = <span class="literal">true</span>, cnt[h[i]] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">build_vtr</span>();</span><br><span class="line">        dis[<span class="number">1</span>][<span class="number">0</span>] = dis[<span class="number">1</span>][<span class="number">1</span>] = &#123;INFL, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">dfs0</span>(<span class="number">1</span>), <span class="built_in">dfs1</span>(<span class="number">1</span>), <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            <span class="built_in">write</span>(cnt[ori[i]]), <span class="built_in">putchar</span>(i == m ? <span class="string">&#x27;\n&#x27;</span> : <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            tag[h[i]] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P2495 消耗战 题解</title>
    <url>/2021/11/27/sol-p2495/</url>
    <content><![CDATA[<h2 id="P2495-消耗战-题解"><a href="#P2495-消耗战-题解" class="headerlink" title="P2495 消耗战 题解"></a>P2495 消耗战 题解</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P2495">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>虚树模版题，不多说。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P2495.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P2495</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXK = <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">graph</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">    &#125; e[MAXM];</span><br><span class="line">    <span class="type">int</span> head[MAXN], nxt[MAXM], tot;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">        e[++tot] = &#123;u, v, w&#125;;</span><br><span class="line">        nxt[tot] = head[u];</span><br><span class="line">        head[u] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, k, inde, h[MAXN], dfn[MAXN], dep[MAXN];</span><br><span class="line"><span class="type">int</span> fa[MAXN][MAXK], mn[MAXN][MAXK], dp[MAXN], sta[MAXN], top;</span><br><span class="line"><span class="type">bool</span> tag[MAXN];</span><br><span class="line">graph tr, vtr;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_tr</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">    dfn[u] = ++inde, dep[u] = dep[f] + <span class="number">1</span>;</span><br><span class="line">    fa[u][<span class="number">0</span>] = f, mn[u][<span class="number">0</span>] = w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; MAXK; ++i)</span><br><span class="line">        fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; MAXK; ++i)</span><br><span class="line">        mn[u][i] = <span class="built_in">min</span>(mn[u][i - <span class="number">1</span>], mn[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = tr.head[u]; i; i = tr.nxt[i])</span><br><span class="line">        <span class="keyword">if</span> (tr.e[i].v != f)</span><br><span class="line">            <span class="built_in">build_tr</span>(tr.e[i].v, u, tr.e[i].w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v])</span><br><span class="line">        <span class="built_in">swap</span>(u, v);</span><br><span class="line">    <span class="type">int</span> t = dep[u] - dep[v];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = MAXK - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> ((t &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">            u = fa[u][i];</span><br><span class="line">    <span class="keyword">if</span> (u == v)</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = MAXK - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> (fa[u][i] != fa[v][i])</span><br><span class="line">            u = fa[u][i], v = fa[v][i];</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">minpath</span><span class="params">(<span class="type">int</span> f, <span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t = dep[f] - dep[u];</span><br><span class="line">    <span class="type">int</span> ret = INFL;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = MAXK - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> ((t &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">            ret = <span class="built_in">min</span>(ret, mn[u][i]), u = fa[u][i];</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_vedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    vtr.<span class="built_in">addedge</span>(u, v, <span class="built_in">minpath</span>(u, v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_vtr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(h + <span class="number">1</span>, h + k + <span class="number">1</span>, [](<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        <span class="keyword">return</span> dfn[x] &lt; dfn[y];</span><br><span class="line">    &#125;);</span><br><span class="line">    sta[top = <span class="number">1</span>] = <span class="number">1</span>, vtr.tot = <span class="number">0</span>, vtr.head[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (h[i] == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">lca</span>(sta[top], h[i]);</span><br><span class="line">        <span class="keyword">if</span> (l != sta[top]) &#123;</span><br><span class="line">            <span class="keyword">while</span> (dfn[sta[top - <span class="number">1</span>]] &gt; dfn[l])</span><br><span class="line">                <span class="built_in">add_vedge</span>(sta[top - <span class="number">1</span>], sta[top]), --top;</span><br><span class="line">            <span class="keyword">if</span> (sta[top - <span class="number">1</span>] == l)</span><br><span class="line">                <span class="built_in">add_vedge</span>(l, sta[top]), --top;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                vtr.head[l] = <span class="number">-1</span>, <span class="built_in">add_vedge</span>(l, sta[top]), sta[top] = l;</span><br><span class="line">        &#125;</span><br><span class="line">        vtr.head[h[i]] = <span class="number">0</span>, sta[++top] = h[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; top; ++i)</span><br><span class="line">        <span class="built_in">add_vedge</span>(sta[i], sta[i + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    dp[u] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = vtr.head[u]; i; i = vtr.nxt[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = vtr.e[i].v, w = vtr.e[i].w;</span><br><span class="line">        <span class="built_in">dfs</span>(v);</span><br><span class="line">        <span class="keyword">if</span> (tag[v])</span><br><span class="line">            dp[u] += w;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            dp[u] += <span class="built_in">min</span>(dp[v], w);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v), <span class="built_in">read</span>(w);</span><br><span class="line">        tr.<span class="built_in">addedge</span>(u, v, w);</span><br><span class="line">        tr.<span class="built_in">addedge</span>(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fill</span>(mn[<span class="number">0</span>], mn[<span class="number">0</span>] + MAXK, INFL);</span><br><span class="line">    <span class="built_in">build_tr</span>(<span class="number">1</span>, <span class="number">0</span>, INFL);</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">read</span>(k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">            <span class="built_in">read</span>(h[i]), tag[h[i]] = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">build_vtr</span>();</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">write</span>(dp[<span class="number">1</span>]), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">            tag[h[i]] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P7155 Spaceship P 题解</title>
    <url>/2021/11/26/sol-p7155/</url>
    <content><![CDATA[<h2 id="P7155-Spaceship-P-题解"><a href="#P7155-Spaceship-P-题解" class="headerlink" title="P7155 Spaceship P 题解"></a>P7155 Spaceship P 题解</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P7155">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>考虑到一个合法的按钮序列中，有且仅有一个最大的按钮编号。因为如果该最大编号为$mx$的按钮能被按下多次，则必须要按下另一个按钮编号$\gt mx$以使按钮$mx$变得合法，不满足$mx$编号最大，故假设不成立。</p>
<p>有了这个性质，就确定了合法序列数量的上界，并且由于编号最大的按钮将序列分成两段，这使得我们可以$dp$求解。设$dp<em>{u,v,c,0/1,0/1}$表示从$u$走到$v$的路径中最大按钮的编号不超过$c$，第一步是否有限制和最后一步是否有限制的方案数，答案就是$dp</em>{s,t,K,1,1}$，于是$O(qn^5)$做法显然。</p>
<p>考虑如何优化（其实也挺好想）。令$f<em>{u,x,c,0/1}=\sum\limits</em>{(t,u)}{dp<em>{u,t,c-1,0/1,0}}$，$g</em>{x,v,c,0/1}=\sum\limits<em>{(v,t)}{dp</em>{t,v,c-1,0,0/1}}$，则$dp<em>{u,v,c,k1,k2}=\sum\limits</em>{t}{f<em>{u,t,c,k1} \times g</em>{t,v,c,k2}}$，一下子少枚举很多东西了。</p>
<p>具体细节就看代码吧，时间复杂度$O(n^4 + qn^3)$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P7155.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P7155</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">65</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n, k, q;</span><br><span class="line"><span class="type">char</span> buf[MAXN];</span><br><span class="line"><span class="type">bool</span> mp[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> dp[<span class="number">2</span>][<span class="number">2</span>][MAXN][MAXN][MAXN], f[<span class="number">2</span>][MAXN][MAXN][MAXN], g[<span class="number">2</span>][MAXN][MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">uadd</span><span class="params">(<span class="type">int</span> &amp;x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= MOD)</span><br><span class="line">        x -= MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t, <span class="type">int</span> bs, <span class="type">int</span> bt)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f[<span class="number">1</span>], <span class="number">0</span>, <span class="built_in">sizeof</span>(f[<span class="number">1</span>]));</span><br><span class="line">    <span class="built_in">memset</span>(g[<span class="number">1</span>], <span class="number">0</span>, <span class="built_in">sizeof</span>(g[<span class="number">1</span>]));</span><br><span class="line">    <span class="built_in">memset</span>(dp[<span class="number">0</span>][<span class="number">1</span>], <span class="number">0</span>, <span class="built_in">sizeof</span>(dp[<span class="number">0</span>][<span class="number">1</span>]));</span><br><span class="line">    <span class="built_in">memset</span>(dp[<span class="number">1</span>][<span class="number">0</span>], <span class="number">0</span>, <span class="built_in">sizeof</span>(dp[<span class="number">1</span>][<span class="number">0</span>]));</span><br><span class="line">    <span class="built_in">memset</span>(dp[<span class="number">1</span>][<span class="number">1</span>], <span class="number">0</span>, <span class="built_in">sizeof</span>(dp[<span class="number">1</span>][<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">1</span>; c &lt;= k; ++c) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">1</span>; y &lt;= n; ++y)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">1</span>; v &lt;= n; ++v)</span><br><span class="line">                <span class="keyword">if</span> (mp[v][y]) <span class="built_in">uadd</span>(f[<span class="number">1</span>][s][y][c], dp[<span class="number">1</span>][<span class="number">0</span>][s][v][c - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">1</span>; x &lt;= n; ++x)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">1</span>; v &lt;= n; ++v)</span><br><span class="line">                <span class="keyword">if</span> (mp[x][v]) <span class="built_in">uadd</span>(g[<span class="number">1</span>][x][t][c], dp[<span class="number">0</span>][<span class="number">1</span>][v][t][c - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (c == bs) <span class="built_in">uadd</span>(f[<span class="number">1</span>][s][s][c], <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (c == bt) <span class="built_in">uadd</span>(g[<span class="number">1</span>][t][t][c], <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">1</span>; v &lt;= n; ++v) &#123;</span><br><span class="line">            dp[<span class="number">1</span>][<span class="number">0</span>][s][v][c] = dp[<span class="number">1</span>][<span class="number">0</span>][s][v][c - <span class="number">1</span>];</span><br><span class="line">            dp[<span class="number">0</span>][<span class="number">1</span>][v][t][c] = dp[<span class="number">0</span>][<span class="number">1</span>][v][t][c - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>; l &lt;= n; ++l) &#123;</span><br><span class="line">                <span class="built_in">uadd</span>(dp[<span class="number">1</span>][<span class="number">0</span>][s][v][c], f[<span class="number">1</span>][s][l][c] * g[<span class="number">0</span>][l][v][c] % MOD);</span><br><span class="line">                <span class="built_in">uadd</span>(dp[<span class="number">0</span>][<span class="number">1</span>][v][t][c], f[<span class="number">0</span>][v][l][c] * g[<span class="number">1</span>][l][t][c] % MOD);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>][s][t][c] = dp[<span class="number">1</span>][<span class="number">1</span>][s][t][c - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">1</span>; v &lt;= n; ++v)</span><br><span class="line">            <span class="built_in">uadd</span>(dp[<span class="number">1</span>][<span class="number">1</span>][s][t][c], f[<span class="number">1</span>][s][v][c] * g[<span class="number">1</span>][v][t][c] % MOD);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">1</span>][<span class="number">1</span>][s][t][k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(k), <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            mp[i][j] = buf[j] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">1</span>; c &lt;= k; ++c) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">1</span>; x &lt;= n; ++x)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">1</span>; y &lt;= n; ++y)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t &lt;= n; ++t)</span><br><span class="line">                    <span class="keyword">if</span> (mp[t][y]) <span class="built_in">uadd</span>(f[<span class="number">0</span>][x][y][c], dp[<span class="number">0</span>][<span class="number">0</span>][x][t][c - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">1</span>; x &lt;= n; ++x)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">1</span>; y &lt;= n; ++y)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t &lt;= n; ++t)</span><br><span class="line">                    <span class="keyword">if</span> (mp[x][t]) <span class="built_in">uadd</span>(g[<span class="number">0</span>][x][y][c], dp[<span class="number">0</span>][<span class="number">0</span>][t][y][c - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">uadd</span>(f[<span class="number">0</span>][i][i][c], <span class="number">1</span>), <span class="built_in">uadd</span>(g[<span class="number">0</span>][i][i][c], <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">1</span>; x &lt;= n; ++x)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">1</span>; y &lt;= n; ++y)</span><br><span class="line">                <span class="built_in">uadd</span>(dp[<span class="number">0</span>][<span class="number">0</span>][x][y][c], dp[<span class="number">0</span>][<span class="number">0</span>][x][y][c - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">1</span>; x &lt;= n; ++x)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">1</span>; y &lt;= n; ++y)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t &lt;= n; ++t)</span><br><span class="line">                    <span class="built_in">uadd</span>(dp[<span class="number">0</span>][<span class="number">0</span>][x][y][c], f[<span class="number">0</span>][x][t][c] * g[<span class="number">0</span>][t][y][c] % MOD);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">int</span> bs, s, bt, t;</span><br><span class="line">        <span class="built_in">read</span>(bs), <span class="built_in">read</span>(s), <span class="built_in">read</span>(bt), <span class="built_in">read</span>(t);</span><br><span class="line">        <span class="built_in">write</span>(<span class="built_in">query</span>(s, t, bs, bt)), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>BZOJ2720 列队春游 题解</title>
    <url>/2021/11/26/sol-bzoj2720/</url>
    <content><![CDATA[<h2 id="BZOJ2720-列队春游-题解"><a href="#BZOJ2720-列队春游-题解" class="headerlink" title="BZOJ2720 列队春游 题解"></a>BZOJ2720 列队春游 题解</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://darkbzoj.tk/problem/2720">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>对于这种全排列的题目发现不太好用$dp$。仔细观察发现对于每个人的期望视野都是独立的，可以直接相加，所以直接算$E(c)$表示有$c$个人的高度小于该同学时该同学的期望视野。答案显然$\sum\limits_{i=1}^{n}{E(c_i)}$。</p>
<p>考虑如何求$E(c)$。根据期望公式易得$E(c) = \sum\limits_{i=1}^{c}{i \cdot P(i)}$。</p>
<p>但是$P(i)$不好求而$P(\ge i)$相对好求，于是继续观察这个等式，发现每个$P(i)$都被计算了恰好$i$次，所以$E(c)$就可以表示为如下：</p>
<script type="math/tex; mode=display">
    E(c) = \sum_{i=1}^{c}{P(\ge i)}</script><p>这样就只需要考虑概率而不需要考虑期望了。</p>
<p>接下来考虑$P(\ge i)$。既然视野$\ge i$，那么至少要有$i-1$个高度$\lt h$的人站在前面，于是$P(\ge i)$表示如下：</p>
<script type="math/tex; mode=display">
\begin{align}
        P(\ge i) &= \frac{n-i+1}{n} \cdot \frac{c^{\underline{i-1}}}{(n-1)^{\underline{i-1}}} \\
        &= \frac{n-i+1}{n} \cdot \frac{c!(n-i)!}{(n-1)!(c-i+1)!} \\
        &= \frac{c!}{n!} \cdot \frac{(n-i+1)!}{(c-i+1)!}
    \end{align}</script><p>于是将该式代入到$E(c)$中得到：</p>
<script type="math/tex; mode=display">
    \begin{align}
        E(c) &= \sum_{i=1}^{c}{i \cdot P(i)} \\
        &= \sum_{i=1}^{c}{P(\ge i)} \\
        &= \sum_{i=1}^{c}{\frac{c!}{n!} \cdot \frac{(n-i+1)!}{(c-i+1)!}} \\
        &= \frac{c!}{n!}\sum_{i=1}^{c}{\frac{(n-i+1)!}{(c-i+1)!}} \\
        &= \frac{c!(n-c)!}{n!}\sum_{i=1}^{c}{\binom{n-i+1}{c-i+1}} \\
        &= \frac{c!(n-c)!}{n!}\sum_{i=0}^{c-1}{\binom{n-c+i+1}{i+1}}
    \end{align}</script><p>由于$\sum\limits_{i=0}^{k}{\binom{n+i}{m+i}} = \binom{n+k+1}{m+k}$（易证），所以可以进一步将$E(c)$的$\Sigma$优化掉。</p>
<script type="math/tex; mode=display">
    \begin{align}
        E(c) &= \frac{c!(n-c)!}{n!}\sum_{i=0}^{c-1}{\binom{n-c+i+1}{i+1}} \\
        &= \frac{c!(n-c)!}{n!} \cdot \binom{n+1}{c} \\
        &= \frac{c!(n-c)!}{n!} \cdot \frac{(n+1)!}{c!(n-c+1)!} \\
        &= \frac{n+1}{n-c+1}
    \end{align}</script><p>所以得到结论</p>
<script type="math/tex; mode=display">
    E(c) = \frac{n+1}{n-c+1}</script><p>于是最终的答案就变成了</p>
<script type="math/tex; mode=display">
    ans = \sum_{i=1}^{n}{\frac{n+1}{n-c+1}}</script><p>$O(n)$求解即可。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           BZOJ2720.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://darkbzoj.tk/problem/2720</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> ldb = <span class="type">long</span> <span class="type">double</span>;</span><br><span class="line"><span class="type">int</span> n, h[MAXN], cnt[MAXN];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ++cnt[<span class="built_in">read</span>(h[i])];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; ++i)</span><br><span class="line">        cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">    ldb ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ans += (ldb)(n + <span class="number">1</span>) / (n - cnt[h[i] - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2Lf\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P3715 魔法咒语 题解</title>
    <url>/2021/11/25/sol-p3715/</url>
    <content><![CDATA[<h2 id="P3715-魔法咒语-题解"><a href="#P3715-魔法咒语-题解" class="headerlink" title="P3715 魔法咒语 题解"></a>P3715 魔法咒语 题解</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P3715">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>多模式字符串匹配首先想到AC自动机，那么将忌讳词语建立AC自动机，整个$dp$就有一维状态设为AC自动机的状态，另一维就用字符串的长度，得到$dp_{i,s}$表示长度为$i$，匹配到AC自动机的状态为$s$的字符串个数。转移时枚举基本词汇，在AC自动机上跑出下一个状态，判断是否合法然后向后转移。时间复杂度$O(Ln \Sigma)$，$\Sigma$为忌讳词语的总长度，可通过测试点$1-6$。</p>
<p>接下来分析如何做测试点$7-10$。发现测试点$7-10$有$|S<em>i| \le 2$的性质（$|S_i|$为基本词汇长度），而$L \le 10^8$又给我们一个提示，即正解复杂度带有$\log L$，于是想到用矩阵快速幂来优化$dp$。考虑到因为有$|S_1| \le 2$，所以$dp</em>{i,s}$只依赖于$dp_{i-2,t}$，就可以参考斐波那契数列的矩阵快速幂优化来设定一个$(tot \times 2) \times (tot \times 2)$，$tot$表示AC自动机状态总数（显然$tot \le \Sigma \le 100$）的转移矩阵处理即可。时间复杂度$O((\Sigma)^3 \log L)$，可通过测试点$7-10$。</p>
<p>综上所述，总的时间复杂度为$O(\min(Ln \Sigma, \Sigma^3 \log L))$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P3715.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P3715</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">205</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">uadd</span><span class="params">(<span class="type">int</span> &amp;x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= MOD)</span><br><span class="line">        x -= MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[MAXN][MAXN], n;</span><br><span class="line">    <span class="built_in">matrix</span>(<span class="type">int</span> m) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = m;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line">    &#125;</span><br><span class="line">    matrix <span class="keyword">operator</span>*(<span class="type">const</span> matrix &amp;o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="function">matrix <span class="title">ret</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</span><br><span class="line">                    <span class="built_in">uadd</span>(ret.a[i][j], a[i][k] * o.a[k][j] % MOD);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ac_automaton</span> &#123;</span><br><span class="line">    <span class="type">int</span> nxt[MAXN][<span class="number">26</span>], fail[MAXN], cnt[MAXN], tot;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> *s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> rt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; s[i]; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!nxt[rt][s[i] - <span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">                nxt[rt][s[i] - <span class="string">&#x27;a&#x27;</span>] = ++tot;</span><br><span class="line">            rt = nxt[rt][s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        ++cnt[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>())</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            <span class="keyword">if</span> (nxt[<span class="number">0</span>][i])</span><br><span class="line">                que.<span class="built_in">push</span>(nxt[<span class="number">0</span>][i]);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nxt[u][i]) &#123;</span><br><span class="line">                    fail[nxt[u][i]] = nxt[fail[u]][i];</span><br><span class="line">                    que.<span class="built_in">push</span>(nxt[u][i]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    nxt[u][i] = nxt[fail[u]][i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, k, sum, len[MAXN];</span><br><span class="line"><span class="type">int</span> dp[MAXN][MAXN];</span><br><span class="line"><span class="type">char</span> s[MAXN][MAXN], t[MAXN][MAXN];</span><br><span class="line">ac_automaton ac;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">posi</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum * l + x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">matrix <span class="title">qpow</span><span class="params">(matrix x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="function">matrix <span class="title">ret</span><span class="params">(x.n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= x.n; ++i)</span><br><span class="line">        ret.a[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x)</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ret = ret * x;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m), <span class="built_in">read</span>(k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s[i] + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, t[i] + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        len[i] = <span class="built_in">strlen</span>(s[i] + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        ac.<span class="built_in">insert</span>(t[i] + <span class="number">1</span>);</span><br><span class="line">    ac.<span class="built_in">build</span>();</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= ac.tot; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ac.cnt[j])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">1</span>; x &lt;= n; ++x) &#123;</span><br><span class="line">                    <span class="type">int</span> p = j;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>; l &lt;= len[x]; ++l) &#123;</span><br><span class="line">                        p = ac.nxt[p][s[x][l] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">                        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> o = p; o; o = ac.fail[o]) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (ac.cnt[o]) &#123;</span><br><span class="line">                                cnt += ac.cnt[o];</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (cnt) &#123;</span><br><span class="line">                            p = <span class="number">-1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (~p &amp;&amp; i + len[x] &lt;= k)</span><br><span class="line">                        <span class="built_in">uadd</span>(dp[i + len[x]][p], dp[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= ac.tot; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!ac.cnt[i])</span><br><span class="line">                <span class="built_in">uadd</span>(ans, dp[k][i]);</span><br><span class="line">        <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sum = ac.tot + <span class="number">1</span>;</span><br><span class="line">        <span class="function">matrix <span class="title">base</span><span class="params">(sum * <span class="number">2</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= ac.tot; ++i)</span><br><span class="line">            base.a[<span class="built_in">posi</span>(i, <span class="number">1</span>)][<span class="built_in">posi</span>(i, <span class="number">0</span>)] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= ac.tot; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ac.cnt[i])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">1</span>; x &lt;= n; ++x) &#123;</span><br><span class="line">                <span class="type">int</span> p = i;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>; l &lt;= len[x]; ++l) &#123;</span><br><span class="line">                    p = ac.nxt[p][s[x][l] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">                    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">                    <span class="comment">// ##sb-mistakes## AC自动机在做多模式匹配的时候**一定要跳fail指针**不然会**漏遍历很多东西**（AC自动机白学了）！！！</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> o = p; o; o = ac.fail[o]) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (ac.cnt[o]) &#123;</span><br><span class="line">                            cnt += ac.cnt[o];</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (cnt) &#123;</span><br><span class="line">                        p = <span class="number">-1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="number">-1</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (len[x] == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="built_in">uadd</span>(base.a[<span class="built_in">posi</span>(i, <span class="number">0</span>)][<span class="built_in">posi</span>(p, <span class="number">0</span>)], <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">// ##sb-mistakes## 写矩阵快速幂优化dp（尤其是dp[i]依赖于dp[i-2]这种）的时候一定要算好，不能重复加了</span></span><br><span class="line">                    <span class="comment">// uadd(base.a[posi(i, 1)][posi(p, 1)], 1);</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">uadd</span>(base.a[<span class="built_in">posi</span>(i, <span class="number">0</span>)][<span class="built_in">posi</span>(p, <span class="number">1</span>)], <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">matrix <span class="title">tmp</span><span class="params">(sum * <span class="number">2</span>)</span></span>;</span><br><span class="line">        tmp.a[<span class="number">1</span>][<span class="built_in">posi</span>(<span class="number">0</span>, <span class="number">0</span>)] = <span class="number">1</span>;</span><br><span class="line">        tmp = tmp * <span class="built_in">qpow</span>(base, k);</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= ac.tot; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!ac.cnt[i])</span><br><span class="line">                <span class="built_in">uadd</span>(ans, tmp.a[<span class="number">1</span>][<span class="built_in">posi</span>(i, <span class="number">0</span>)]);</span><br><span class="line">        <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P7154 Sleeping Cows P 题解</title>
    <url>/2021/11/25/sol-p7154/</url>
    <content><![CDATA[<h2 id="P7154-Sleeping-Cows-P-题解"><a href="#P7154-Sleeping-Cows-P-题解" class="headerlink" title="P7154 Sleeping Cows P 题解"></a>P7154 Sleeping Cows P 题解</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P7154">题目链接</a></p>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>先分析性质。首先排序不影响答案所以将其排序。若$t_i$所能匹配到的最大$s$的下标为$x$，则如果放弃$t_i$就意味着$s_1$到$s_x$都要被匹配。所以在此思路上$dp$则需要维护两个指针分别指向最小的还没考虑的$s$和$t$，每次选择较小的一边进行更新。不妨将两个数组合并顺序去做。</p>
<p>考虑$dp$，设$dp_{i,j,0/1}$表示考虑到新数组的第$i$个数，目前有$j$个$s$被选入匹配但还没确定匹配谁，$1$到$i-1$中是否都已经被选入的方案数。那么得到转移方程：</p>
<p>若元素$i$在$s$中，则</p>
<script type="math/tex; mode=display">
    \begin{align}
    dp_{i,j,0} &= dp_{i-1,j-1,0} + dp_{i-1,j,0} + dp_{i-1,j,1} \\
    dp_{i,j,1} &= dp_{i-1,j-1,1}
    \end{align}</script><p>若元素$i$在$t$中，则</p>
<script type="math/tex; mode=display">
    \begin{align}
    dp_{i,j,0} &= (j+1)dp_{i-1,j+1,0} \\
    dp_{i,j,1} = dp_{i-1,j,1} + (j+1)dp_{i-1,j+1,1}
    \end{align}</script><p>最终答案就是 $dp<em>{n,0,0} + dp</em>{n,0,1}$。</p>
<p>时间复杂度$O(n^2)$。</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P7154.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/solution/P7154</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">6e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, op;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x == o.x ? op &lt; o.op : x &lt; o.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, s[MAXN], t[MAXN], dp[<span class="number">2</span>][MAXN][<span class="number">2</span>];</span><br><span class="line">node a[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> &amp;x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= MOD)</span><br><span class="line">        x -= MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(s[i]), a[++m] = &#123;s[i], <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(t[i]), a[++m] = &#123;t[i], <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + m + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> u = <span class="number">0</span>;</span><br><span class="line">    dp[u ^ <span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i, u ^= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp[u], <span class="number">0</span>, <span class="built_in">sizeof</span>(dp[u]));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i].op == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">add</span>(dp[u][j][<span class="number">0</span>], dp[u ^ <span class="number">1</span>][j][<span class="number">0</span>]);</span><br><span class="line">                <span class="built_in">add</span>(dp[u][j][<span class="number">0</span>], dp[u ^ <span class="number">1</span>][j][<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span> (j) &#123;</span><br><span class="line">                    <span class="built_in">add</span>(dp[u][j][<span class="number">0</span>], dp[u ^ <span class="number">1</span>][j - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">                    <span class="built_in">add</span>(dp[u][j][<span class="number">1</span>], dp[u ^ <span class="number">1</span>][j - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">add</span>(dp[u][j][<span class="number">0</span>], dp[u ^ <span class="number">1</span>][j + <span class="number">1</span>][<span class="number">0</span>] * (j + <span class="number">1</span>) % MOD);</span><br><span class="line">                <span class="built_in">add</span>(dp[u][j][<span class="number">1</span>], dp[u ^ <span class="number">1</span>][j + <span class="number">1</span>][<span class="number">1</span>] * (j + <span class="number">1</span>) % MOD);</span><br><span class="line">                <span class="built_in">add</span>(dp[u][j][<span class="number">1</span>], dp[u ^ <span class="number">1</span>][j][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">add</span>(sum, dp[u ^ <span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">add</span>(sum, dp[u ^ <span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">write</span>(sum), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>CF575A Fibonotci 题解</title>
    <url>/2021/11/24/sol-cf575a/</url>
    <content><![CDATA[<h2 id="CF575A-Fibonotci-题解"><a href="#CF575A-Fibonotci-题解" class="headerlink" title="CF575A Fibonotci 题解"></a>CF575A Fibonotci 题解</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/CF575A">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>$K \le 10^{18}$ 显然矩阵快速幂优化。矩阵转移方程如下：</p>
<script type="math/tex; mode=display">
    \begin{bmatrix}
        f_i & f_{i-1}
    \end{bmatrix}
    =
    \begin{bmatrix}
        f_{i-1} & f_{i-2}
    \end{bmatrix}
    \begin{pmatrix}
        s_{i-1} & 1 \\
        s_{i-2} & 0
    \end{pmatrix}</script><p>并套路地设</p>
<script type="math/tex; mode=display">
    M_i =
    \begin{pmatrix}
        s_{i-1} & 1 \\
        s_{i-2} & 0
    \end{pmatrix}</script><p>最终答案即为</p>
<script type="math/tex; mode=display">
    \begin{bmatrix}
        1 & 0
    \end{bmatrix}
    \times
    \prod_{i=1}^{k}{
        \begin{pmatrix}
            s_{i-1} & 1 \\
            s_{i-2} & 0
        \end{pmatrix}
    }
    =
    \begin{bmatrix}
        1 & 0
    \end{bmatrix}
    \times
    \prod_{i=1}^{k}{M_i}</script><p>由于函数大部分具有周期性，不妨先按照分成若干个类似$[i\cdot n, (i+1)\cdot n)$的区间分别处理。</p>
<p>对于未修改过的区间直接预处理$[0,n)$的矩阵乘积并快速幂计算。</p>
<p>考虑修改的区间。为了避免对一个$s<em>i$的修改影响到两个不同的区间，可以先将对$s_i$的修改映射到对矩阵$M</em>{i+1}$和$M_{i+2}$的修改。然后发现处理一个区间时需要多次单点修改和一次区间查询，用线段树维护即可。</p>
<p>需要注意的是一些特判（基本上是$k \lt n$的情况）。</p>
<p>时间复杂度$O((n + m) (\log{n} + \log{k}))$。</p>
<p><del>特判不取模，爆零两行泪/kk</del></p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           CF575A.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/CF575A</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> pii = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> t, s1, s2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, k, p, s[MAXN];</span><br><span class="line">pii a[MAXN];</span><br><span class="line">node b[MAXN * <span class="number">2</span>];</span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">return</span> x &gt;= p ? x - p : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">matrix</span>() &#123; a[<span class="number">0</span>][<span class="number">0</span>] = a[<span class="number">0</span>][<span class="number">1</span>] = a[<span class="number">1</span>][<span class="number">0</span>] = a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="built_in">matrix</span>(<span class="type">int</span> x) &#123; a[<span class="number">0</span>][<span class="number">0</span>] = a[<span class="number">1</span>][<span class="number">1</span>] = x, a[<span class="number">0</span>][<span class="number">1</span>] = a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="built_in">matrix</span>(<span class="type">int</span> s1, <span class="type">int</span> s2) &#123; a[<span class="number">0</span>][<span class="number">0</span>] = s2, a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>, a[<span class="number">1</span>][<span class="number">0</span>] = s1, a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>; &#125;</span><br><span class="line">    matrix <span class="keyword">operator</span>*(<span class="type">const</span> matrix &amp;o) <span class="type">const</span> &#123;</span><br><span class="line">        matrix ret;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; ++k)</span><br><span class="line">                    ret.a[i][j] = <span class="built_in">add</span>(ret.a[i][j], a[i][k] * o.a[k][j] % p);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> matrix <span class="keyword">operator</span>^(matrix x, <span class="type">int</span> y) &#123;</span><br><span class="line">        matrix ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x)</span><br><span class="line">            <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ret = ret * x;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> li (i &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ri (i &lt;&lt; 1) | 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson li, l, mid</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson ri, mid + 1, r</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segment_tree</span> &#123;</span><br><span class="line">    matrix nd[MAXN * <span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        nd[i] = nd[li] * nd[ri];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> p, matrix v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">void</span>(nd[i] = v);</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (p &lt;= mid)</span><br><span class="line">            <span class="built_in">update</span>(lson, p, v);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">update</span>(rson, p, v);</span><br><span class="line">        <span class="built_in">pushup</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">matrix <span class="title">query</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">            <span class="keyword">return</span> nd[i];</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        matrix ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid)</span><br><span class="line">            ret = ret * <span class="built_in">query</span>(lson, ql, qr);</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid)</span><br><span class="line">            ret = ret * <span class="built_in">query</span>(rson, ql, qr);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">segment_tree tr;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(k), <span class="built_in">read</span>(p);</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(s[i]);</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">read</span>(a[i].first), <span class="built_in">read</span>(a[i].second);</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + m + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">1</span> &amp;&amp; a[i].first + <span class="number">1</span> == a[i - <span class="number">1</span>].first + <span class="number">2</span>)</span><br><span class="line">            b[++cnt] = &#123;a[i].first + <span class="number">1</span>, a[i - <span class="number">1</span>].second, a[i].second&#125;;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span> || a[i].first + <span class="number">1</span> != a[i - <span class="number">1</span>].first + <span class="number">2</span>)</span><br><span class="line">            b[++cnt] = &#123;a[i].first + <span class="number">1</span>, s[(a[i].first - <span class="number">1</span>) % n], a[i].second&#125;;</span><br><span class="line">        <span class="keyword">if</span> (i == m || a[i].first + <span class="number">2</span> != a[i + <span class="number">1</span>].first + <span class="number">1</span>)</span><br><span class="line">            b[++cnt] = &#123;a[i].first + <span class="number">2</span>, a[i].second, s[(a[i].first + <span class="number">1</span>) % n]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (cnt &amp;&amp; b[cnt].t &gt; k)</span><br><span class="line">        --cnt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        tr.<span class="built_in">update</span>(<span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>, i, <span class="built_in">matrix</span>(s[(i + n - <span class="number">2</span>) % n], s[(i + n - <span class="number">1</span>) % n]));</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span> || k == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">write</span>(k % p), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>), <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; n) &#123;</span><br><span class="line">        matrix ret;</span><br><span class="line">        ret.a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">write</span>((ret * tr.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">2</span>, k)).a[<span class="number">0</span>][<span class="number">0</span>]), <span class="built_in">putchar</span>(<span class="string">&#x27;\0&#x27;</span>), <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    matrix sum = tr.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    matrix base = tr.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">2</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> pos = <span class="number">1</span>, pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (pos &lt;= cnt) &#123;</span><br><span class="line">        <span class="type">int</span> cur = b[pos].t / n;</span><br><span class="line">        base = base * (sum ^ (cur - pre - <span class="number">1</span>)), pre = cur;</span><br><span class="line">        <span class="type">int</span> cl = <span class="built_in">max</span>(<span class="number">2ll</span>, cur * n), cr = <span class="built_in">min</span>(k, cur * n + n - <span class="number">1</span>), lst = pos;</span><br><span class="line">        <span class="keyword">while</span> (pos &lt;= cnt &amp;&amp; cl &lt;= b[pos].t &amp;&amp; b[pos].t &lt;= cr) &#123;</span><br><span class="line">            tr.<span class="built_in">update</span>(<span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>, b[pos].t % n, <span class="built_in">matrix</span>(b[pos].s1, b[pos].s2));</span><br><span class="line">            ++pos;</span><br><span class="line">        &#125;</span><br><span class="line">        base = base * tr.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>, cl % n, cr % n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = lst; j &lt; pos; ++j)</span><br><span class="line">            tr.<span class="built_in">update</span>(<span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>, b[j].t % n, <span class="built_in">matrix</span>(s[(b[j].t - <span class="number">2</span>) % n], s[(b[j].t - <span class="number">1</span>) % n]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cur = k / n;</span><br><span class="line">    <span class="keyword">if</span> (pre &lt; cur) &#123;</span><br><span class="line">        base = base * (sum ^ (cur - pre - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = cur * n; i &lt;= k; ++i)</span><br><span class="line">            base = base * <span class="built_in">matrix</span>(s[(i - <span class="number">2</span>) % n], s[(i - <span class="number">1</span>) % n]);</span><br><span class="line">    &#125;</span><br><span class="line">    matrix ret;</span><br><span class="line">    ret.a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    ret = ret * base;</span><br><span class="line">    <span class="built_in">write</span>(ret.a[<span class="number">0</span>][<span class="number">0</span>]), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P6144 Help Yourself 题解</title>
    <url>/2021/11/23/sol-p6144/</url>
    <content><![CDATA[<h2 id="P6144-Help-Yourself-题解"><a href="#P6144-Help-Yourself-题解" class="headerlink" title="P6144 Help Yourself 题解"></a>P6144 Help Yourself 题解</h2><span id="more"></span>
<p><del>应该是第一次在学校午自习时卷OI（然后sxy走进来看了我一眼啥也没说）</del></p>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P6144">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>对于这种若干区间求值的题目，肯定先按照左端点或者右端点排个序。</p>
<p>不妨先来考虑对于$k=1$的情况dp状态怎么设。套路地设$dp_i$表示以$i$为当前覆盖的最右端点的联通块数目之和，下面要加入一条线段$[l,r]$，思考插入这条线段对$dp$值的影响。对于$i\lt r$的所有$dp_i$不会被影响，而对每个$0 \le i \lt l$，$dp_r$的值需加上$dp_i + 1$，对每个$l \le i \lt r$，$dp_r$的值需加上$dp_i$。最后对于$i \gt r$，显然插入这么一条线段不会影响到其右断点，但取该线段和不取该线段各有一种可能，所以要将整个区间乘上2.</p>
<p>分析到这里，如何维护$dp$就一目了然了：使用线段树维护单点加法和区间乘法以及区间求和即可。</p>
<p>接下来计算$k \neq 1$的情况。不难发现每个$dp<em>{k,i}$都可以被表示成$\sum\limits_i{b_i^k}$的形式（$b_i$是每种子集的联通块数目）。而区间乘上2直接做，求和也直接线段树，求$\sum\limits</em>{i=0}^{l-1}{(dp<em>{k,i}+1)}$用二项式定理拆开得到$\sum\limits</em>{j=0}^{k}\sum\limits<em>{i=0}^{l-1}{\binom{k}{j} \times dp</em>{j,i}}$即可得到答案。</p>
<p>所以时间复杂度$O(k^2n\log{n})$随便过。<del>这比前面两道黑题好些多了</del></p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P6144.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P6144</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXK = <span class="number">11</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">return</span> x &gt;= MOD ? x - MOD : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> l == o.l ? r &lt; o.r : l &lt; o.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> li (i &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ri (i &lt;&lt; 1) | 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson li, l, mid</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson ri, mid + 1, r</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segment_tree</span> &#123;</span><br><span class="line">    <span class="type">int</span> sum[MAXM * <span class="number">4</span>], tag[MAXM * <span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        sum[i] = <span class="built_in">add</span>(sum[li], sum[ri]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getdown</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        sum[i] = sum[i] * val % MOD;</span><br><span class="line">        tag[i] = tag[i] * val % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tag[i] != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">getdown</span>(li, tag[i]);</span><br><span class="line">            <span class="built_in">getdown</span>(ri, tag[i]);</span><br><span class="line">            tag[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        sum[i] = <span class="number">0</span>; tag[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">void</span>(sum[i] = x);</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(lson, x), <span class="built_in">build</span>(rson, x);</span><br><span class="line">        <span class="built_in">pushup</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> q, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">void</span>(sum[i] = <span class="built_in">add</span>(sum[i], val));</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">pushdown</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (q &lt;= mid)</span><br><span class="line">            <span class="built_in">update</span>(lson, q, val);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">update</span>(rson, q, val);</span><br><span class="line">        <span class="built_in">pushup</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ql &gt; qr)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getdown</span>(i, val);</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">pushdown</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid)</span><br><span class="line">            <span class="built_in">modify</span>(lson, ql, qr, val);</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid)</span><br><span class="line">            <span class="built_in">modify</span>(rson, ql, qr, val);</span><br><span class="line">        <span class="built_in">pushup</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ql &gt; qr)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">            <span class="keyword">return</span> sum[i];</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, ret = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">pushdown</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid)</span><br><span class="line">            ret = <span class="built_in">add</span>(ret, <span class="built_in">query</span>(lson, ql, qr));</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid)</span><br><span class="line">            ret = <span class="built_in">add</span>(ret, <span class="built_in">query</span>(rson, ql, qr));</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, k, c[MAXK][MAXK];</span><br><span class="line">node a[MAXN];</span><br><span class="line">segment_tree tr[MAXK];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(k), m = n * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(a[i].l), <span class="built_in">read</span>(a[i].r);</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">    c[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">        c[i][<span class="number">0</span>] = c[i][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; ++j)</span><br><span class="line">            c[i][j] = <span class="built_in">add</span>(c[i - <span class="number">1</span>][j], c[i - <span class="number">1</span>][j - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= k; ++i)</span><br><span class="line">        tr[i].<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, m, <span class="number">0</span>);</span><br><span class="line">    tr[<span class="number">0</span>].<span class="built_in">update</span>(<span class="number">1</span>, <span class="number">0</span>, m, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = k; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">            <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt;= j; ++l)</span><br><span class="line">                sum = <span class="built_in">add</span>(sum, c[j][l] * tr[l].<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">0</span>, m, <span class="number">0</span>, a[i].l - <span class="number">1</span>) % MOD);</span><br><span class="line">            sum = <span class="built_in">add</span>(sum, tr[j].<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">0</span>, m, a[i].l, a[i].r));</span><br><span class="line">            tr[j].<span class="built_in">update</span>(<span class="number">1</span>, <span class="number">0</span>, m, a[i].r, sum);</span><br><span class="line">            tr[j].<span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">0</span>, m, a[i].r + <span class="number">1</span>, m, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">write</span>(tr[k].<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">0</span>, m, <span class="number">1</span>, m)), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>CF710F String Set Queries 题解</title>
    <url>/2021/11/22/sol-cf710f/</url>
    <content><![CDATA[<h2 id="CF710F-String-Set-Queries-题解"><a href="#CF710F-String-Set-Queries-题解" class="headerlink" title="CF710F String Set Queries 题解"></a>CF710F String Set Queries 题解</h2><span id="more"></span>
<h3 id="又卷出来一道黑题哈哈哈"><a href="#又卷出来一道黑题哈哈哈" class="headerlink" title="又卷出来一道黑题哈哈哈"></a><del>又卷出来一道黑题哈哈哈</del></h3><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/CF710F">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>首先看到多模匹配想到AC自动机。</p>
<p>这个强制在线看起来很麻烦的样子，因为AC自动机必须要离线下来才能build。所以就引入一种新的算法叫做“二进制分组”。</p>
<blockquote>
<h3 id="二进制分组"><a href="#二进制分组" class="headerlink" title="二进制分组"></a>二进制分组</h3><p><del>这个算法一看名字就很$\log$</del></p>
<p>维护一个stack，里面的值都是2的次幂。每次操作在栈顶插入一个1，如果栈顶的两个数相同就将其合并，并改为两个数的和。查询的时候遍历整个stack对每个值进行查询。</p>
<p>这样假设每次合并和查询stack中一个值的复杂度都是$O(x)$的（这里$x$指的是栈内当前值的大小）显然查询的复杂度是$O(x)$的，然后插入的复杂度是$O(x\log{n})$，因为每个插入的数只会被合并$\log{n}$次。总复杂度为$O(qx\log{n})$。</p>
</blockquote>
<p>而在这道题中，$qx = \sum{|S|} = 3 \times 10^5$，所以显然是能过的。</p>
<p>于是这道题本身并不算难，但是评黑的原因我认为是它<strong>毒瘤卡空间！！！</strong></p>
<p>关于我代码中卡空间的<del>奇技淫巧</del>就是将AC自动机的节点开成内存池，动态分配（代码中<code>node* malloc_p()</code>的作用就在此）。还有就是注意AC自动机在构建的时候把$cnt$数组预处理好，这样就不用每次跳$fail$指针了（我代码一开始就在这里TLE了）。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           CF710F.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/CF710F</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> lli = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXK = <span class="number">22</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFI = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">bool</span> m_be;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> cnt, fail, nxt[<span class="number">26</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cnt = fail = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fill</span>(nxt, nxt + <span class="number">26</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> ntot, ntop;</span><br><span class="line">node nnd[MAXN];</span><br><span class="line">node *buf[MAXN];</span><br><span class="line"><span class="function">node* <span class="title">malloc_p</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ntop ? buf[ntop--] : &amp;nnd[++ntot];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ac_automaton</span> &#123;</span><br><span class="line">    <span class="type">int</span> tot;</span><br><span class="line">    node *nd[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        nd[tot = <span class="number">0</span>] = <span class="built_in">malloc_p</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= tot; ++i)</span><br><span class="line">            nd[i]-&gt;<span class="built_in">clear</span>(), buf[++ntop] = nd[i];</span><br><span class="line">        nd[tot = <span class="number">0</span>] = <span class="built_in">malloc_p</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> rt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; s[i]; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!nd[rt]-&gt;nxt[s[i] - <span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">                nd[rt]-&gt;nxt[s[i] - <span class="string">&#x27;a&#x27;</span>] = (nd[++tot] = <span class="built_in">malloc_p</span>(), tot);</span><br><span class="line">            rt = nd[rt]-&gt;nxt[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        ++nd[rt]-&gt;cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>())</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            <span class="keyword">if</span> (nd[<span class="number">0</span>]-&gt;nxt[i])</span><br><span class="line">                que.<span class="built_in">push</span>(nd[<span class="number">0</span>]-&gt;nxt[i]);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            nd[u]-&gt;cnt += nd[nd[u]-&gt;fail]-&gt;cnt;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nd[u]-&gt;nxt[i]) &#123;</span><br><span class="line">                    nd[nd[u]-&gt;nxt[i]]-&gt;fail = nd[nd[u]-&gt;fail]-&gt;nxt[i];</span><br><span class="line">                    que.<span class="built_in">push</span>(nd[u]-&gt;nxt[i]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    nd[u]-&gt;nxt[i] = nd[nd[u]-&gt;fail]-&gt;nxt[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">lli <span class="title">query</span><span class="params">(<span class="type">char</span> *s)</span> </span>&#123;</span><br><span class="line">        lli ret = <span class="number">0</span>, p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; s[i]; ++i) &#123;</span><br><span class="line">            p = nd[p]-&gt;nxt[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            ret += nd[p]-&gt;cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">group</span> &#123;</span><br><span class="line">    string dat[MAXN];</span><br><span class="line">    ac_automaton ac[MAXK];</span><br><span class="line">    <span class="type">int</span> n, top, sl[MAXK], sr[MAXK];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; MAXK; ++i)</span><br><span class="line">            ac[i].<span class="built_in">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> *s)</span> </span>&#123;</span><br><span class="line">        dat[++n] = s;</span><br><span class="line">        ++top, sl[top] = n, sr[top] = n;</span><br><span class="line">        ac[top].<span class="built_in">clear</span>(), ac[top].<span class="built_in">insert</span>(s), ac[top].<span class="built_in">build</span>();</span><br><span class="line">        <span class="keyword">while</span> (top &gt; <span class="number">1</span> &amp;&amp; sr[top] - sl[top] == sr[top - <span class="number">1</span>] - sl[top - <span class="number">1</span>]) &#123;</span><br><span class="line">            sr[top - <span class="number">1</span>] = sr[top], ac[top--].<span class="built_in">clear</span>();</span><br><span class="line">            ac[top].<span class="built_in">clear</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = sl[top]; i &lt;= sr[top]; ++i)</span><br><span class="line">                ac[top].<span class="built_in">insert</span>(dat[i].<span class="built_in">c_str</span>());</span><br><span class="line">            ac[top].<span class="built_in">build</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">lli <span class="title">query</span><span class="params">(<span class="type">char</span> *s)</span> </span>&#123;</span><br><span class="line">        lli ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= top; ++i)</span><br><span class="line">            ret += ac[i].<span class="built_in">query</span>(s);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> m, opt;</span><br><span class="line"><span class="type">char</span> s[MAXN];</span><br><span class="line">group add, sub;</span><br><span class="line"><span class="type">bool</span> m_ed;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">debug</span>(<span class="string">&quot;memory = %.5lfMB&quot;</span>, (&amp;m_ed - &amp;m_be) / <span class="number">1024.0</span> / <span class="number">1024.0</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="type">int</span> mm = m;</span><br><span class="line">    add.<span class="built_in">init</span>(), sub.<span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%s&quot;</span>, &amp;opt, s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            add.<span class="built_in">insert</span>(s + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">2</span>) &#123;</span><br><span class="line">            sub.<span class="built_in">insert</span>(s + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, add.<span class="built_in">query</span>(s + <span class="number">1</span>) - sub.<span class="built_in">query</span>(s + <span class="number">1</span>));</span><br><span class="line">            <span class="built_in">fflush</span>(stdout);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4632 New Home 题解</title>
    <url>/2021/11/22/sol-p4632/</url>
    <content><![CDATA[<h2 id="P4632-New-Home-题解"><a href="#P4632-New-Home-题解" class="headerlink" title="P4632 New Home 题解"></a>P4632 New Home 题解</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4632">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>把询问离线下来，考虑3种操作：新开一家商店，关掉一家商店，查询一个点的不方便指数。</p>
<p>先考虑查询。显然具有二分性，考虑判断一个区间 $[l,r]$ 是否包含了所有的颜色。这种区间统计颜色的题目有一个套路的解法，即对于一个点$i$，保存 $pre<em>i$ 表示 $i$ 的上一个相同颜色出现的位置，区间 $[l,r]$ 的答案即为 $\sum\limits</em>{i=l}^{r}{(pre_i \lt l)}$ 。</p>
<p>但是这样不太便于维护，于是思考到$pre$数组的另一个性质：若$\min\limits_{i=r+1}^{n}{pre_i} \lt l$，则说明必有一种颜色没有出现在$[l,r]$中。而我们二分+判断并不需要统计颜色的<strong>个数</strong>，而是只需要统计<strong>是否为k个</strong>。</p>
<p>于是就很容易维护这个$pre$数组并统计答案：将$pre$放在最小值线段树上即可。注意如果某个颜色没有出现在$[r+1,n]$的话会少被考虑到，所以在最左边和最右边各开一个大节点，作为所有颜色公用。</p>
<p>但是这道题有个很恶心的地方，在于每个点可能有多个不同颜色的商店。所以一种做法为在线段树的每个叶子节点开一个set暴力维护。</p>
<p>最后对于修改操作也只需要对每个颜色暴力维护一个set，找到前驱和后继并在线段树上修改即可。</p>
<p>时间复杂度$O(n\log^3{n})$<del>（跑得飞快）</del></p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4632.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4632</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> pii = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> t, p, c, id;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t &lt; o.t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span> &#123;</span><br><span class="line">    <span class="type">int</span> t, p, id;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> query &amp;o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t &lt; o.t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> li (i &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ri (i &lt;&lt; 1) | 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson li, l, mid</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson ri, mid + 1, r</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segment_tree</span> &#123;</span><br><span class="line">    <span class="type">int</span> mn[MAXN * <span class="number">12</span>];</span><br><span class="line">    set&lt;pii&gt; st[MAXN * <span class="number">3</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        mn[i] = <span class="built_in">min</span>(mn[li], mn[ri]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        mn[i] = INFL;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(lson), <span class="built_in">build</span>(rson);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> q, <span class="type">int</span> c, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            st[l].<span class="built_in">insert</span>(&#123;p, c&#125;);</span><br><span class="line">            mn[i] = st[l].<span class="built_in">size</span>() ? st[l].<span class="built_in">begin</span>()-&gt;first : INFL;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (q &lt;= mid)</span><br><span class="line">            <span class="built_in">insert</span>(lson, q, c, p);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">insert</span>(rson, q, c, p);</span><br><span class="line">        <span class="built_in">pushup</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> q, <span class="type">int</span> c, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            st[l].<span class="built_in">erase</span>(&#123;p, c&#125;);</span><br><span class="line">            mn[i] = st[l].<span class="built_in">size</span>() ? st[l].<span class="built_in">begin</span>()-&gt;first : INFL;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (q &lt;= mid)</span><br><span class="line">            <span class="built_in">erase</span>(lson, q, c, p);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">erase</span>(rson, q, c, p);</span><br><span class="line">        <span class="built_in">pushup</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">            <span class="keyword">return</span> mn[i];</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, ret = INFL;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid)</span><br><span class="line">            ret = <span class="built_in">min</span>(ret, <span class="built_in">query</span>(lson, ql, qr));</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid)</span><br><span class="line">            ret = <span class="built_in">min</span>(ret, <span class="built_in">query</span>(rson, ql, qr));</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, k, q, sig, len;</span><br><span class="line"><span class="type">int</span> pos[MAXN * <span class="number">3</span>], answ[MAXN];</span><br><span class="line">node bd[MAXN * <span class="number">2</span>];</span><br><span class="line">query qr[MAXN];</span><br><span class="line">multiset&lt;<span class="type">int</span>&gt; col[MAXN];</span><br><span class="line">segment_tree tr;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(node x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.id &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        col[x.c].<span class="built_in">insert</span>(x.p);</span><br><span class="line">        <span class="keyword">if</span> (col[x.c].<span class="built_in">count</span>(x.p) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">auto</span> pre = <span class="built_in">prev</span>(col[x.c].<span class="built_in">lower_bound</span>(x.p));</span><br><span class="line">            <span class="keyword">auto</span> nxt = col[x.c].<span class="built_in">upper_bound</span>(x.p);</span><br><span class="line">            tr.<span class="built_in">erase</span>(<span class="number">1</span>, <span class="number">1</span>, sig, *nxt, x.c, *pre);</span><br><span class="line">            tr.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="number">1</span>, sig, *nxt, x.c, x.p);</span><br><span class="line">            tr.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="number">1</span>, sig, x.p, x.c, *pre);            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        col[x.c].<span class="built_in">erase</span>(col[x.c].<span class="built_in">find</span>(x.p));</span><br><span class="line">        <span class="keyword">if</span> (col[x.c].<span class="built_in">count</span>(x.p) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">auto</span> pre = <span class="built_in">prev</span>(col[x.c].<span class="built_in">lower_bound</span>(x.p));</span><br><span class="line">            <span class="keyword">auto</span> nxt = col[x.c].<span class="built_in">upper_bound</span>(x.p);</span><br><span class="line">            tr.<span class="built_in">erase</span>(<span class="number">1</span>, <span class="number">1</span>, sig, *nxt, x.c, x.p);</span><br><span class="line">            tr.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="number">1</span>, sig, *nxt, x.c, *pre);</span><br><span class="line">            tr.<span class="built_in">erase</span>(<span class="number">1</span>, <span class="number">1</span>, sig, x.p, x.c, *pre);            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> ps, <span class="type">int</span> ln)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> u = <span class="built_in">lower_bound</span>(pos + <span class="number">1</span>, pos + sig + <span class="number">1</span>, ps - ln) - pos - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> v = <span class="built_in">upper_bound</span>(pos + <span class="number">1</span>, pos + sig + <span class="number">1</span>, ps + ln) - pos;</span><br><span class="line">    <span class="keyword">return</span> tr.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, sig, v, sig) &gt; u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(k), <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> x, t, a, b;</span><br><span class="line">        <span class="built_in">read</span>(x), <span class="built_in">read</span>(t), <span class="built_in">read</span>(a), <span class="built_in">read</span>(b);</span><br><span class="line">        bd[++len] = &#123;a, x, t, i&#125;;</span><br><span class="line">        bd[++len] = &#123;b + <span class="number">1</span>, x, t, -i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; ++i)</span><br><span class="line">        <span class="built_in">read</span>(qr[i].p), <span class="built_in">read</span>(qr[i].t), qr[i].id = i;</span><br><span class="line">    pos[++sig] = INFL;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">        pos[++sig] = bd[i].p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; ++i)</span><br><span class="line">        pos[++sig] = qr[i].p;</span><br><span class="line">    <span class="built_in">sort</span>(pos + <span class="number">1</span>, pos + sig + <span class="number">1</span>);</span><br><span class="line">    sig = <span class="built_in">unique</span>(pos + <span class="number">1</span>, pos + sig + <span class="number">1</span>) - pos - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">        bd[i].p = <span class="built_in">lower_bound</span>(pos + <span class="number">1</span>, pos + sig + <span class="number">1</span>, bd[i].p) - pos;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; ++i)</span><br><span class="line">        qr[i].p = <span class="built_in">lower_bound</span>(pos + <span class="number">1</span>, pos + sig + <span class="number">1</span>, qr[i].p) - pos;</span><br><span class="line">    <span class="built_in">sort</span>(bd + <span class="number">1</span>, bd + len + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">sort</span>(qr + <span class="number">1</span>, qr + q + <span class="number">1</span>);</span><br><span class="line">    tr.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, sig);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">        col[i].<span class="built_in">insert</span>(<span class="number">0</span>), col[i].<span class="built_in">insert</span>(sig);</span><br><span class="line">        tr.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="number">1</span>, sig, sig, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cbd = <span class="number">1</span>, cqr = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (cqr &lt;= q) &#123;</span><br><span class="line">        <span class="keyword">while</span> (cbd &lt;= len &amp;&amp; bd[cbd].t &lt;= qr[cqr].t)</span><br><span class="line">            <span class="built_in">insert</span>(bd[cbd++]);</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">0x3f3f3f3f</span>, ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(pos[qr[cqr].p], mid))</span><br><span class="line">                r = mid - <span class="number">1</span>, ans = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        answ[qr[cqr++].id] = ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; ++i)</span><br><span class="line">        <span class="built_in">write</span>(answ[i]), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>CF702F T-Shirts 题解</title>
    <url>/2021/11/22/sol-cf702f/</url>
    <content><![CDATA[<h2 id="CF702F-T-Shirts-题解"><a href="#CF702F-T-Shirts-题解" class="headerlink" title="CF702F T-Shirts 题解"></a>CF702F T-Shirts 题解</h2><span id="more"></span>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/CF702F">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>首先不难想到朴素的做法，对每个人枚举所有T恤。但是这样显然无法进一步优化。</p>
<p>但是发现可以按顺序枚举所有T恤$i$，对每个人$j$若$v_j \ge c_i$则将$v_j$减去$c_i$，同时将$cnt_j$加一。</p>
<p>下面考虑如何用数据结构优化。我们需要一个可以查找第一个$\ge c_i$并且能支持区间减去$c_i$的数据结构，这个可以用平衡树做到。似乎其他人用的都是FHQ的做法，但我不会FHQ所以只能用splay代替了。</p>
<p>每次操作可以把整个区间分为三个部分：$[0,c_i)$，$[c_i,2c_i)$和$[2c_i,+\infty)$。第一个区间显然不需要操作，第二个区间我们暴力删除并重新插入，第三个区间维护一个tag标记。</p>
<p>这样看起来会T飞，然而来计算一下时间复杂度就会发现，对于一个在$[c_i,2c_i)$中的数每次减去$c_i$，相当于最少每次$\times \frac{1}{2}$，所以一个数$v_i$最多会被暴力修改$\log_2{v_i}$次，所以复杂度是可以接受的。</p>
<p>再来考虑如何在splay上操作。我们找到$c_i$的前驱，记为节点$u$，再找到$2c_i-1$的后继，记为节点$v$，只需要将$u$转到根节点，$v$转到根节点的右儿子，这样$v$和$v$的右儿子都在区间$[2c_i,+\infty)$中，维护tag并懒惰更新；而$v$的左儿子全都在区间$[c_i,2c_i)$中，只需遍历一遍重新插入即可；其他节点都不需要改动。</p>
<p>最后就是每次操作注意顺序，一定要先更新$[c_i,2c_i)$再更新$[2c_i,+\infty)$，不然你会发现懒惰标记打下去平衡树不满足二叉搜索树的性质了（别问我怎么知道的，我就因为这个调了一下午）。</p>
<p>时间复杂度$O(n\log^2{n})$，空间复杂度如果节点重复利用的话可以做到$O(n)$（具体见代码）。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           2021.11.21-1.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/CF702F</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(#x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="string">&quot;[%s:%d] &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> val, id, tag, cnt, tac;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> val == o.val ? id &lt; o.id : val &lt; o.val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> node &amp;o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> val == o.val &amp;&amp; id == o.id;</span><br><span class="line">    &#125;</span><br><span class="line">    node&amp; <span class="keyword">operator</span>+=(<span class="type">int</span> x) &#123;</span><br><span class="line">        val += x, tag += x, ++cnt, ++tac;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node&amp; <span class="keyword">operator</span>+=(<span class="type">const</span> node &amp;o) &#123;</span><br><span class="line">        val += o.tag, tag += o.tag;</span><br><span class="line">        cnt += o.tac, tac += o.tac;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">splay_tree</span> &#123;</span><br><span class="line">    node val[MAXN];</span><br><span class="line">    <span class="type">int</span> rt, tot, top, buf[MAXN];</span><br><span class="line">    <span class="type">int</span> siz[MAXN], fa[MAXN], ch[MAXN][<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">maintain</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; siz[x] = siz[ch[x][<span class="number">0</span>]] + siz[ch[x][<span class="number">1</span>]] + <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == ch[fa[x]][<span class="number">1</span>]; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; siz[x] = fa[x] = ch[x][<span class="number">0</span>] = ch[x][<span class="number">1</span>] = <span class="number">0</span>; val[x] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;; <span class="keyword">if</span> (x) buf[++top] = x; &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newnode</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> top ? buf[top--] : ++tot; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getdown</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> v)</span> </span>&#123; val[x] += v; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ch[x][<span class="number">0</span>]) val[ch[x][<span class="number">0</span>]] += val[x];</span><br><span class="line">        <span class="keyword">if</span> (ch[x][<span class="number">1</span>]) val[ch[x][<span class="number">1</span>]] += val[x];</span><br><span class="line">        val[x].tag = val[x].tac = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(fa[x]), <span class="built_in">pushdown</span>(x);</span><br><span class="line">        <span class="type">int</span> y = fa[x], z = fa[y], w = <span class="built_in">get</span>(x);</span><br><span class="line">        ch[y][w] = ch[x][w ^ <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (ch[x][w ^ <span class="number">1</span>]) fa[ch[x][w ^ <span class="number">1</span>]] = y;</span><br><span class="line">        ch[x][w ^ <span class="number">1</span>] = y, fa[y] = x, fa[x] = z;</span><br><span class="line">        <span class="keyword">if</span> (z) ch[z][y == ch[z][<span class="number">1</span>]] = x;</span><br><span class="line">        <span class="built_in">maintain</span>(y), <span class="built_in">maintain</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> r = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> f = fa[x]; f = fa[x], f != r; <span class="built_in">rotate</span>(x))</span><br><span class="line">            <span class="keyword">if</span> (fa[f] != r) <span class="built_in">rotate</span>(<span class="built_in">get</span>(x) == <span class="built_in">get</span>(f) ? f : x);</span><br><span class="line">        <span class="keyword">if</span> (r == <span class="number">0</span>) rt = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(node k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cur = rt, f = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">            <span class="built_in">pushdown</span>(cur);</span><br><span class="line">            f = cur;</span><br><span class="line">            cur = ch[cur][val[cur] &lt; k];</span><br><span class="line">        &#125;</span><br><span class="line">        cur = <span class="built_in">newnode</span>();</span><br><span class="line">        val[cur] = k;</span><br><span class="line">        fa[cur] = f;</span><br><span class="line">        <span class="keyword">if</span> (f) ch[f][val[f] &lt; k] = cur;</span><br><span class="line">        <span class="built_in">maintain</span>(cur), <span class="built_in">maintain</span>(f);</span><br><span class="line">        <span class="built_in">splay</span>(cur);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(node k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cur = rt;</span><br><span class="line">        <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">            <span class="built_in">pushdown</span>(cur);</span><br><span class="line">            <span class="keyword">if</span> (k == val[cur]) &#123;</span><br><span class="line">                <span class="built_in">splay</span>(cur);</span><br><span class="line">                <span class="keyword">return</span> cur;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = ch[cur][val[cur] &lt; k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cur = ch[rt][<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">pushdown</span>(rt), <span class="built_in">pushdown</span>(cur);</span><br><span class="line">        <span class="keyword">while</span> (ch[cur][<span class="number">1</span>])</span><br><span class="line">            cur = ch[cur][<span class="number">1</span>], <span class="built_in">pushdown</span>(cur);</span><br><span class="line">        <span class="keyword">if</span> (cur) <span class="built_in">splay</span>(cur);</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">nxt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cur = ch[rt][<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">pushdown</span>(rt), <span class="built_in">pushdown</span>(cur);</span><br><span class="line">        <span class="keyword">while</span> (ch[cur][<span class="number">0</span>])</span><br><span class="line">            cur = ch[cur][<span class="number">0</span>], <span class="built_in">pushdown</span>(cur);</span><br><span class="line">        <span class="keyword">if</span> (cur) <span class="built_in">splay</span>(cur);</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(node k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">find</span>(k);</span><br><span class="line">        <span class="keyword">if</span> (!ch[rt][<span class="number">0</span>] &amp;&amp; !ch[rt][<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="built_in">clear</span>(rt);</span><br><span class="line">            rt = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!ch[rt][<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="type">int</span> cur = rt;</span><br><span class="line">            rt = ch[cur][<span class="number">1</span>];</span><br><span class="line">            fa[rt] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">clear</span>(cur);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!ch[rt][<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="type">int</span> cur = rt;</span><br><span class="line">            rt = ch[cur][<span class="number">0</span>];</span><br><span class="line">            fa[rt] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">clear</span>(cur);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> cur = rt, x = <span class="built_in">pre</span>();</span><br><span class="line">            fa[ch[cur][<span class="number">1</span>]] = x;</span><br><span class="line">            ch[rt][<span class="number">1</span>] = ch[cur][<span class="number">1</span>];</span><br><span class="line">            <span class="built_in">clear</span>(cur);</span><br><span class="line">            <span class="built_in">maintain</span>(rt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">prev</span><span class="params">(node k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">insert</span>(k);</span><br><span class="line">        <span class="type">int</span> ret = <span class="built_in">pre</span>();</span><br><span class="line">        <span class="built_in">erase</span>(k);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(node k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">insert</span>(k);</span><br><span class="line">        <span class="type">int</span> ret = <span class="built_in">nxt</span>();</span><br><span class="line">        <span class="built_in">erase</span>(k);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, node *vals, <span class="type">int</span> &amp;len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!x) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">pushdown</span>(x);</span><br><span class="line">        <span class="built_in">dfs</span>(ch[x][<span class="number">0</span>], vals, len);</span><br><span class="line">        vals[++len] = val[x];</span><br><span class="line">        <span class="built_in">dfs</span>(ch[x][<span class="number">1</span>], vals, len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="type">static</span> node vals[MAXN];</span><br><span class="line">        <span class="type">int</span> u = <span class="built_in">prev</span>(&#123;cost, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="type">int</span> v = <span class="built_in">next</span>(&#123;cost * <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="built_in">splay</span>(u, <span class="number">0</span>), <span class="built_in">splay</span>(v, u);</span><br><span class="line">        <span class="built_in">dfs</span>(ch[v][<span class="number">0</span>], vals, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">            <span class="built_in">erase</span>(vals[i]);</span><br><span class="line">            vals[i].val -= cost;</span><br><span class="line">            vals[i].cnt++;</span><br><span class="line">            <span class="built_in">insert</span>(vals[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        val[v].val -= cost, val[v].cnt++;</span><br><span class="line">        <span class="keyword">if</span> (ch[v][<span class="number">1</span>]) <span class="built_in">getdown</span>(ch[v][<span class="number">1</span>], -cost);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">shirt</span> &#123;</span><br><span class="line">    <span class="type">int</span> c, q;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> shirt &amp;o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> q == o.q ? c &lt; o.c : q &gt; o.q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, b[MAXN], ans[MAXN];</span><br><span class="line">shirt a[MAXN];</span><br><span class="line">splay_tree splay;</span><br><span class="line">node tmp[MAXN];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(a[i].c), <span class="built_in">read</span>(a[i].q);</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">read</span>(b[i]);</span><br><span class="line">    splay.<span class="built_in">insert</span>(&#123;-INFL, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    splay.<span class="built_in">insert</span>(&#123;INFL, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        splay.<span class="built_in">insert</span>(&#123;b[i], i, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        splay.<span class="built_in">solve</span>(a[i].c);</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    splay.<span class="built_in">dfs</span>(splay.rt, tmp, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">        ans[tmp[i].id] = tmp[i].cnt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">write</span>(ans[i]), <span class="built_in">putchar</span>(i == m ? <span class="string">&#x27;\n&#x27;</span> : <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
</search>
