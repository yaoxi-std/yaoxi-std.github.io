<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于我</title>
    <url>/2021/11/20/about-me/</url>
    <content><![CDATA[<p><a href="https://yaoxi-std.github.io/">这里</a>是 yaoxi-std 的个人主页，<del>欢迎各位巨佬来爆踩</del>。</p>
<p>关于我的个人信息：</p>
<ul>
<li>姓名：yx</li>
<li>坐标：南京，江苏</li>
<li>就读学校：NFLS</li>
<li>年级：初三</li>
</ul>
<p><a href="https://www.luogu.com.cn/user/141573">我的洛谷账号</a></p>
<p><a href="https://atcoder.jp/users/yaoxi_std">我的AtCoder账号</a></p>
<p><a href="https://codeforces.com/profile/yaoxi">我的Codeforces账号</a></p>
<p><del>很菜对不对</del></p>
]]></content>
  </entry>
  <entry>
    <title>任务计划</title>
    <url>/2021/11/20/missions/</url>
    <content><![CDATA[<h2 id="每天都不会成为-emptyset"><a href="#每天都不会成为-emptyset" class="headerlink" title="每天都不会成为$\emptyset$"></a>每天都不会成为$\emptyset$</h2><h3 id="参考-tzc-wk-的做题记录"><a href="#参考-tzc-wk-的做题记录" class="headerlink" title="参考 tzc_wk 的做题记录"></a>参考 <a href="https://www.cnblogs.com/ET2006/p/rwjh.html"><font color=black>t</font><font color=red>zc_wk</font> 的做题记录</a></h3><h3 id="2021-11-20-Sat"><a href="#2021-11-20-Sat" class="headerlink" title="2021.11.20 (Sat)"></a>2021.11.20 (Sat)</h3><p><del><a href="/2021/11/25/sol-p3715/" title="P3715">P3715</a></del></p>
<h3 id="2021-11-21-Sun"><a href="#2021-11-21-Sun" class="headerlink" title="2021.11.21 (Sun)"></a>2021.11.21 (Sun)</h3><p><del><a href="/2021/11/22/sol-cf702f/" title="CF702F">CF702F</a></del> <del><a href="/2021/11/22/sol-cf710f/" title="CF710F">CF710F</a></del></p>
<h3 id="2021-11-22-Mon"><a href="#2021-11-22-Mon" class="headerlink" title="2021.11.22 (Mon)"></a>2021.11.22 (Mon)</h3><p><del><a href="/2021/11/22/sol-p4632/" title="P4632">P4632</a></del></p>
<h3 id="2021-11-23-Tue"><a href="#2021-11-23-Tue" class="headerlink" title="2021.11.23 (Tue)"></a>2021.11.23 (Tue)</h3><p><del><a href="/2021/11/23/sol-p6144/" title="P6144">P6144</a></del></p>
<h3 id="2021-11-24-Wed"><a href="#2021-11-24-Wed" class="headerlink" title="2021.11.24 (Wed)"></a>2021.11.24 (Wed)</h3><p><del><a href="/2021/11/24/sol-cf575a/" title="CF575A">CF575A</a></del></p>
<h3 id="2021-11-25-Thur"><a href="#2021-11-25-Thur" class="headerlink" title="2021.11.25 (Thur)"></a>2021.11.25 (Thur)</h3><p><del><a href="/2021/11/25/sol-p7154/" title="P7154">P7154</a></del> <del><a href="/2021/11/26/sol-p7155/" title="P7155">P7155</a></del></p>
<h3 id="2021-11-26-Fri"><a href="#2021-11-26-Fri" class="headerlink" title="2021.11.26 (Fri)"></a>2021.11.26 (Fri)</h3><p><del><a href="/2021/11/26/sol-bzoj2720/" title="BZOJ2720">BZOJ2720</a></del></p>
<h3 id="2021-11-27-Sat"><a href="#2021-11-27-Sat" class="headerlink" title="2021.11.27 (Sat)"></a>2021.11.27 (Sat)</h3><p><del><a href="/2021/11/27/sol-p2495/" title="P2495">P2495</a></del> <del><a href="/2021/11/27/sol-p3233/" title="P3233">P3233</a></del></p>
<h3 id="2021-11-28-Sun"><a href="#2021-11-28-Sun" class="headerlink" title="2021.11.28 (Sun)"></a>2021.11.28 (Sun)</h3><p><del><a href="/2021/11/28/sol-p3803/" title="P3803">P3803</a></del> P4721 P4606</p>
<h3 id="2021-11-29-Mon"><a href="#2021-11-29-Mon" class="headerlink" title="2021.11.29 (Mon)"></a>2021.11.29 (Mon)</h3><p>LOJ6184 CF639F</p>
<h3 id="2021-11-30-Tue"><a href="#2021-11-30-Tue" class="headerlink" title="2021.11.30 (Tue)"></a>2021.11.30 (Tue)</h3><p>CF1320E</p>
<h3 id="2021-12-1-Wed"><a href="#2021-12-1-Wed" class="headerlink" title="2021.12.1 (Wed)"></a>2021.12.1 (Wed)</h3><p>P4238</p>
<h3 id="待写的题解"><a href="#待写的题解" class="headerlink" title="待写的题解"></a>待写的题解</h3><p>$\emptyset$</p>
]]></content>
      <tags>
        <tag>schedules</tag>
      </tags>
  </entry>
  <entry>
    <title>SB错误</title>
    <url>/2021/11/20/sb-mistakes/</url>
    <content><![CDATA[<h2 id="一些sb的错误汇总"><a href="#一些sb的错误汇总" class="headerlink" title="一些sb的错误汇总"></a>一些sb的错误汇总</h2><ul>
<li>AC自动机在做多模式匹配的时候<strong>一定要跳fail指针</strong>不然会<strong>漏遍历很多东西</strong>（AC自动机白学了）！！！(2021.11.20, P3715)</li>
<li>写矩阵快速幂优化dp（尤其是dp[i]依赖于dp[i-2]这种）的时候一定要算好，不能重复加了(2021.11.20, P3715)</li>
<li>取模的题目遇到特判一定记得输出取模，不然等着被hack吧。。。(2021.11.24, CF575A)</li>
<li>换根$dp$不要在统计$pre$和$nxt$数组时就写$dfs$!!!数组整个改变!!!不然会死得很惨（指对着n=1000,m=100的大样例调1h）(2021.11.27, P3233)</li>
</ul>
]]></content>
      <tags>
        <tag>important</tag>
      </tags>
  </entry>
  <entry>
    <title>一些tips</title>
    <url>/2021/11/20/some-tips/</url>
    <content><![CDATA[<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ul>
<li>AC自动机build以后可以先把cnt数组预处理出来，这样就不用每次都跳fail指针了（也不知道算卡常还是说不预处理复杂度就不对，反正我的<a href="/2021/11/22/sol-cf710f/" title="CF710F">CF710F</a>就是加了这个优化才过了的）(2021.11.22, CF710F)</li>
</ul>
]]></content>
      <tags>
        <tag>important</tag>
      </tags>
  </entry>
  <entry>
    <title>NOI系列比赛获奖记录</title>
    <url>/2021/11/20/noi-records/</url>
    <content><![CDATA[<h2 id="弱弱的获奖记录"><a href="#弱弱的获奖记录" class="headerlink" title="弱弱的获奖记录"></a>弱弱的获奖记录</h2>]]></content>
      <tags>
        <tag>records</tag>
      </tags>
  </entry>
  <entry>
    <title>Important dates</title>
    <url>/2021/11/20/date-records/</url>
    <content><![CDATA[<h2 id="一些在OI中对我来说比较重要的时刻"><a href="#一些在OI中对我来说比较重要的时刻" class="headerlink" title="一些在OI中对我来说比较重要的时刻"></a>一些在OI中对我来说比较重要的时刻</h2>]]></content>
      <tags>
        <tag>records</tag>
      </tags>
  </entry>
  <entry>
    <title>校内训练</title>
    <url>/2021/11/21/school-contests/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0a97cfba8f591e067d504a0e2cb3ced355951e93b3559ef2c36f8e36d4db04c1">78d5c44c561fb30929ade6a6b24a4a492ddbed719816bc2708ce48b4b3bf35600e5a8d8a6abb282cf29750bc1edce47b421864e152d4eec00fc5c0bad1f2e847f8d8f4a1617afb25270ee547b0704ed46167d840cd24f7debb7de565832908c9035ba7fb70014198392aa0ac98be4f1fa5ebe2cdfddcfc032efd3601b7eea6ac5da04861dc0da3cd4969a78d65b41d5ec7376b20d69efd2f8426c8fe10c14bc36936fb9123cac1e9992236f2d1d5bfd9</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>school</tag>
      </tags>
  </entry>
  <entry>
    <title>AtCoder 比赛记录</title>
    <url>/2021/11/20/atcoder-records/</url>
    <content><![CDATA[<h2 id="AtCoder-上的比赛记录"><a href="#AtCoder-上的比赛记录" class="headerlink" title="AtCoder 上的比赛记录"></a>AtCoder 上的比赛记录</h2><h3 id="2021-11-21-ARC129"><a href="#2021-11-21-ARC129" class="headerlink" title="2021.11.21 ARC129"></a>2021.11.21 ARC129</h3><p>被之前两道DS题搞得有点头晕，看了下题感觉<del>只会做A</del>挺思维的，于是切了下A题就去继续做<a href="/2021/11/20/missions/" title="任务计划">任务计划</a>了。<br>update 2021.11.22 （本以为肯定要掉好多分，结果分数<del>不减反增</del>）</p>
]]></content>
      <tags>
        <tag>records</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces 比赛记录</title>
    <url>/2021/11/20/codeforces-records/</url>
    <content><![CDATA[<h2 id="CodeForces-上的比赛记录"><a href="#CodeForces-上的比赛记录" class="headerlink" title="CodeForces 上的比赛记录"></a>CodeForces 上的比赛记录</h2><h3 id="2021-11-22-CF1612"><a href="#2021-11-22-CF1612" class="headerlink" title="2021.11.22 CF1612"></a>2021.11.22 CF1612</h3><p>没算好恰饭的时间，<del>以后不打下午5点的CF了</del><br>一样是切了ABCD，看了眼EFG走人<del>（太不专心了，也不知道掉多少分）</del><br><del>难道学校今天开家长会就是为了让我们打下午的Codeforces的。。。</del></p>
]]></content>
      <tags>
        <tag>records</tag>
      </tags>
  </entry>
  <entry>
    <title>P3803 【模版】多项式乘法（FFT）</title>
    <url>/2021/11/28/sol-p3803/</url>
    <content><![CDATA[<h2 id="P3803-【模版】多项式乘法（FFT）"><a href="#P3803-【模版】多项式乘法（FFT）" class="headerlink" title="P3803 【模版】多项式乘法（FFT）"></a>P3803 【模版】多项式乘法（FFT）</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P3803">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>模版题了属于是<del>（但我只会写递归的FFT）</del></p>
<p>为了防止自己忘记就写一下证明吧。</p>
<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="多项式表示方法"><a href="#多项式表示方法" class="headerlink" title="多项式表示方法"></a>多项式表示方法</h4><h5 id="系数表示法"><a href="#系数表示法" class="headerlink" title="系数表示法"></a>系数表示法</h5><p>即</p>
<script type="math/tex; mode=display">f(x) = \sum_{i=0}^{n-1}{a_ix^i}</script><h5 id="点值表示法"><a href="#点值表示法" class="headerlink" title="点值表示法"></a>点值表示法</h5><p>不妨将多项式看成一个$n-1$次函数，从上面取$n$个点来唯一地表示这个函数。</p>
<p>设想一下高斯消元法，就能知道为什么$n$个不同的点就能唯一确定这个函数了。</p>
<script type="math/tex; mode=display">f(x) = \{(x_0,y_0),(x_1,y_1),\cdots,(x_{n-1},y_{n-1})\}</script><p>这样的表示法有一个好处，就是如果要计算多项式乘法，设</p>
<script type="math/tex; mode=display">g(x) = \{(x_0,g(x_0)),(x_1,g(x_1)),\cdots,(x_{n-1},g(x_{n-1}))\}</script><script type="math/tex; mode=display">h(x) = \{(x_0,h(x_0)),(x_1,h(x_1)),\cdots,(x_{n-1},h(x_{n-1}))\}</script><p>那么</p>
<script type="math/tex; mode=display">
\begin{align}
f(x) &= g(x) \times h(x) \\
&= \{(x_0,g(x_0)h(x_0)),(x_1,g(x_1)h(x_1)),\cdots,(x_{n-1},g(x_{n-1})h(x_{n-1}))\}
\end{align}</script><p>就可以$O(n)$地求出多项式乘法。</p>
<p>所以$FFT$要做的事就是将系数表示法和点值表示法进行转换。</p>
<h4 id="复数（这个大家都会）"><a href="#复数（这个大家都会）" class="headerlink" title="复数（这个大家都会）"></a>复数（这个大家都会）</h4><p>令$i^2 = -1$，复数可被表示为$a + bi$的形式</p>
<p>考虑在复平面上的两个向量$(a,b)$和$(c,d)$，将其表示的复数相乘得到$(a + bi) \times (c + di) = ac - bd + (ad + bc)i$，即向量$(ac - bd, ad + bc)$。</p>
<p>我们计算几个向量的模，分别为$\sqrt{a^2 + b^2}$，$\sqrt{c^2 + d^2}$和$\sqrt{a^2c^2 + b^2d^2 + a^2d^2 + b^2c^2} = \sqrt{(a^2 + b^2) \times (c^2 + d^2)}$，即两个向量模长的乘积。</p>
<p>所以如果两个原向量模长都为$1$，乘积的向量也为$1$。</p>
<p>假设我们有两个复平面上单位圆上的向量，设其辐角分别为$\alpha$和$\beta$，则这两个向量表示为$(\cos\alpha,\sin\alpha)$和$(\cos\beta,\sin\beta)$，其乘积为$(\cos\alpha\cos\beta-\sin\alpha\sin\beta,\cos\alpha\sin\beta+\sin\alpha\cos\beta)$。根据二角和差公式</p>
<script type="math/tex; mode=display">
\cos(\alpha + \beta) = \cos\alpha\cos\beta-\sin\alpha\sin\beta \\
\sin(\alpha + \beta) = \sin\alpha\cos\beta+\cos\alpha\sin\beta</script><p>可以发现这个新的向量的辐角就等于两个原向量的辐角相加。于是将得到结论：两个模长为$1$的向量相乘，得到的仍是模长为$1$的向量，辐角为两个向量辐角的和。</p>
<h4 id="单位复根"><a href="#单位复根" class="headerlink" title="单位复根"></a>单位复根</h4><p>由于我们要去计算若干个$x_i$对应的$f(x_i)$，最好的办法便是找一些特殊的数值带进去计算。这里引入单位复根的概念。</p>
<p>我们称$x^n = 1$在复数意义下的解是$n$次复根。显然这样的解有$n$个。设$\omega_n = e^{\frac{2\pi i}{n}}$，则$x^n = 1$的解集表示为$\{\omega^k_n \mid k=0,1,\cdots,n-1\}$，称$w_n$为$n$次单位复根。根据复平面的知识，$n$次单位复根是复平面把单位圆$n$等分的第一个角所对应的向量，其他复根均可以用单位复根的幂表示。</p>
<p>所以显然还能得到$\omega_n = e^{\frac{2\pi i}{n}} = \cos(\frac{2\pi}{n}) + i \sin(\frac{2\pi}{n})$。</p>
<p>举个例子，$n=4$时，$w_n = i$，如图所示（图来自<a href="https://oi-wiki.org/math/poly/fft/">oi-wiki</a>）</p>
<p><img src="fft-1.png" alt="fft-1"></p>
<p>并且单位复根还有三个重要的性质如下：</p>
<script type="math/tex; mode=display">
\begin{align}
w^n_n &= 1 \\
w^k_n &= w^{2k}_{2n} \\
w^{k+n}_{2k} &= -w^k_{2n}
\end{align}</script><h4 id="终于开始讲-FFT-了"><a href="#终于开始讲-FFT-了" class="headerlink" title="终于开始讲$FFT$了"></a>终于开始讲$FFT$了</h4><p>$FFT$其本质为分治算法。比方说对于</p>
<script type="math/tex; mode=display">f(x) = a_0 + a_1x + a_2x^2 + a_3x^3 + a_4x^4 + a_5x^5 + a_6x^6 + a_7x^7</script><p>按照次数的奇偶来分组得到</p>
<script type="math/tex; mode=display">f(x) = (a_0 + a_2x^2 + a_4x^4 + a_6x^6) + (a_1x^1 + a_3x^3 + a_5x^5 + a_7x^7)</script><p>右边提取$x$得到</p>
<script type="math/tex; mode=display">f(x) = (a_0 + a_2x^2 + a_4x^4 + a_6x^6) + x(a_1 + a_3x^2 + a_5x^4 + a_7x^6)</script><p>按照奇偶次项建立新的函数</p>
<script type="math/tex; mode=display">g(x) = a_0 + a_2x^1 + a_4x^2 + a_6x^3</script><script type="math/tex; mode=display">h(x) = a_1 + a_3x^1 + a_5x^2 + a_7x^3</script><p>原来的$f(x)$可以被表示成</p>
<script type="math/tex; mode=display">f(x) = g(x^2) + x \times h(x^2)</script><p>利用单位复根的性质得到</p>
<script type="math/tex; mode=display">\begin{align}
FFT(f(\omega^k_n)) &= FFT(g((\omega^k_n)^2)) + \omega^k_n \times FFT(h((\omega^k_n)^2)) \\
&= FFT(g(\omega^{2k}_n)) + \omega^k_n \times FFT(h(\omega^{2k}_n)) \\
&= FFT(g(\omega^k_{n/2})) + \omega^k_n \times FFT(h(\omega^k_{n/2}))
\end{align}</script><p>同理可得</p>
<script type="math/tex; mode=display">\begin{align}
FFT(f(\omega^{k+n/2}_n)) &= FFT(g(\omega^{2k+n}_n)) + \omega^{k+n/2}_n \times FFT(h(\omega^{2k+n}_n)) \\
&= FFT(g(\omega^{2k}_n)) - \omega^k_n \times FFT(h(\omega^{2k}_n)) \\
&= FFT(g(\omega^k_{n/2})) - \omega^k_n \times FFT(h(\omega^k_{n/2}))
\end{align}</script><p>而由于$n/2$需要一直为整数，所以$n$需要是$2^m$，不妨在一开始将多项式的次数补到长度为长度为$2^m$，次数为$2^m-1$的多项式即可。</p>
<p>代码实现方面，STL提供了复数的模版（我也是第一次知道有这种好事），可以使用<code>std::complex&lt;double&gt;</code>。</p>
<p>$FFT$核心代码如下：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> comp = std::complex&lt;<span class="keyword">double</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">comp tmp[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 做 FFT</span></span><br><span class="line"><span class="comment"> * n 必须是 2^k 形式</span></span><br><span class="line"><span class="comment"> * rev = 1 时为 FFT, rev = -1 时为 IFFT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(comp *f, <span class="keyword">int</span> n, <span class="keyword">int</span> rev)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        tmp[i] = f[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">            f[n / <span class="number">2</span> + i / <span class="number">2</span>] = tmp[i];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            f[i / <span class="number">2</span>] = tmp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    comp *g = f, *h = f + n / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">fft</span>(g, n / <span class="number">2</span>, rev), <span class="built_in">fft</span>(h, n / <span class="number">2</span>, rev);</span><br><span class="line">    <span class="function">comp <span class="title">cur</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span>, <span class="title">step</span><span class="params">(cos(<span class="number">2</span> * M_PI / n), sin(<span class="number">2</span> * M_PI * rev / n))</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        tmp[i] = g[i] + cur * h[i];</span><br><span class="line">        tmp[i + n / <span class="number">2</span>] = g[i] - cur * h[i];</span><br><span class="line">        cur *= step;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        f[i] = tmp[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>时间复杂度$O(n \log n)$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P3803.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P3803</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="meta-string">&quot;.in&quot;</span>, <span class="meta-string">&quot;r&quot;</span>, stdin), freopen(#x <span class="meta-string">&quot;.out&quot;</span>, <span class="meta-string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="meta-string">&quot;[%s:%d] &quot;</span> fmt <span class="meta-string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> comp = complex&lt;<span class="keyword">double</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1</span> &lt;&lt; <span class="number">21</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, len;</span><br><span class="line">comp a[MAXN], b[MAXN], ans[MAXN];</span><br><span class="line">comp tmp[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(comp *f, <span class="keyword">int</span> n, <span class="keyword">int</span> rev)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        tmp[i] = f[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">            f[n / <span class="number">2</span> + i / <span class="number">2</span>] = tmp[i];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            f[i / <span class="number">2</span>] = tmp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    comp *g = f, *h = f + n / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">fft</span>(g, n / <span class="number">2</span>, rev), <span class="built_in">fft</span>(h, n / <span class="number">2</span>, rev);</span><br><span class="line">    <span class="function">comp <span class="title">cur</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span>, <span class="title">step</span><span class="params">(cos(<span class="number">2</span> * M_PI / n), sin(<span class="number">2</span> * M_PI * rev / n))</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        tmp[i] = g[i] + cur * h[i];</span><br><span class="line">        tmp[i + n / <span class="number">2</span>] = g[i] - cur * h[i];</span><br><span class="line">        cur *= step;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        f[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">read</span>(x);</span><br><span class="line">        a[i] = <span class="built_in">comp</span>(x, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">read</span>(x);</span><br><span class="line">        b[i] = <span class="built_in">comp</span>(x, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (len &lt;= n + m)</span><br><span class="line">        len *= <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">fft</span>(a, len, <span class="number">1</span>), <span class="built_in">fft</span>(b, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len; ++i)</span><br><span class="line">        ans[i] = a[i] * b[i];</span><br><span class="line">    <span class="built_in">fft</span>(ans, len, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld%c&quot;</span>, (<span class="keyword">int</span>)(ans[i].<span class="built_in">real</span>() / len + <span class="number">0.5</span>), <span class="string">&quot; \n&quot;</span>[i == n + m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P3233 世界树 题解</title>
    <url>/2021/11/27/sol-p3233/</url>
    <content><![CDATA[<h2 id="P3233-世界树-题解"><a href="#P3233-世界树-题解" class="headerlink" title="P3233 世界树 题解"></a>P3233 世界树 题解</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P3233">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p><strong>以下所有的“关键点”都表示题目中的议事处</strong></p>
<p>看完这题题解后去学习了虚树<del>（然后day2上午模拟赛考了道类似虚树但不用建$lca$的题目）</del></p>
<p>于是看到$\sum m \le 3 \times 10^5$ 直接建立虚树（然而如果没学过虚树就看不出来了）。</p>
<p>用<code>pair&lt;int, int&gt;</code>储存树上节点到达最近关键点的距离和关键点编号以便于比较。先对虚树上的节点做一遍换根$dp$，方程显然是$dp_u = \min\limits_{v,w}{dp_v + w}$其中$v, w$分别为子节点和到子节点的距离。之后为了方便表述设<strong>$f_u$表示<code>dp[u].first</code>，$g_u$表示<code>dp[u].second</code></strong>。</p>
<p>接下来考虑不在虚树上的节点。首先如果虚树上某节点的一个原树上子节点的子树中都没有虚树上的节点，那么该子树中的的所有节点的最近关键点都应当与该虚树节点相同。形式化地，若对于虚树上的节点$u$有节点$u \to v_{real}$使得不存在$v_{real} \to \cdots \to x$在虚树上，那么$g_x = g_u$，即$cnt_{g_u} += siz_{v_{real}}$。如在下图中的节点中$v=6,v=7,v=10$都满足该种情况（加粗节点表示虚树节点）。</p>
<p><img src="sol-p3233-1.png" alt="虚树"></p>
<p>其次是在虚树的链上的点。不妨将例如上图中的节点$9$计算到节点$4$中（因为$g_4$一定等于$g_9$），考虑一条链$fa \to u$，若$g_{fa} = g_u$则链上节点全部加到$g_u$中（同样设$v_{real}$表示$fa$在原树中的$u$方向的子节点，相当于$cnt_{g_u} += siz_{v_{real}} - siz_u$），否则倍增找到深度最小的满足取$g_u$更优的点$cur$，显然$cnt_{g_u} += siz_{cur} - siz_u$，$cnt_{g_{fa}} += siz_{v_{real}} - siz_{cur}$。</p>
<p>于是本题就结束了。只是有太多太多细节要注意了，<del>写错一个调一整年啊/kk</del></p>
<p>时间复杂度$O(n \log n)$稳过。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P3233.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P3233</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="meta-string">&quot;.in&quot;</span>, <span class="meta-string">&quot;r&quot;</span>, stdin), freopen(#x <span class="meta-string">&quot;.out&quot;</span>, <span class="meta-string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="meta-string">&quot;[%s:%d] &quot;</span> fmt <span class="meta-string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> pii = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">6e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXK = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">graph</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">    &#125; e[MAXM];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN], nxt[MAXM], tot;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        e[++tot] = &#123;u, v, w&#125;;</span><br><span class="line">        nxt[tot] = head[u];</span><br><span class="line">        head[u] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m, q, top, inde, h[MAXN], dfn[MAXN], dep[MAXN];</span><br><span class="line"><span class="keyword">int</span> fa[MAXN][MAXK], siz[MAXN], sta[MAXN], cnt[MAXN], ori[MAXN];</span><br><span class="line">pii dis[MAXN][<span class="number">2</span>], tmp[MAXN], pre[MAXN], nxt[MAXN];</span><br><span class="line"><span class="keyword">bool</span> tag[MAXN];</span><br><span class="line">graph tr, vtr;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_tr</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    siz[u] = <span class="number">1</span>, dfn[u] = ++inde, dep[u] = dep[f] + <span class="number">1</span>, fa[u][<span class="number">0</span>] = f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAXK; ++i)</span><br><span class="line">        fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = tr.head[u]; i; i = tr.nxt[i])</span><br><span class="line">        <span class="keyword">if</span> (tr.e[i].v != f)</span><br><span class="line">            <span class="built_in">build_tr</span>(tr.e[i].v, u), siz[u] += siz[tr.e[i].v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v])</span><br><span class="line">        <span class="built_in">swap</span>(u, v);</span><br><span class="line">    <span class="keyword">int</span> t = dep[u] - dep[v];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = MAXK - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> ((t &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">            u = fa[u][i];</span><br><span class="line">    <span class="keyword">if</span> (u == v)</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = MAXK - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> (fa[u][i] != fa[v][i])</span><br><span class="line">            u = fa[u][i], v = fa[v][i];</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = MAXK - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> ((d &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">            u = fa[u][i];</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_vedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// debug(&quot;virtual tree: %lld -&gt; %lld, w = %lld&quot;, u, v, dep[v] - dep[u]);</span></span><br><span class="line">    vtr.<span class="built_in">addedge</span>(u, v, dep[v] - dep[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_vtr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(h + <span class="number">1</span>, h + m + <span class="number">1</span>, [](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">        <span class="keyword">return</span> dfn[x] &lt; dfn[y];</span><br><span class="line">    &#125;);</span><br><span class="line">    sta[top = <span class="number">1</span>] = <span class="number">1</span>, vtr.head[<span class="number">1</span>] = <span class="number">0</span>, vtr.tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (h[i] == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="built_in">lca</span>(sta[top], h[i]);</span><br><span class="line">        <span class="keyword">while</span> (dfn[l] &lt;= dfn[sta[top - <span class="number">1</span>]])</span><br><span class="line">            <span class="built_in">add_vedge</span>(sta[top - <span class="number">1</span>], sta[top]), --top;</span><br><span class="line">        <span class="keyword">if</span> (sta[top] != l)</span><br><span class="line">            vtr.head[l] = <span class="number">0</span>, <span class="built_in">add_vedge</span>(l, sta[top]), sta[top] = l;</span><br><span class="line">        vtr.head[h[i]] = <span class="number">0</span>, sta[++top] = h[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; top; ++i)</span><br><span class="line">        <span class="built_in">add_vedge</span>(sta[i], sta[i + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs0</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    dis[u][<span class="number">0</span>] = tag[u] ? pii&#123;<span class="number">0</span>, u&#125; : pii&#123;INFL, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = vtr.head[u]; i; i = vtr.nxt[i]) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = vtr.e[i].v, w = vtr.e[i].w;</span><br><span class="line">        <span class="built_in">dfs0</span>(v), dis[u][<span class="number">0</span>] = <span class="built_in">min</span>(dis[u][<span class="number">0</span>], &#123;dis[v][<span class="number">0</span>].fi + w, dis[v][<span class="number">0</span>].se&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// debug(&quot;dis of dfs0(%lld) = &#123;%lld, %lld&#125;&quot;, u, dis[u][0].fi, dis[u][0].se);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = vtr.head[u]; i; i = vtr.nxt[i]) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = vtr.e[i].v, w = vtr.e[i].w;</span><br><span class="line">        tmp[++len] = &#123;dis[v][<span class="number">0</span>].fi + w, dis[v][<span class="number">0</span>].se&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tag[u])</span><br><span class="line">        dis[u][<span class="number">1</span>] = &#123;<span class="number">0</span>, u&#125;;</span><br><span class="line">    pre[<span class="number">0</span>] = nxt[len + <span class="number">1</span>] = dis[u][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">        pre[i] = <span class="built_in">min</span>(pre[i - <span class="number">1</span>], tmp[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">        nxt[i] = <span class="built_in">min</span>(nxt[i + <span class="number">1</span>], tmp[i]);</span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = vtr.head[u]; i; i = vtr.nxt[i]) &#123;</span><br><span class="line">        ++len;</span><br><span class="line">        pii t = <span class="built_in">min</span>(pre[len - <span class="number">1</span>], nxt[len + <span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// ##sb-mistakes## 换根$dp$不要在统计$pre$和$nxt$数组时就写$dfs$!!!数组整个改变!!!不然会死得很惨（指对着n=1000,m=100的大样例调1h）</span></span><br><span class="line">        dis[vtr.e[i].v][<span class="number">1</span>] = &#123;t.fi + vtr.e[i].w, t.se&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = vtr.head[u]; i; i = vtr.nxt[i])</span><br><span class="line">        <span class="built_in">dfs1</span>(vtr.e[i].v);</span><br><span class="line">    <span class="comment">// debug(&quot;dis of dfs1(%lld) = &#123;%lld, %lld&#125;&quot;, u, dis[u][1].fi, dis[u][1].se);</span></span><br><span class="line">    dis[u][<span class="number">1</span>] = <span class="built_in">min</span>(dis[u][<span class="number">0</span>], dis[u][<span class="number">1</span>]);</span><br><span class="line">    ++cnt[dis[u][<span class="number">1</span>].se];</span><br><span class="line">    <span class="comment">// debug(&quot;dis of dfs1(%lld) = &#123;%lld, %lld&#125;&quot;, u, dis[u][1].fi, dis[u][1].se);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = vtr.head[u]; i; i = vtr.nxt[i])</span><br><span class="line">        <span class="built_in">dfs2</span>(vtr.e[i].v, u);</span><br><span class="line">    <span class="keyword">if</span> (f) &#123;</span><br><span class="line">        <span class="comment">// debug(&quot;calculate chain %lld -&gt; %lld&quot;, f, u);</span></span><br><span class="line">        <span class="keyword">if</span> (dis[f][<span class="number">1</span>].se == dis[u][<span class="number">1</span>].se) &#123;</span><br><span class="line">            <span class="keyword">int</span> cx = siz[<span class="built_in">jump</span>(u, dep[u] - dep[f] - <span class="number">1</span>)] - siz[u];</span><br><span class="line">            <span class="comment">// debug(&quot;same color, add %lld to cnt[%lld]&quot;, cx, dis[u][1].se);</span></span><br><span class="line">            cnt[dis[u][<span class="number">1</span>].se] += cx;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> cur = u;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = MAXK - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dep[fa[cur][i]] &lt;= dep[f])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                pii up&#123;dep[fa[cur][i]] - dep[f] + dis[f][<span class="number">1</span>].fi, dis[f][<span class="number">1</span>].se&#125;;</span><br><span class="line">                pii dn&#123;dep[u] - dep[fa[cur][i]] + dis[u][<span class="number">1</span>].fi, dis[u][<span class="number">1</span>].se&#125;;</span><br><span class="line">                <span class="keyword">if</span> (dn &lt; up)</span><br><span class="line">                    cur = fa[cur][i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// debug(&quot;vertex is %lld&quot;, cur);</span></span><br><span class="line">            <span class="keyword">int</span> c1 = siz[cur] - siz[u];</span><br><span class="line">            <span class="keyword">int</span> c2 = siz[<span class="built_in">jump</span>(u, dep[u] - dep[f] - <span class="number">1</span>)] - siz[cur];</span><br><span class="line">            <span class="comment">// debug(&quot;%lld&quot;, siz[jump(u, dep[u] - dep[f] - 1)]);</span></span><br><span class="line">            <span class="comment">// debug(&quot;diff color, add %lld to cnt[%lld]&quot;, c1, dis[u][1].se);</span></span><br><span class="line">            <span class="comment">// debug(&quot;diff color, add %lld to cnt[%lld]&quot;, c2, dis[f][1].se);</span></span><br><span class="line">            cnt[dis[u][<span class="number">1</span>].se] += c1;</span><br><span class="line">            cnt[dis[f][<span class="number">1</span>].se] += c2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// debug(&quot;calculate subtree of %lld&quot;, u);</span></span><br><span class="line">    <span class="keyword">int</span> rem = siz[u] - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = vtr.head[u]; i; i = vtr.nxt[i])</span><br><span class="line">        rem -= siz[<span class="built_in">jump</span>(vtr.e[i].v, dep[vtr.e[i].v] - dep[u] - <span class="number">1</span>)];</span><br><span class="line">    <span class="comment">// debug(&quot;add %lld to cnt[%lld]&quot;, rem, dis[u][1].se);</span></span><br><span class="line">    cnt[dis[u][<span class="number">1</span>].se] += rem;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v);</span><br><span class="line">        tr.<span class="built_in">addedge</span>(u, v);</span><br><span class="line">        tr.<span class="built_in">addedge</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build_tr</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="built_in">read</span>(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            ori[i] = <span class="built_in">read</span>(h[i]), tag[h[i]] = <span class="literal">true</span>, cnt[h[i]] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">build_vtr</span>();</span><br><span class="line">        dis[<span class="number">1</span>][<span class="number">0</span>] = dis[<span class="number">1</span>][<span class="number">1</span>] = &#123;INFL, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">dfs0</span>(<span class="number">1</span>), <span class="built_in">dfs1</span>(<span class="number">1</span>), <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            <span class="built_in">write</span>(cnt[ori[i]]), <span class="built_in">putchar</span>(i == m ? <span class="string">&#x27;\n&#x27;</span> : <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            tag[h[i]] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P2495 消耗战 题解</title>
    <url>/2021/11/27/sol-p2495/</url>
    <content><![CDATA[<h2 id="P2495-消耗战-题解"><a href="#P2495-消耗战-题解" class="headerlink" title="P2495 消耗战 题解"></a>P2495 消耗战 题解</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P2495">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>虚树模版题，不多说。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P2495.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P2495</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="meta-string">&quot;.in&quot;</span>, <span class="meta-string">&quot;r&quot;</span>, stdin), freopen(#x <span class="meta-string">&quot;.out&quot;</span>, <span class="meta-string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="meta-string">&quot;[%s:%d] &quot;</span> fmt <span class="meta-string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXK = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">graph</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">    &#125; e[MAXM];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN], nxt[MAXM], tot;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        e[++tot] = &#123;u, v, w&#125;;</span><br><span class="line">        nxt[tot] = head[u];</span><br><span class="line">        head[u] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m, k, inde, h[MAXN], dfn[MAXN], dep[MAXN];</span><br><span class="line"><span class="keyword">int</span> fa[MAXN][MAXK], mn[MAXN][MAXK], dp[MAXN], sta[MAXN], top;</span><br><span class="line"><span class="keyword">bool</span> tag[MAXN];</span><br><span class="line">graph tr, vtr;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_tr</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    dfn[u] = ++inde, dep[u] = dep[f] + <span class="number">1</span>;</span><br><span class="line">    fa[u][<span class="number">0</span>] = f, mn[u][<span class="number">0</span>] = w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAXK; ++i)</span><br><span class="line">        fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAXK; ++i)</span><br><span class="line">        mn[u][i] = <span class="built_in">min</span>(mn[u][i - <span class="number">1</span>], mn[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = tr.head[u]; i; i = tr.nxt[i])</span><br><span class="line">        <span class="keyword">if</span> (tr.e[i].v != f)</span><br><span class="line">            <span class="built_in">build_tr</span>(tr.e[i].v, u, tr.e[i].w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v])</span><br><span class="line">        <span class="built_in">swap</span>(u, v);</span><br><span class="line">    <span class="keyword">int</span> t = dep[u] - dep[v];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = MAXK - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> ((t &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">            u = fa[u][i];</span><br><span class="line">    <span class="keyword">if</span> (u == v)</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = MAXK - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> (fa[u][i] != fa[v][i])</span><br><span class="line">            u = fa[u][i], v = fa[v][i];</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minpath</span><span class="params">(<span class="keyword">int</span> f, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = dep[f] - dep[u];</span><br><span class="line">    <span class="keyword">int</span> ret = INFL;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = MAXK - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> ((t &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">            ret = <span class="built_in">min</span>(ret, mn[u][i]), u = fa[u][i];</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_vedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    vtr.<span class="built_in">addedge</span>(u, v, <span class="built_in">minpath</span>(u, v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_vtr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(h + <span class="number">1</span>, h + k + <span class="number">1</span>, [](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">        <span class="keyword">return</span> dfn[x] &lt; dfn[y];</span><br><span class="line">    &#125;);</span><br><span class="line">    sta[top = <span class="number">1</span>] = <span class="number">1</span>, vtr.tot = <span class="number">0</span>, vtr.head[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (h[i] == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="built_in">lca</span>(sta[top], h[i]);</span><br><span class="line">        <span class="keyword">if</span> (l != sta[top]) &#123;</span><br><span class="line">            <span class="keyword">while</span> (dfn[sta[top - <span class="number">1</span>]] &gt; dfn[l])</span><br><span class="line">                <span class="built_in">add_vedge</span>(sta[top - <span class="number">1</span>], sta[top]), --top;</span><br><span class="line">            <span class="keyword">if</span> (sta[top - <span class="number">1</span>] == l)</span><br><span class="line">                <span class="built_in">add_vedge</span>(l, sta[top]), --top;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                vtr.head[l] = <span class="number">-1</span>, <span class="built_in">add_vedge</span>(l, sta[top]), sta[top] = l;</span><br><span class="line">        &#125;</span><br><span class="line">        vtr.head[h[i]] = <span class="number">0</span>, sta[++top] = h[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; top; ++i)</span><br><span class="line">        <span class="built_in">add_vedge</span>(sta[i], sta[i + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    dp[u] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = vtr.head[u]; i; i = vtr.nxt[i]) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = vtr.e[i].v, w = vtr.e[i].w;</span><br><span class="line">        <span class="built_in">dfs</span>(v);</span><br><span class="line">        <span class="keyword">if</span> (tag[v])</span><br><span class="line">            dp[u] += w;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            dp[u] += <span class="built_in">min</span>(dp[v], w);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v), <span class="built_in">read</span>(w);</span><br><span class="line">        tr.<span class="built_in">addedge</span>(u, v, w);</span><br><span class="line">        tr.<span class="built_in">addedge</span>(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fill</span>(mn[<span class="number">0</span>], mn[<span class="number">0</span>] + MAXK, INFL);</span><br><span class="line">    <span class="built_in">build_tr</span>(<span class="number">1</span>, <span class="number">0</span>, INFL);</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">read</span>(k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">            <span class="built_in">read</span>(h[i]), tag[h[i]] = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">build_vtr</span>();</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">write</span>(dp[<span class="number">1</span>]), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">            tag[h[i]] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P7155 Spaceship P 题解</title>
    <url>/2021/11/26/sol-p7155/</url>
    <content><![CDATA[<h2 id="P7155-Spaceship-P-题解"><a href="#P7155-Spaceship-P-题解" class="headerlink" title="P7155 Spaceship P 题解"></a>P7155 Spaceship P 题解</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P7155">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>考虑到一个合法的按钮序列中，有且仅有一个最大的按钮编号。因为如果该最大编号为$mx$的按钮能被按下多次，则必须要按下另一个按钮编号$\gt mx$以使按钮$mx$变得合法，不满足$mx$编号最大，故假设不成立。</p>
<p>有了这个性质，就确定了合法序列数量的上界，并且由于编号最大的按钮将序列分成两段，这使得我们可以$dp$求解。设$dp_{u,v,c,0/1,0/1}$表示从$u$走到$v$的路径中最大按钮的编号不超过$c$，第一步是否有限制和最后一步是否有限制的方案数，答案就是$dp_{s,t,K,1,1}$，于是$O(qn^5)$做法显然。</p>
<p>考虑如何优化（其实也挺好想）。令$f_{u,x,c,0/1}=\sum\limits_{(t,u)}{dp_{u,t,c-1,0/1,0}}$，$g_{x,v,c,0/1}=\sum\limits_{(v,t)}{dp_{t,v,c-1,0,0/1}}$，则$dp_{u,v,c,k1,k2}=\sum\limits_{t}{f_{u,t,c,k1} \times g_{t,v,c,k2}}$，一下子少枚举很多东西了。</p>
<p>具体细节就看代码吧，时间复杂度$O(n^4 + qn^3)$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P7155.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P7155</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="meta-string">&quot;.in&quot;</span>, <span class="meta-string">&quot;r&quot;</span>, stdin), freopen(#x <span class="meta-string">&quot;.out&quot;</span>, <span class="meta-string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="meta-string">&quot;[%s:%d] &quot;</span> fmt <span class="meta-string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">65</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, k, q;</span><br><span class="line"><span class="keyword">char</span> buf[MAXN];</span><br><span class="line"><span class="keyword">bool</span> mp[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][<span class="number">2</span>][MAXN][MAXN][MAXN], f[<span class="number">2</span>][MAXN][MAXN][MAXN], g[<span class="number">2</span>][MAXN][MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uadd</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= MOD)</span><br><span class="line">        x -= MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> bs, <span class="keyword">int</span> bt)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f[<span class="number">1</span>], <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f[<span class="number">1</span>]));</span><br><span class="line">    <span class="built_in">memset</span>(g[<span class="number">1</span>], <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(g[<span class="number">1</span>]));</span><br><span class="line">    <span class="built_in">memset</span>(dp[<span class="number">0</span>][<span class="number">1</span>], <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dp[<span class="number">0</span>][<span class="number">1</span>]));</span><br><span class="line">    <span class="built_in">memset</span>(dp[<span class="number">1</span>][<span class="number">0</span>], <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dp[<span class="number">1</span>][<span class="number">0</span>]));</span><br><span class="line">    <span class="built_in">memset</span>(dp[<span class="number">1</span>][<span class="number">1</span>], <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dp[<span class="number">1</span>][<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= k; ++c) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1</span>; y &lt;= n; ++y)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">1</span>; v &lt;= n; ++v)</span><br><span class="line">                <span class="keyword">if</span> (mp[v][y]) <span class="built_in">uadd</span>(f[<span class="number">1</span>][s][y][c], dp[<span class="number">1</span>][<span class="number">0</span>][s][v][c - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; ++x)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">1</span>; v &lt;= n; ++v)</span><br><span class="line">                <span class="keyword">if</span> (mp[x][v]) <span class="built_in">uadd</span>(g[<span class="number">1</span>][x][t][c], dp[<span class="number">0</span>][<span class="number">1</span>][v][t][c - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (c == bs) <span class="built_in">uadd</span>(f[<span class="number">1</span>][s][s][c], <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (c == bt) <span class="built_in">uadd</span>(g[<span class="number">1</span>][t][t][c], <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">1</span>; v &lt;= n; ++v) &#123;</span><br><span class="line">            dp[<span class="number">1</span>][<span class="number">0</span>][s][v][c] = dp[<span class="number">1</span>][<span class="number">0</span>][s][v][c - <span class="number">1</span>];</span><br><span class="line">            dp[<span class="number">0</span>][<span class="number">1</span>][v][t][c] = dp[<span class="number">0</span>][<span class="number">1</span>][v][t][c - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= n; ++l) &#123;</span><br><span class="line">                <span class="built_in">uadd</span>(dp[<span class="number">1</span>][<span class="number">0</span>][s][v][c], f[<span class="number">1</span>][s][l][c] * g[<span class="number">0</span>][l][v][c] % MOD);</span><br><span class="line">                <span class="built_in">uadd</span>(dp[<span class="number">0</span>][<span class="number">1</span>][v][t][c], f[<span class="number">0</span>][v][l][c] * g[<span class="number">1</span>][l][t][c] % MOD);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>][s][t][c] = dp[<span class="number">1</span>][<span class="number">1</span>][s][t][c - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">1</span>; v &lt;= n; ++v)</span><br><span class="line">            <span class="built_in">uadd</span>(dp[<span class="number">1</span>][<span class="number">1</span>][s][t][c], f[<span class="number">1</span>][s][v][c] * g[<span class="number">1</span>][v][t][c] % MOD);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">1</span>][<span class="number">1</span>][s][t][k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(k), <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            mp[i][j] = buf[j] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= k; ++c) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; ++x)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1</span>; y &lt;= n; ++y)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= n; ++t)</span><br><span class="line">                    <span class="keyword">if</span> (mp[t][y]) <span class="built_in">uadd</span>(f[<span class="number">0</span>][x][y][c], dp[<span class="number">0</span>][<span class="number">0</span>][x][t][c - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; ++x)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1</span>; y &lt;= n; ++y)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= n; ++t)</span><br><span class="line">                    <span class="keyword">if</span> (mp[x][t]) <span class="built_in">uadd</span>(g[<span class="number">0</span>][x][y][c], dp[<span class="number">0</span>][<span class="number">0</span>][t][y][c - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">uadd</span>(f[<span class="number">0</span>][i][i][c], <span class="number">1</span>), <span class="built_in">uadd</span>(g[<span class="number">0</span>][i][i][c], <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; ++x)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1</span>; y &lt;= n; ++y)</span><br><span class="line">                <span class="built_in">uadd</span>(dp[<span class="number">0</span>][<span class="number">0</span>][x][y][c], dp[<span class="number">0</span>][<span class="number">0</span>][x][y][c - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; ++x)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1</span>; y &lt;= n; ++y)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= n; ++t)</span><br><span class="line">                    <span class="built_in">uadd</span>(dp[<span class="number">0</span>][<span class="number">0</span>][x][y][c], f[<span class="number">0</span>][x][t][c] * g[<span class="number">0</span>][t][y][c] % MOD);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> bs, s, bt, t;</span><br><span class="line">        <span class="built_in">read</span>(bs), <span class="built_in">read</span>(s), <span class="built_in">read</span>(bt), <span class="built_in">read</span>(t);</span><br><span class="line">        <span class="built_in">write</span>(<span class="built_in">query</span>(s, t, bs, bt)), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>BZOJ2720 列队春游 题解</title>
    <url>/2021/11/26/sol-bzoj2720/</url>
    <content><![CDATA[<h2 id="BZOJ2720-列队春游-题解"><a href="#BZOJ2720-列队春游-题解" class="headerlink" title="BZOJ2720 列队春游 题解"></a>BZOJ2720 列队春游 题解</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://darkbzoj.tk/problem/2720">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>对于这种全排列的题目发现不太好用$dp$。仔细观察发现对于每个人的期望视野都是独立的，可以直接相加，所以直接算$E(c)$表示有$c$个人的高度小于该同学时该同学的期望视野。答案显然$\sum\limits_{i=1}^{n}{E(c_i)}$。</p>
<p>考虑如何求$E(c)$。根据期望公式易得$E(c) = \sum\limits_{i=1}^{c}{i \cdot P(i)}$。</p>
<p>但是$P(i)$不好求而$P(\ge i)$相对好求，于是继续观察这个等式，发现每个$P(i)$都被计算了恰好$i$次，所以$E(c)$就可以表示为如下：</p>
<script type="math/tex; mode=display">
    E(c) = \sum_{i=1}^{c}{P(\ge i)}</script><p>这样就只需要考虑概率而不需要考虑期望了。</p>
<p>接下来考虑$P(\ge i)$。既然视野$\ge i$，那么至少要有$i-1$个高度$\lt h$的人站在前面，于是$P(\ge i)$表示如下：</p>
<script type="math/tex; mode=display">
\begin{align}
        P(\ge i) &= \frac{n-i+1}{n} \cdot \frac{c^{\underline{i-1}}}{(n-1)^{\underline{i-1}}} \\
        &= \frac{n-i+1}{n} \cdot \frac{c!(n-i)!}{(n-1)!(c-i+1)!} \\
        &= \frac{c!}{n!} \cdot \frac{(n-i+1)!}{(c-i+1)!}
    \end{align}</script><p>于是将该式代入到$E(c)$中得到：</p>
<script type="math/tex; mode=display">
    \begin{align}
        E(c) &= \sum_{i=1}^{c}{i \cdot P(i)} \\
        &= \sum_{i=1}^{c}{P(\ge i)} \\
        &= \sum_{i=1}^{c}{\frac{c!}{n!} \cdot \frac{(n-i+1)!}{(c-i+1)!}} \\
        &= \frac{c!}{n!}\sum_{i=1}^{c}{\frac{(n-i+1)!}{(c-i+1)!}} \\
        &= \frac{c!(n-c)!}{n!}\sum_{i=1}^{c}{\binom{n-i+1}{c-i+1}} \\
        &= \frac{c!(n-c)!}{n!}\sum_{i=0}^{c-1}{\binom{n-c+i+1}{i+1}}
    \end{align}</script><p>由于$\sum\limits_{i=0}^{k}{\binom{n+i}{m+i}} = \binom{n+k+1}{m+k}$（易证），所以可以进一步将$E(c)$的$\Sigma$优化掉。</p>
<script type="math/tex; mode=display">
    \begin{align}
        E(c) &= \frac{c!(n-c)!}{n!}\sum_{i=0}^{c-1}{\binom{n-c+i+1}{i+1}} \\
        &= \frac{c!(n-c)!}{n!} \cdot \binom{n+1}{c} \\
        &= \frac{c!(n-c)!}{n!} \cdot \frac{(n+1)!}{c!(n-c+1)!} \\
        &= \frac{n+1}{n-c+1}
    \end{align}</script><p>所以得到结论</p>
<script type="math/tex; mode=display">
    E(c) = \frac{n+1}{n-c+1}</script><p>于是最终的答案就变成了</p>
<script type="math/tex; mode=display">
    ans = \sum_{i=1}^{n}{\frac{n+1}{n-c+1}}</script><p>$O(n)$求解即可。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           BZOJ2720.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://darkbzoj.tk/problem/2720</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="meta-string">&quot;.in&quot;</span>, <span class="meta-string">&quot;r&quot;</span>, stdin), freopen(#x <span class="meta-string">&quot;.out&quot;</span>, <span class="meta-string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="meta-string">&quot;[%s:%d] &quot;</span> fmt <span class="meta-string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> ldb = <span class="keyword">long</span> <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">int</span> n, h[MAXN], cnt[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ++cnt[<span class="built_in">read</span>(h[i])];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; ++i)</span><br><span class="line">        cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">    ldb ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ans += (ldb)(n + <span class="number">1</span>) / (n - cnt[h[i] - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2Lf\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P3715 魔法咒语 题解</title>
    <url>/2021/11/25/sol-p3715/</url>
    <content><![CDATA[<h2 id="P3715-魔法咒语-题解"><a href="#P3715-魔法咒语-题解" class="headerlink" title="P3715 魔法咒语 题解"></a>P3715 魔法咒语 题解</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P3715">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>多模式字符串匹配首先想到AC自动机，那么将忌讳词语建立AC自动机，整个$dp$就有一维状态设为AC自动机的状态，另一维就用字符串的长度，得到$dp_{i,s}$表示长度为$i$，匹配到AC自动机的状态为$s$的字符串个数。转移时枚举基本词汇，在AC自动机上跑出下一个状态，判断是否合法然后向后转移。时间复杂度$O(Ln \Sigma)$，$\Sigma$为忌讳词语的总长度，可通过测试点$1-6$。</p>
<p>接下来分析如何做测试点$7-10$。发现测试点$7-10$有$|S_i| \le 2$的性质（$|S_i|$为基本词汇长度），而$L \le 10^8$又给我们一个提示，即正解复杂度带有$\log L$，于是想到用矩阵快速幂来优化$dp$。考虑到因为有$|S_1| \le 2$，所以$dp_{i,s}$只依赖于$dp_{i-2,t}$，就可以参考斐波那契数列的矩阵快速幂优化来设定一个$(tot \times 2) \times (tot \times 2)$，$tot$表示AC自动机状态总数（显然$tot \le \Sigma \le 100$）的转移矩阵处理即可。时间复杂度$O((\Sigma)^3 \log L)$，可通过测试点$7-10$。</p>
<p>综上所述，总的时间复杂度为$O(\min(Ln \Sigma, \Sigma^3 \log L))$。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P3715.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P3715</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="meta-string">&quot;.in&quot;</span>, <span class="meta-string">&quot;r&quot;</span>, stdin), freopen(#x <span class="meta-string">&quot;.out&quot;</span>, <span class="meta-string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="meta-string">&quot;[%s:%d] &quot;</span> fmt <span class="meta-string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">205</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uadd</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= MOD)</span><br><span class="line">        x -= MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a[MAXN][MAXN], n;</span><br><span class="line">    <span class="built_in">matrix</span>(<span class="keyword">int</span> m) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = m;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(a));</span><br><span class="line">    &#125;</span><br><span class="line">    matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> matrix &amp;o) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="function">matrix <span class="title">ret</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</span><br><span class="line">                    <span class="built_in">uadd</span>(ret.a[i][j], a[i][k] * o.a[k][j] % MOD);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ac_automaton</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[MAXN][<span class="number">26</span>], fail[MAXN], cnt[MAXN], tot;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; s[i]; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!nxt[rt][s[i] - <span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">                nxt[rt][s[i] - <span class="string">&#x27;a&#x27;</span>] = ++tot;</span><br><span class="line">            rt = nxt[rt][s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        ++cnt[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> queue&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>())</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            <span class="keyword">if</span> (nxt[<span class="number">0</span>][i])</span><br><span class="line">                que.<span class="built_in">push</span>(nxt[<span class="number">0</span>][i]);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nxt[u][i]) &#123;</span><br><span class="line">                    fail[nxt[u][i]] = nxt[fail[u]][i];</span><br><span class="line">                    que.<span class="built_in">push</span>(nxt[u][i]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    nxt[u][i] = nxt[fail[u]][i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m, k, sum, len[MAXN];</span><br><span class="line"><span class="keyword">int</span> dp[MAXN][MAXN];</span><br><span class="line"><span class="keyword">char</span> s[MAXN][MAXN], t[MAXN][MAXN];</span><br><span class="line">ac_automaton ac;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">posi</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum * l + x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">matrix <span class="title">qpow</span><span class="params">(matrix x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="function">matrix <span class="title">ret</span><span class="params">(x.n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x.n; ++i)</span><br><span class="line">        ret.a[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x)</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ret = ret * x;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m), <span class="built_in">read</span>(k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s[i] + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, t[i] + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        len[i] = <span class="built_in">strlen</span>(s[i] + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        ac.<span class="built_in">insert</span>(t[i] + <span class="number">1</span>);</span><br><span class="line">    ac.<span class="built_in">build</span>();</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= ac.tot; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ac.cnt[j])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; ++x) &#123;</span><br><span class="line">                    <span class="keyword">int</span> p = j;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= len[x]; ++l) &#123;</span><br><span class="line">                        p = ac.nxt[p][s[x][l] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">                        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> o = p; o; o = ac.fail[o]) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (ac.cnt[o]) &#123;</span><br><span class="line">                                cnt += ac.cnt[o];</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (cnt) &#123;</span><br><span class="line">                            p = <span class="number">-1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (~p &amp;&amp; i + len[x] &lt;= k)</span><br><span class="line">                        <span class="built_in">uadd</span>(dp[i + len[x]][p], dp[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= ac.tot; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!ac.cnt[i])</span><br><span class="line">                <span class="built_in">uadd</span>(ans, dp[k][i]);</span><br><span class="line">        <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sum = ac.tot + <span class="number">1</span>;</span><br><span class="line">        <span class="function">matrix <span class="title">base</span><span class="params">(sum * <span class="number">2</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= ac.tot; ++i)</span><br><span class="line">            base.a[<span class="built_in">posi</span>(i, <span class="number">1</span>)][<span class="built_in">posi</span>(i, <span class="number">0</span>)] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= ac.tot; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ac.cnt[i])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; ++x) &#123;</span><br><span class="line">                <span class="keyword">int</span> p = i;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= len[x]; ++l) &#123;</span><br><span class="line">                    p = ac.nxt[p][s[x][l] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">                    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">                    <span class="comment">// ##sb-mistakes## AC自动机在做多模式匹配的时候**一定要跳fail指针**不然会**漏遍历很多东西**（AC自动机白学了）！！！</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> o = p; o; o = ac.fail[o]) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (ac.cnt[o]) &#123;</span><br><span class="line">                            cnt += ac.cnt[o];</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (cnt) &#123;</span><br><span class="line">                        p = <span class="number">-1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="number">-1</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (len[x] == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="built_in">uadd</span>(base.a[<span class="built_in">posi</span>(i, <span class="number">0</span>)][<span class="built_in">posi</span>(p, <span class="number">0</span>)], <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">// ##sb-mistakes## 写矩阵快速幂优化dp（尤其是dp[i]依赖于dp[i-2]这种）的时候一定要算好，不能重复加了</span></span><br><span class="line">                    <span class="comment">// uadd(base.a[posi(i, 1)][posi(p, 1)], 1);</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">uadd</span>(base.a[<span class="built_in">posi</span>(i, <span class="number">0</span>)][<span class="built_in">posi</span>(p, <span class="number">1</span>)], <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">matrix <span class="title">tmp</span><span class="params">(sum * <span class="number">2</span>)</span></span>;</span><br><span class="line">        tmp.a[<span class="number">1</span>][<span class="built_in">posi</span>(<span class="number">0</span>, <span class="number">0</span>)] = <span class="number">1</span>;</span><br><span class="line">        tmp = tmp * <span class="built_in">qpow</span>(base, k);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= ac.tot; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!ac.cnt[i])</span><br><span class="line">                <span class="built_in">uadd</span>(ans, tmp.a[<span class="number">1</span>][<span class="built_in">posi</span>(i, <span class="number">0</span>)]);</span><br><span class="line">        <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P7154 Sleeping Cows P 题解</title>
    <url>/2021/11/25/sol-p7154/</url>
    <content><![CDATA[<h2 id="P7154-Sleeping-Cows-P-题解"><a href="#P7154-Sleeping-Cows-P-题解" class="headerlink" title="P7154 Sleeping Cows P 题解"></a>P7154 Sleeping Cows P 题解</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P7154">题目链接</a></p>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>先分析性质。首先排序不影响答案所以将其排序。若$t_i$所能匹配到的最大$s$的下标为$x$，则如果放弃$t_i$就意味着$s_1$到$s_x$都要被匹配。所以在此思路上$dp$则需要维护两个指针分别指向最小的还没考虑的$s$和$t$，每次选择较小的一边进行更新。不妨将两个数组合并顺序去做。</p>
<p>考虑$dp$，设$dp_{i,j,0/1}$表示考虑到新数组的第$i$个数，目前有$j$个$s$被选入匹配但还没确定匹配谁，$1$到$i-1$中是否都已经被选入的方案数。那么得到转移方程：</p>
<p>若元素$i$在$s$中，则</p>
<script type="math/tex; mode=display">
    \begin{align}
    dp_{i,j,0} &= dp_{i-1,j-1,0} + dp_{i-1,j,0} + dp_{i-1,j,1} \\
    dp_{i,j,1} &= dp_{i-1,j-1,1}
    \end{align}</script><p>若元素$i$在$t$中，则</p>
<script type="math/tex; mode=display">
    \begin{align}
    dp_{i,j,0} &= (j+1)dp_{i-1,j+1,0} \\
    dp_{i,j,1} = dp_{i-1,j,1} + (j+1)dp_{i-1,j+1,1}
    \end{align}</script><p>最终答案就是 $dp_{n,0,0} + dp_{n,0,1}$。</p>
<p>时间复杂度$O(n^2)$。</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P7154.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/solution/P7154</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="meta-string">&quot;.in&quot;</span>, <span class="meta-string">&quot;r&quot;</span>, stdin), freopen(#x <span class="meta-string">&quot;.out&quot;</span>, <span class="meta-string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="meta-string">&quot;[%s:%d] &quot;</span> fmt <span class="meta-string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">6e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, op;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;o) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x == o.x ? op &lt; o.op : x &lt; o.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m, s[MAXN], t[MAXN], dp[<span class="number">2</span>][MAXN][<span class="number">2</span>];</span><br><span class="line">node a[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= MOD)</span><br><span class="line">        x -= MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(s[i]), a[++m] = &#123;s[i], <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(t[i]), a[++m] = &#123;t[i], <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + m + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">    dp[u ^ <span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i, u ^= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp[u], <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dp[u]));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i].op == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">add</span>(dp[u][j][<span class="number">0</span>], dp[u ^ <span class="number">1</span>][j][<span class="number">0</span>]);</span><br><span class="line">                <span class="built_in">add</span>(dp[u][j][<span class="number">0</span>], dp[u ^ <span class="number">1</span>][j][<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span> (j) &#123;</span><br><span class="line">                    <span class="built_in">add</span>(dp[u][j][<span class="number">0</span>], dp[u ^ <span class="number">1</span>][j - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">                    <span class="built_in">add</span>(dp[u][j][<span class="number">1</span>], dp[u ^ <span class="number">1</span>][j - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">add</span>(dp[u][j][<span class="number">0</span>], dp[u ^ <span class="number">1</span>][j + <span class="number">1</span>][<span class="number">0</span>] * (j + <span class="number">1</span>) % MOD);</span><br><span class="line">                <span class="built_in">add</span>(dp[u][j][<span class="number">1</span>], dp[u ^ <span class="number">1</span>][j + <span class="number">1</span>][<span class="number">1</span>] * (j + <span class="number">1</span>) % MOD);</span><br><span class="line">                <span class="built_in">add</span>(dp[u][j][<span class="number">1</span>], dp[u ^ <span class="number">1</span>][j][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">add</span>(sum, dp[u ^ <span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">add</span>(sum, dp[u ^ <span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">write</span>(sum), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>CF575A Fibonotci 题解</title>
    <url>/2021/11/24/sol-cf575a/</url>
    <content><![CDATA[<h2 id="CF575A-Fibonotci-题解"><a href="#CF575A-Fibonotci-题解" class="headerlink" title="CF575A Fibonotci 题解"></a>CF575A Fibonotci 题解</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/CF575A">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>$K \le 10^{18}$ 显然矩阵快速幂优化。矩阵转移方程如下：</p>
<script type="math/tex; mode=display">
    \begin{bmatrix}
        f_i & f_{i-1}
    \end{bmatrix}
    =
    \begin{bmatrix}
        f_{i-1} & f_{i-2}
    \end{bmatrix}
    \begin{pmatrix}
        s_{i-1} & 1 \\
        s_{i-2} & 0
    \end{pmatrix}</script><p>并套路地设</p>
<script type="math/tex; mode=display">
    M_i =
    \begin{pmatrix}
        s_{i-1} & 1 \\
        s_{i-2} & 0
    \end{pmatrix}</script><p>最终答案即为</p>
<script type="math/tex; mode=display">
    \begin{bmatrix}
        1 & 0
    \end{bmatrix}
    \times
    \prod_{i=1}^{k}{
        \begin{pmatrix}
            s_{i-1} & 1 \\
            s_{i-2} & 0
        \end{pmatrix}
    }
    =
    \begin{bmatrix}
        1 & 0
    \end{bmatrix}
    \times
    \prod_{i=1}^{k}{M_i}</script><p>由于函数大部分具有周期性，不妨先按照分成若干个类似$[i\cdot n, (i+1)\cdot n)$的区间分别处理。</p>
<p>对于未修改过的区间直接预处理$[0,n)$的矩阵乘积并快速幂计算。</p>
<p>考虑修改的区间。为了避免对一个$s_i$的修改影响到两个不同的区间，可以先将对$s_i$的修改映射到对矩阵$M_{i+1}$和$M_{i+2}$的修改。然后发现处理一个区间时需要多次单点修改和一次区间查询，用线段树维护即可。</p>
<p>需要注意的是一些特判（基本上是$k \lt n$的情况）。</p>
<p>时间复杂度$O((n + m) (\log{n} + \log{k}))$。</p>
<p><del>特判不取模，爆零两行泪/kk</del></p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           CF575A.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/CF575A</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="meta-string">&quot;.in&quot;</span>, <span class="meta-string">&quot;r&quot;</span>, stdin), freopen(#x <span class="meta-string">&quot;.out&quot;</span>, <span class="meta-string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="meta-string">&quot;[%s:%d] &quot;</span> fmt <span class="meta-string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> pii = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> t, s1, s2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m, k, p, s[MAXN];</span><br><span class="line">pii a[MAXN];</span><br><span class="line">node b[MAXN * <span class="number">2</span>];</span><br><span class="line">unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">return</span> x &gt;= p ? x - p : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">matrix</span>() &#123; a[<span class="number">0</span>][<span class="number">0</span>] = a[<span class="number">0</span>][<span class="number">1</span>] = a[<span class="number">1</span>][<span class="number">0</span>] = a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="built_in">matrix</span>(<span class="keyword">int</span> x) &#123; a[<span class="number">0</span>][<span class="number">0</span>] = a[<span class="number">1</span>][<span class="number">1</span>] = x, a[<span class="number">0</span>][<span class="number">1</span>] = a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="built_in">matrix</span>(<span class="keyword">int</span> s1, <span class="keyword">int</span> s2) &#123; a[<span class="number">0</span>][<span class="number">0</span>] = s2, a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>, a[<span class="number">1</span>][<span class="number">0</span>] = s1, a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>; &#125;</span><br><span class="line">    matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> matrix &amp;o) <span class="keyword">const</span> &#123;</span><br><span class="line">        matrix ret;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; ++k)</span><br><span class="line">                    ret.a[i][j] = <span class="built_in">add</span>(ret.a[i][j], a[i][k] * o.a[k][j] % p);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> matrix <span class="keyword">operator</span>^(matrix x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">        matrix ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x)</span><br><span class="line">            <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ret = ret * x;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> li (i &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri (i &lt;&lt; 1) | 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson li, l, mid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson ri, mid + 1, r</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment_tree</span> &#123;</span></span><br><span class="line">    matrix nd[MAXN * <span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        nd[i] = nd[li] * nd[ri];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p, matrix v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in"><span class="keyword">void</span></span>(nd[i] = v);</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (p &lt;= mid)</span><br><span class="line">            <span class="built_in">update</span>(lson, p, v);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">update</span>(rson, p, v);</span><br><span class="line">        <span class="built_in">pushup</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">matrix <span class="title">query</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">            <span class="keyword">return</span> nd[i];</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        matrix ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid)</span><br><span class="line">            ret = ret * <span class="built_in">query</span>(lson, ql, qr);</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid)</span><br><span class="line">            ret = ret * <span class="built_in">query</span>(rson, ql, qr);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">segment_tree tr;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(k), <span class="built_in">read</span>(p);</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(s[i]);</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">read</span>(a[i].first), <span class="built_in">read</span>(a[i].second);</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + m + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">1</span> &amp;&amp; a[i].first + <span class="number">1</span> == a[i - <span class="number">1</span>].first + <span class="number">2</span>)</span><br><span class="line">            b[++cnt] = &#123;a[i].first + <span class="number">1</span>, a[i - <span class="number">1</span>].second, a[i].second&#125;;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span> || a[i].first + <span class="number">1</span> != a[i - <span class="number">1</span>].first + <span class="number">2</span>)</span><br><span class="line">            b[++cnt] = &#123;a[i].first + <span class="number">1</span>, s[(a[i].first - <span class="number">1</span>) % n], a[i].second&#125;;</span><br><span class="line">        <span class="keyword">if</span> (i == m || a[i].first + <span class="number">2</span> != a[i + <span class="number">1</span>].first + <span class="number">1</span>)</span><br><span class="line">            b[++cnt] = &#123;a[i].first + <span class="number">2</span>, a[i].second, s[(a[i].first + <span class="number">1</span>) % n]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (cnt &amp;&amp; b[cnt].t &gt; k)</span><br><span class="line">        --cnt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        tr.<span class="built_in">update</span>(<span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>, i, <span class="built_in">matrix</span>(s[(i + n - <span class="number">2</span>) % n], s[(i + n - <span class="number">1</span>) % n]));</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span> || k == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">write</span>(k % p), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>), <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; n) &#123;</span><br><span class="line">        matrix ret;</span><br><span class="line">        ret.a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">write</span>((ret * tr.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">2</span>, k)).a[<span class="number">0</span>][<span class="number">0</span>]), <span class="built_in">putchar</span>(<span class="string">&#x27;\0&#x27;</span>), <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    matrix sum = tr.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    matrix base = tr.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">2</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">1</span>, pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (pos &lt;= cnt) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = b[pos].t / n;</span><br><span class="line">        base = base * (sum ^ (cur - pre - <span class="number">1</span>)), pre = cur;</span><br><span class="line">        <span class="keyword">int</span> cl = <span class="built_in">max</span>(<span class="number">2ll</span>, cur * n), cr = <span class="built_in">min</span>(k, cur * n + n - <span class="number">1</span>), lst = pos;</span><br><span class="line">        <span class="keyword">while</span> (pos &lt;= cnt &amp;&amp; cl &lt;= b[pos].t &amp;&amp; b[pos].t &lt;= cr) &#123;</span><br><span class="line">            tr.<span class="built_in">update</span>(<span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>, b[pos].t % n, <span class="built_in">matrix</span>(b[pos].s1, b[pos].s2));</span><br><span class="line">            ++pos;</span><br><span class="line">        &#125;</span><br><span class="line">        base = base * tr.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>, cl % n, cr % n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = lst; j &lt; pos; ++j)</span><br><span class="line">            tr.<span class="built_in">update</span>(<span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>, b[j].t % n, <span class="built_in">matrix</span>(s[(b[j].t - <span class="number">2</span>) % n], s[(b[j].t - <span class="number">1</span>) % n]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cur = k / n;</span><br><span class="line">    <span class="keyword">if</span> (pre &lt; cur) &#123;</span><br><span class="line">        base = base * (sum ^ (cur - pre - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = cur * n; i &lt;= k; ++i)</span><br><span class="line">            base = base * <span class="built_in">matrix</span>(s[(i - <span class="number">2</span>) % n], s[(i - <span class="number">1</span>) % n]);</span><br><span class="line">    &#125;</span><br><span class="line">    matrix ret;</span><br><span class="line">    ret.a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    ret = ret * base;</span><br><span class="line">    <span class="built_in">write</span>(ret.a[<span class="number">0</span>][<span class="number">0</span>]), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P6144 Help Yourself 题解</title>
    <url>/2021/11/23/sol-p6144/</url>
    <content><![CDATA[<h2 id="P6144-Help-Yourself-题解"><a href="#P6144-Help-Yourself-题解" class="headerlink" title="P6144 Help Yourself 题解"></a>P6144 Help Yourself 题解</h2><p><del>应该是第一次在学校午自习时卷OI（然后sxy走进来看了我一眼啥也没说）</del></p>
<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P6144">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>对于这种若干区间求值的题目，肯定先按照左端点或者右端点排个序。</p>
<p>不妨先来考虑对于$k=1$的情况dp状态怎么设。套路地设$dp_i$表示以$i$为当前覆盖的最右端点的联通块数目之和，下面要加入一条线段$[l,r]$，思考插入这条线段对$dp$值的影响。对于$i\lt r$的所有$dp_i$不会被影响，而对每个$0 \le i \lt l$，$dp_r$的值需加上$dp_i + 1$，对每个$l \le i \lt r$，$dp_r$的值需加上$dp_i$。最后对于$i \gt r$，显然插入这么一条线段不会影响到其右断点，但取该线段和不取该线段各有一种可能，所以要将整个区间乘上2.</p>
<p>分析到这里，如何维护$dp$就一目了然了：使用线段树维护单点加法和区间乘法以及区间求和即可。</p>
<p>接下来计算$k \neq 1$的情况。不难发现每个$dp_{k,i}$都可以被表示成$\sum\limits_i{b_i^k}$的形式（$b_i$是每种子集的联通块数目）。而区间乘上2直接做，求和也直接线段树，求$\sum\limits_{i=0}^{l-1}{(dp_{k,i}+1)}$用二项式定理拆开得到$\sum\limits_{j=0}^{k}\sum\limits_{i=0}^{l-1}{\binom{k}{j} \times dp_{j,i}}$即可得到答案。</p>
<p>所以时间复杂度$O(k^2n\log{n})$随便过。<del>这比前面两道黑题好些多了</del></p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P6144.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P6144</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="meta-string">&quot;.in&quot;</span>, <span class="meta-string">&quot;r&quot;</span>, stdin), freopen(#x <span class="meta-string">&quot;.out&quot;</span>, <span class="meta-string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="meta-string">&quot;[%s:%d] &quot;</span> fmt <span class="meta-string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXK = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">return</span> x &gt;= MOD ? x - MOD : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;o) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> l == o.l ? r &lt; o.r : l &lt; o.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> li (i &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri (i &lt;&lt; 1) | 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson li, l, mid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson ri, mid + 1, r</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment_tree</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> sum[MAXM * <span class="number">4</span>], tag[MAXM * <span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        sum[i] = <span class="built_in">add</span>(sum[li], sum[ri]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getdown</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        sum[i] = sum[i] * val % MOD;</span><br><span class="line">        tag[i] = tag[i] * val % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tag[i] != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">getdown</span>(li, tag[i]);</span><br><span class="line">            <span class="built_in">getdown</span>(ri, tag[i]);</span><br><span class="line">            tag[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sum[i] = <span class="number">0</span>; tag[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in"><span class="keyword">void</span></span>(sum[i] = x);</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(lson, x), <span class="built_in">build</span>(rson, x);</span><br><span class="line">        <span class="built_in">pushup</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> q, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in"><span class="keyword">void</span></span>(sum[i] = <span class="built_in">add</span>(sum[i], val));</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">pushdown</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (q &lt;= mid)</span><br><span class="line">            <span class="built_in">update</span>(lson, q, val);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">update</span>(rson, q, val);</span><br><span class="line">        <span class="built_in">pushup</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ql &gt; qr)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getdown</span>(i, val);</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">pushdown</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid)</span><br><span class="line">            <span class="built_in">modify</span>(lson, ql, qr, val);</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid)</span><br><span class="line">            <span class="built_in">modify</span>(rson, ql, qr, val);</span><br><span class="line">        <span class="built_in">pushup</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ql &gt; qr)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">            <span class="keyword">return</span> sum[i];</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, ret = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">pushdown</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid)</span><br><span class="line">            ret = <span class="built_in">add</span>(ret, <span class="built_in">query</span>(lson, ql, qr));</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid)</span><br><span class="line">            ret = <span class="built_in">add</span>(ret, <span class="built_in">query</span>(rson, ql, qr));</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m, k, c[MAXK][MAXK];</span><br><span class="line">node a[MAXN];</span><br><span class="line">segment_tree tr[MAXK];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(k), m = n * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(a[i].l), <span class="built_in">read</span>(a[i].r);</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">    c[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">        c[i][<span class="number">0</span>] = c[i][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j)</span><br><span class="line">            c[i][j] = <span class="built_in">add</span>(c[i - <span class="number">1</span>][j], c[i - <span class="number">1</span>][j - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; ++i)</span><br><span class="line">        tr[i].<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, m, <span class="number">0</span>);</span><br><span class="line">    tr[<span class="number">0</span>].<span class="built_in">update</span>(<span class="number">1</span>, <span class="number">0</span>, m, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt;= j; ++l)</span><br><span class="line">                sum = <span class="built_in">add</span>(sum, c[j][l] * tr[l].<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">0</span>, m, <span class="number">0</span>, a[i].l - <span class="number">1</span>) % MOD);</span><br><span class="line">            sum = <span class="built_in">add</span>(sum, tr[j].<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">0</span>, m, a[i].l, a[i].r));</span><br><span class="line">            tr[j].<span class="built_in">update</span>(<span class="number">1</span>, <span class="number">0</span>, m, a[i].r, sum);</span><br><span class="line">            tr[j].<span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">0</span>, m, a[i].r + <span class="number">1</span>, m, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">write</span>(tr[k].<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">0</span>, m, <span class="number">1</span>, m)), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>CF710F String Set Queries 题解</title>
    <url>/2021/11/22/sol-cf710f/</url>
    <content><![CDATA[<h2 id="CF710F-String-Set-Queries-题解"><a href="#CF710F-String-Set-Queries-题解" class="headerlink" title="CF710F String Set Queries 题解"></a>CF710F String Set Queries 题解</h2><h3 id="又卷出来一道黑题哈哈哈"><a href="#又卷出来一道黑题哈哈哈" class="headerlink" title="又卷出来一道黑题哈哈哈"></a><del>又卷出来一道黑题哈哈哈</del></h3><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/CF710F">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>首先看到多模匹配想到AC自动机。</p>
<p>这个强制在线看起来很麻烦的样子，因为AC自动机必须要离线下来才能build。所以就引入一种新的算法叫做“二进制分组”。</p>
<blockquote>
<h3 id="二进制分组"><a href="#二进制分组" class="headerlink" title="二进制分组"></a>二进制分组</h3><p><del>这个算法一看名字就很$\log$</del></p>
<p>维护一个stack，里面的值都是2的次幂。每次操作在栈顶插入一个1，如果栈顶的两个数相同就将其合并，并改为两个数的和。查询的时候遍历整个stack对每个值进行查询。</p>
<p>这样假设每次合并和查询stack中一个值的复杂度都是$O(x)$的（这里$x$指的是栈内当前值的大小）显然查询的复杂度是$O(x)$的，然后插入的复杂度是$O(x\log{n})$，因为每个插入的数只会被合并$\log{n}$次。总复杂度为$O(qx\log{n})$。</p>
</blockquote>
<p>而在这道题中，$qx = \sum{|S|} = 3 \times 10^5$，所以显然是能过的。</p>
<p>于是这道题本身并不算难，但是评黑的原因我认为是它<strong>毒瘤卡空间！！！</strong></p>
<p>关于我代码中卡空间的<del>奇技淫巧</del>就是将AC自动机的节点开成内存池，动态分配（代码中<code>node* malloc_p()</code>的作用就在此）。还有就是注意AC自动机在构建的时候把$cnt$数组预处理好，这样就不用每次跳$fail$指针了（我代码一开始就在这里TLE了）。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           CF710F.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/CF710F</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="meta-string">&quot;.in&quot;</span>, <span class="meta-string">&quot;r&quot;</span>, stdin), freopen(#x <span class="meta-string">&quot;.out&quot;</span>, <span class="meta-string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="meta-string">&quot;[%s:%d] &quot;</span> fmt <span class="meta-string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> lli = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXK = <span class="number">22</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INFI = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">bool</span> m_be;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> cnt, fail, nxt[<span class="number">26</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cnt = fail = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fill</span>(nxt, nxt + <span class="number">26</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> ntot, ntop;</span><br><span class="line">node nnd[MAXN];</span><br><span class="line">node *buf[MAXN];</span><br><span class="line"><span class="function">node* <span class="title">malloc_p</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ntop ? buf[ntop--] : &amp;nnd[++ntot];</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ac_automaton</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> tot;</span><br><span class="line">    node *nd[MAXN];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        nd[tot = <span class="number">0</span>] = <span class="built_in">malloc_p</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= tot; ++i)</span><br><span class="line">            nd[i]-&gt;<span class="built_in">clear</span>(), buf[++ntop] = nd[i];</span><br><span class="line">        nd[tot = <span class="number">0</span>] = <span class="built_in">malloc_p</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; s[i]; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!nd[rt]-&gt;nxt[s[i] - <span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">                nd[rt]-&gt;nxt[s[i] - <span class="string">&#x27;a&#x27;</span>] = (nd[++tot] = <span class="built_in">malloc_p</span>(), tot);</span><br><span class="line">            rt = nd[rt]-&gt;nxt[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        ++nd[rt]-&gt;cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> queue&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>())</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            <span class="keyword">if</span> (nd[<span class="number">0</span>]-&gt;nxt[i])</span><br><span class="line">                que.<span class="built_in">push</span>(nd[<span class="number">0</span>]-&gt;nxt[i]);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            nd[u]-&gt;cnt += nd[nd[u]-&gt;fail]-&gt;cnt;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nd[u]-&gt;nxt[i]) &#123;</span><br><span class="line">                    nd[nd[u]-&gt;nxt[i]]-&gt;fail = nd[nd[u]-&gt;fail]-&gt;nxt[i];</span><br><span class="line">                    que.<span class="built_in">push</span>(nd[u]-&gt;nxt[i]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    nd[u]-&gt;nxt[i] = nd[nd[u]-&gt;fail]-&gt;nxt[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">lli <span class="title">query</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">        lli ret = <span class="number">0</span>, p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; s[i]; ++i) &#123;</span><br><span class="line">            p = nd[p]-&gt;nxt[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            ret += nd[p]-&gt;cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group</span> &#123;</span></span><br><span class="line">    string dat[MAXN];</span><br><span class="line">    ac_automaton ac[MAXK];</span><br><span class="line">    <span class="keyword">int</span> n, top, sl[MAXK], sr[MAXK];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAXK; ++i)</span><br><span class="line">            ac[i].<span class="built_in">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">        dat[++n] = s;</span><br><span class="line">        ++top, sl[top] = n, sr[top] = n;</span><br><span class="line">        ac[top].<span class="built_in">clear</span>(), ac[top].<span class="built_in">insert</span>(s), ac[top].<span class="built_in">build</span>();</span><br><span class="line">        <span class="keyword">while</span> (top &gt; <span class="number">1</span> &amp;&amp; sr[top] - sl[top] == sr[top - <span class="number">1</span>] - sl[top - <span class="number">1</span>]) &#123;</span><br><span class="line">            sr[top - <span class="number">1</span>] = sr[top], ac[top--].<span class="built_in">clear</span>();</span><br><span class="line">            ac[top].<span class="built_in">clear</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = sl[top]; i &lt;= sr[top]; ++i)</span><br><span class="line">                ac[top].<span class="built_in">insert</span>(dat[i].<span class="built_in">c_str</span>());</span><br><span class="line">            ac[top].<span class="built_in">build</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">lli <span class="title">query</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">        lli ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; ++i)</span><br><span class="line">            ret += ac[i].<span class="built_in">query</span>(s);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> m, opt;</span><br><span class="line"><span class="keyword">char</span> s[MAXN];</span><br><span class="line">group add, sub;</span><br><span class="line"><span class="keyword">bool</span> m_ed;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">debug</span>(<span class="string">&quot;memory = %.5lfMB&quot;</span>, (&amp;m_ed - &amp;m_be) / <span class="number">1024.0</span> / <span class="number">1024.0</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">int</span> mm = m;</span><br><span class="line">    add.<span class="built_in">init</span>(), sub.<span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%s&quot;</span>, &amp;opt, s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            add.<span class="built_in">insert</span>(s + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">2</span>) &#123;</span><br><span class="line">            sub.<span class="built_in">insert</span>(s + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, add.<span class="built_in">query</span>(s + <span class="number">1</span>) - sub.<span class="built_in">query</span>(s + <span class="number">1</span>));</span><br><span class="line">            <span class="built_in">fflush</span>(stdout);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>P4632 New Home 题解</title>
    <url>/2021/11/22/sol-p4632/</url>
    <content><![CDATA[<h2 id="P4632-New-Home-题解"><a href="#P4632-New-Home-题解" class="headerlink" title="P4632 New Home 题解"></a>P4632 New Home 题解</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/P4632">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>把询问离线下来，考虑3种操作：新开一家商店，关掉一家商店，查询一个点的不方便指数。</p>
<p>先考虑查询。显然具有二分性，考虑判断一个区间 $[l,r]$ 是否包含了所有的颜色。这种区间统计颜色的题目有一个套路的解法，即对于一个点$i$，保存 $pre_i$ 表示 $i$ 的上一个相同颜色出现的位置，区间 $[l,r]$ 的答案即为 $\sum\limits_{i=l}^{r}{(pre_i \lt l)}$ 。</p>
<p>但是这样不太便于维护，于是思考到$pre$数组的另一个性质：若$\min\limits_{i=r+1}^{n}{pre_i} \lt l$，则说明必有一种颜色没有出现在$[l,r]$中。而我们二分+判断并不需要统计颜色的<strong>个数</strong>，而是只需要统计<strong>是否为k个</strong>。</p>
<p>于是就很容易维护这个$pre$数组并统计答案：将$pre$放在最小值线段树上即可。注意如果某个颜色没有出现在$[r+1,n]$的话会少被考虑到，所以在最左边和最右边各开一个大节点，作为所有颜色公用。</p>
<p>但是这道题有个很恶心的地方，在于每个点可能有多个不同颜色的商店。所以一种做法为在线段树的每个叶子节点开一个set暴力维护。</p>
<p>最后对于修改操作也只需要对每个颜色暴力维护一个set，找到前驱和后继并在线段树上修改即可。</p>
<p>时间复杂度$O(n\log^3{n})$<del>（跑得飞快）</del></p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           P4632.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/P4632</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="meta-string">&quot;.in&quot;</span>, <span class="meta-string">&quot;r&quot;</span>, stdin), freopen(#x <span class="meta-string">&quot;.out&quot;</span>, <span class="meta-string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="meta-string">&quot;[%s:%d] &quot;</span> fmt <span class="meta-string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> pii = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> t, p, c, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;o) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t &lt; o.t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> t, p, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> query &amp;o) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t &lt; o.t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> li (i &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri (i &lt;&lt; 1) | 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson li, l, mid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson ri, mid + 1, r</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment_tree</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> mn[MAXN * <span class="number">12</span>];</span><br><span class="line">    set&lt;pii&gt; st[MAXN * <span class="number">3</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        mn[i] = <span class="built_in">min</span>(mn[li], mn[ri]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        mn[i] = INFL;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(lson), <span class="built_in">build</span>(rson);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> q, <span class="keyword">int</span> c, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            st[l].<span class="built_in">insert</span>(&#123;p, c&#125;);</span><br><span class="line">            mn[i] = st[l].<span class="built_in">size</span>() ? st[l].<span class="built_in">begin</span>()-&gt;first : INFL;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (q &lt;= mid)</span><br><span class="line">            <span class="built_in">insert</span>(lson, q, c, p);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">insert</span>(rson, q, c, p);</span><br><span class="line">        <span class="built_in">pushup</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> q, <span class="keyword">int</span> c, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            st[l].<span class="built_in">erase</span>(&#123;p, c&#125;);</span><br><span class="line">            mn[i] = st[l].<span class="built_in">size</span>() ? st[l].<span class="built_in">begin</span>()-&gt;first : INFL;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (q &lt;= mid)</span><br><span class="line">            <span class="built_in">erase</span>(lson, q, c, p);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">erase</span>(rson, q, c, p);</span><br><span class="line">        <span class="built_in">pushup</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">            <span class="keyword">return</span> mn[i];</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, ret = INFL;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid)</span><br><span class="line">            ret = <span class="built_in">min</span>(ret, <span class="built_in">query</span>(lson, ql, qr));</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid)</span><br><span class="line">            ret = <span class="built_in">min</span>(ret, <span class="built_in">query</span>(rson, ql, qr));</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n, k, q, sig, len;</span><br><span class="line"><span class="keyword">int</span> pos[MAXN * <span class="number">3</span>], answ[MAXN];</span><br><span class="line">node bd[MAXN * <span class="number">2</span>];</span><br><span class="line">query qr[MAXN];</span><br><span class="line">multiset&lt;<span class="keyword">int</span>&gt; col[MAXN];</span><br><span class="line">segment_tree tr;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.id &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        col[x.c].<span class="built_in">insert</span>(x.p);</span><br><span class="line">        <span class="keyword">if</span> (col[x.c].<span class="built_in">count</span>(x.p) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">auto</span> pre = <span class="built_in">prev</span>(col[x.c].<span class="built_in">lower_bound</span>(x.p));</span><br><span class="line">            <span class="keyword">auto</span> nxt = col[x.c].<span class="built_in">upper_bound</span>(x.p);</span><br><span class="line">            tr.<span class="built_in">erase</span>(<span class="number">1</span>, <span class="number">1</span>, sig, *nxt, x.c, *pre);</span><br><span class="line">            tr.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="number">1</span>, sig, *nxt, x.c, x.p);</span><br><span class="line">            tr.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="number">1</span>, sig, x.p, x.c, *pre);            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        col[x.c].<span class="built_in">erase</span>(col[x.c].<span class="built_in">find</span>(x.p));</span><br><span class="line">        <span class="keyword">if</span> (col[x.c].<span class="built_in">count</span>(x.p) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">auto</span> pre = <span class="built_in">prev</span>(col[x.c].<span class="built_in">lower_bound</span>(x.p));</span><br><span class="line">            <span class="keyword">auto</span> nxt = col[x.c].<span class="built_in">upper_bound</span>(x.p);</span><br><span class="line">            tr.<span class="built_in">erase</span>(<span class="number">1</span>, <span class="number">1</span>, sig, *nxt, x.c, x.p);</span><br><span class="line">            tr.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="number">1</span>, sig, *nxt, x.c, *pre);</span><br><span class="line">            tr.<span class="built_in">erase</span>(<span class="number">1</span>, <span class="number">1</span>, sig, x.p, x.c, *pre);            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> ps, <span class="keyword">int</span> ln)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = <span class="built_in">lower_bound</span>(pos + <span class="number">1</span>, pos + sig + <span class="number">1</span>, ps - ln) - pos - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> v = <span class="built_in">upper_bound</span>(pos + <span class="number">1</span>, pos + sig + <span class="number">1</span>, ps + ln) - pos;</span><br><span class="line">    <span class="keyword">return</span> tr.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, sig, v, sig) &gt; u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(k), <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, t, a, b;</span><br><span class="line">        <span class="built_in">read</span>(x), <span class="built_in">read</span>(t), <span class="built_in">read</span>(a), <span class="built_in">read</span>(b);</span><br><span class="line">        bd[++len] = &#123;a, x, t, i&#125;;</span><br><span class="line">        bd[++len] = &#123;b + <span class="number">1</span>, x, t, -i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i)</span><br><span class="line">        <span class="built_in">read</span>(qr[i].p), <span class="built_in">read</span>(qr[i].t), qr[i].id = i;</span><br><span class="line">    pos[++sig] = INFL;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">        pos[++sig] = bd[i].p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i)</span><br><span class="line">        pos[++sig] = qr[i].p;</span><br><span class="line">    <span class="built_in">sort</span>(pos + <span class="number">1</span>, pos + sig + <span class="number">1</span>);</span><br><span class="line">    sig = <span class="built_in">unique</span>(pos + <span class="number">1</span>, pos + sig + <span class="number">1</span>) - pos - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">        bd[i].p = <span class="built_in">lower_bound</span>(pos + <span class="number">1</span>, pos + sig + <span class="number">1</span>, bd[i].p) - pos;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i)</span><br><span class="line">        qr[i].p = <span class="built_in">lower_bound</span>(pos + <span class="number">1</span>, pos + sig + <span class="number">1</span>, qr[i].p) - pos;</span><br><span class="line">    <span class="built_in">sort</span>(bd + <span class="number">1</span>, bd + len + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">sort</span>(qr + <span class="number">1</span>, qr + q + <span class="number">1</span>);</span><br><span class="line">    tr.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, sig);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">        col[i].<span class="built_in">insert</span>(<span class="number">0</span>), col[i].<span class="built_in">insert</span>(sig);</span><br><span class="line">        tr.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="number">1</span>, sig, sig, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cbd = <span class="number">1</span>, cqr = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (cqr &lt;= q) &#123;</span><br><span class="line">        <span class="keyword">while</span> (cbd &lt;= len &amp;&amp; bd[cbd].t &lt;= qr[cqr].t)</span><br><span class="line">            <span class="built_in">insert</span>(bd[cbd++]);</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0x3f3f3f3f</span>, ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(pos[qr[cqr].p], mid))</span><br><span class="line">                r = mid - <span class="number">1</span>, ans = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        answ[qr[cqr++].id] = ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i)</span><br><span class="line">        <span class="built_in">write</span>(answ[i]), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>CF702F T-Shirts 题解</title>
    <url>/2021/11/22/sol-cf702f/</url>
    <content><![CDATA[<h2 id="CF702F-T-Shirts-题解"><a href="#CF702F-T-Shirts-题解" class="headerlink" title="CF702F T-Shirts 题解"></a>CF702F T-Shirts 题解</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.luogu.com.cn/problem/CF702F">题目链接</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>首先不难想到朴素的做法，对每个人枚举所有T恤。但是这样显然无法进一步优化。</p>
<p>但是发现可以按顺序枚举所有T恤$i$，对每个人$j$若$v_j \ge c_i$则将$v_j$减去$c_i$，同时将$cnt_j$加一。</p>
<p>下面考虑如何用数据结构优化。我们需要一个可以查找第一个$\ge c_i$并且能支持区间减去$c_i$的数据结构，这个可以用平衡树做到。似乎其他人用的都是FHQ的做法，但我不会FHQ所以只能用splay代替了。</p>
<p>每次操作可以把整个区间分为三个部分：$[0,c_i)$，$[c_i,2c_i)$和$[2c_i,+\infty)$。第一个区间显然不需要操作，第二个区间我们暴力删除并重新插入，第三个区间维护一个tag标记。</p>
<p>这样看起来会T飞，然而来计算一下时间复杂度就会发现，对于一个在$[c_i,2c_i)$中的数每次减去$c_i$，相当于最少每次$\times \frac{1}{2}$，所以一个数$v_i$最多会被暴力修改$\log_2{v_i}$次，所以复杂度是可以接受的。</p>
<p>再来考虑如何在splay上操作。我们找到$c_i$的前驱，记为节点$u$，再找到$2c_i-1$的后继，记为节点$v$，只需要将$u$转到根节点，$v$转到根节点的右儿子，这样$v$和$v$的右儿子都在区间$[2c_i,+\infty)$中，维护tag并懒惰更新；而$v$的左儿子全都在区间$[c_i,2c_i)$中，只需遍历一遍重新插入即可；其他节点都不需要改动。</p>
<p>最后就是每次操作注意顺序，一定要先更新$[c_i,2c_i)$再更新$[2c_i,+\infty)$，不然你会发现懒惰标记打下去平衡树不满足二叉搜索树的性质了（别问我怎么知道的，我就因为这个调了一下午）。</p>
<p>时间复杂度$O(n\log^2{n})$，空间复杂度如果节点重复利用的话可以做到$O(n)$（具体见代码）。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file:           2021.11.21-1.cpp</span></span><br><span class="line"><span class="comment"> * @author:         yaoxi-std</span></span><br><span class="line"><span class="comment"> * @url:            https://www.luogu.com.cn/problem/CF702F</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize (&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> resetIO(x) \</span></span><br><span class="line"><span class="meta">    freopen(#x <span class="meta-string">&quot;.in&quot;</span>, <span class="meta-string">&quot;r&quot;</span>, stdin), freopen(#x <span class="meta-string">&quot;.out&quot;</span>, <span class="meta-string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(fmt, ...) \</span></span><br><span class="line"><span class="meta">    fprintf(stderr, <span class="meta-string">&quot;[%s:%d] &quot;</span> fmt <span class="meta-string">&quot;\n&quot;</span>, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp&amp; <span class="title">read</span><span class="params">(_Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        sign |= (ch == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (ch = <span class="built_in">getchar</span>(); <span class="built_in">isdigit</span>(ch); ch = <span class="built_in">getchar</span>())</span><br><span class="line">            tmp /= <span class="number">10.0</span>, x += tmp * (ch ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> sign ? (x = -x) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(_Tp x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>((x % <span class="number">10</span>) ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val, id, tag, cnt, tac;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;o) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> val == o.val ? id &lt; o.id : val &lt; o.val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> node &amp;o) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> val == o.val &amp;&amp; id == o.id;</span><br><span class="line">    &#125;</span><br><span class="line">    node&amp; <span class="keyword">operator</span>+=(<span class="keyword">int</span> x) &#123;</span><br><span class="line">        val += x, tag += x, ++cnt, ++tac;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node&amp; <span class="keyword">operator</span>+=(<span class="keyword">const</span> node &amp;o) &#123;</span><br><span class="line">        val += o.tag, tag += o.tag;</span><br><span class="line">        cnt += o.tac, tac += o.tac;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">splay_tree</span> &#123;</span></span><br><span class="line">    node val[MAXN];</span><br><span class="line">    <span class="keyword">int</span> rt, tot, top, buf[MAXN];</span><br><span class="line">    <span class="keyword">int</span> siz[MAXN], fa[MAXN], ch[MAXN][<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; siz[x] = siz[ch[x][<span class="number">0</span>]] + siz[ch[x][<span class="number">1</span>]] + <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == ch[fa[x]][<span class="number">1</span>]; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; siz[x] = fa[x] = ch[x][<span class="number">0</span>] = ch[x][<span class="number">1</span>] = <span class="number">0</span>; val[x] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;; <span class="keyword">if</span> (x) buf[++top] = x; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> top ? buf[top--] : ++tot; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getdown</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123; val[x] += v; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ch[x][<span class="number">0</span>]) val[ch[x][<span class="number">0</span>]] += val[x];</span><br><span class="line">        <span class="keyword">if</span> (ch[x][<span class="number">1</span>]) val[ch[x][<span class="number">1</span>]] += val[x];</span><br><span class="line">        val[x].tag = val[x].tac = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(fa[x]), <span class="built_in">pushdown</span>(x);</span><br><span class="line">        <span class="keyword">int</span> y = fa[x], z = fa[y], w = <span class="built_in">get</span>(x);</span><br><span class="line">        ch[y][w] = ch[x][w ^ <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (ch[x][w ^ <span class="number">1</span>]) fa[ch[x][w ^ <span class="number">1</span>]] = y;</span><br><span class="line">        ch[x][w ^ <span class="number">1</span>] = y, fa[y] = x, fa[x] = z;</span><br><span class="line">        <span class="keyword">if</span> (z) ch[z][y == ch[z][<span class="number">1</span>]] = x;</span><br><span class="line">        <span class="built_in">maintain</span>(y), <span class="built_in">maintain</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> r = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> f = fa[x]; f = fa[x], f != r; <span class="built_in">rotate</span>(x))</span><br><span class="line">            <span class="keyword">if</span> (fa[f] != r) <span class="built_in">rotate</span>(<span class="built_in">get</span>(x) == <span class="built_in">get</span>(f) ? f : x);</span><br><span class="line">        <span class="keyword">if</span> (r == <span class="number">0</span>) rt = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cur = rt, f = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">            <span class="built_in">pushdown</span>(cur);</span><br><span class="line">            f = cur;</span><br><span class="line">            cur = ch[cur][val[cur] &lt; k];</span><br><span class="line">        &#125;</span><br><span class="line">        cur = <span class="built_in">newnode</span>();</span><br><span class="line">        val[cur] = k;</span><br><span class="line">        fa[cur] = f;</span><br><span class="line">        <span class="keyword">if</span> (f) ch[f][val[f] &lt; k] = cur;</span><br><span class="line">        <span class="built_in">maintain</span>(cur), <span class="built_in">maintain</span>(f);</span><br><span class="line">        <span class="built_in">splay</span>(cur);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(node k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cur = rt;</span><br><span class="line">        <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">            <span class="built_in">pushdown</span>(cur);</span><br><span class="line">            <span class="keyword">if</span> (k == val[cur]) &#123;</span><br><span class="line">                <span class="built_in">splay</span>(cur);</span><br><span class="line">                <span class="keyword">return</span> cur;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = ch[cur][val[cur] &lt; k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cur = ch[rt][<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">pushdown</span>(rt), <span class="built_in">pushdown</span>(cur);</span><br><span class="line">        <span class="keyword">while</span> (ch[cur][<span class="number">1</span>])</span><br><span class="line">            cur = ch[cur][<span class="number">1</span>], <span class="built_in">pushdown</span>(cur);</span><br><span class="line">        <span class="keyword">if</span> (cur) <span class="built_in">splay</span>(cur);</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">nxt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cur = ch[rt][<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">pushdown</span>(rt), <span class="built_in">pushdown</span>(cur);</span><br><span class="line">        <span class="keyword">while</span> (ch[cur][<span class="number">0</span>])</span><br><span class="line">            cur = ch[cur][<span class="number">0</span>], <span class="built_in">pushdown</span>(cur);</span><br><span class="line">        <span class="keyword">if</span> (cur) <span class="built_in">splay</span>(cur);</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(node k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">find</span>(k)) <span class="built_in">debug</span>(<span class="string">&quot;???&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!ch[rt][<span class="number">0</span>] &amp;&amp; !ch[rt][<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="built_in">clear</span>(rt);</span><br><span class="line">            rt = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!ch[rt][<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur = rt;</span><br><span class="line">            rt = ch[cur][<span class="number">1</span>];</span><br><span class="line">            fa[rt] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">clear</span>(cur);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!ch[rt][<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur = rt;</span><br><span class="line">            rt = ch[cur][<span class="number">0</span>];</span><br><span class="line">            fa[rt] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">clear</span>(cur);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> cur = rt, x = <span class="built_in">pre</span>();</span><br><span class="line">            fa[ch[cur][<span class="number">1</span>]] = x;</span><br><span class="line">            ch[rt][<span class="number">1</span>] = ch[cur][<span class="number">1</span>];</span><br><span class="line">            <span class="built_in">clear</span>(cur);</span><br><span class="line">            <span class="built_in">maintain</span>(rt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">prev</span><span class="params">(node k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">insert</span>(k);</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="built_in">pre</span>();</span><br><span class="line">        <span class="built_in">erase</span>(k);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">(node k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">insert</span>(k);</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="built_in">nxt</span>();</span><br><span class="line">        <span class="built_in">erase</span>(k);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, node *vals, <span class="keyword">int</span> &amp;len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!x) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">pushdown</span>(x);</span><br><span class="line">        <span class="built_in">dfs</span>(ch[x][<span class="number">0</span>], vals, len);</span><br><span class="line">        vals[++len] = val[x];</span><br><span class="line">        <span class="built_in">dfs</span>(ch[x][<span class="number">1</span>], vals, len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> cost)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">static</span> node vals[MAXN];</span><br><span class="line">        <span class="keyword">int</span> u = <span class="built_in">prev</span>(&#123;cost, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="keyword">int</span> v = <span class="built_in">next</span>(&#123;cost * <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="built_in">splay</span>(u, <span class="number">0</span>), <span class="built_in">splay</span>(v, u);</span><br><span class="line">        <span class="built_in">dfs</span>(ch[v][<span class="number">0</span>], vals, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">            <span class="built_in">erase</span>(vals[i]);</span><br><span class="line">            vals[i].val -= cost;</span><br><span class="line">            vals[i].cnt++;</span><br><span class="line">            <span class="built_in">insert</span>(vals[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        val[v].val -= cost, val[v].cnt++;</span><br><span class="line">        <span class="keyword">if</span> (ch[v][<span class="number">1</span>]) <span class="built_in">getdown</span>(ch[v][<span class="number">1</span>], -cost);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">shirt</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> c, q;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> shirt &amp;o) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> q == o.q ? c &lt; o.c : q &gt; o.q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m, b[MAXN], ans[MAXN];</span><br><span class="line">shirt a[MAXN];</span><br><span class="line">splay_tree splay;</span><br><span class="line">node tmp[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(a[i].c), <span class="built_in">read</span>(a[i].q);</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">read</span>(b[i]);</span><br><span class="line">    splay.<span class="built_in">insert</span>(&#123;-INFL, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    splay.<span class="built_in">insert</span>(&#123;INFL, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        splay.<span class="built_in">insert</span>(&#123;b[i], i, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        splay.<span class="built_in">solve</span>(a[i].c);</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    splay.<span class="built_in">dfs</span>(splay.rt, tmp, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">        ans[tmp[i].id] = tmp[i].cnt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">write</span>(ans[i]), <span class="built_in">putchar</span>(i == m ? <span class="string">&#x27;\n&#x27;</span> : <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>solutions</tag>
      </tags>
  </entry>
</search>
